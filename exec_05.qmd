---
title: "데이터 시각화하기"
author: 이상일(서울대학교 지리교육과)
date-modified: last-modified
number-sections: true
format: 
  html: 
    toc: true
code-link: true
code-copy: true
execute: 
  warning: false
  error: false
  freeze: auto
editor: visual
bibliography: references.bib
---

## 실습 개요 {.unnumbered}

이 실습은 R로 데이터사이언스를 하는 과정 중 데이터 시각화하기(visualizing)를 다룬다. 다음의 사항을 다룬다. 데이터 시각화하기는 [`tidyverse`](https://www.tidyverse.org/)의 핵심 패키지 중의 하나인 [`ggplot2`](https://ggplot2.tidyverse.org/) 에서 제공된다.

[`ggplot2`](https://ggplot2.tidyverse.org/)의 `gg`가 '그래프의 문법(grammar of graphic)'을 의미하는 것에서 알 수 있는 것처럼, [`ggplot2`](https://ggplot2.tidyverse.org/)는 그래프 제작의 일반 원리를 정교하게 구현하기 위해 만들어졌다. @fig-ggplot2-layers 에서 보는 것처럼, 모든 그래프는 8개의 주요 구성요소로 이루어져 있고, ggplot2는 각각의 구성요소를 마치 레이어(layer)를 쌓는 것과 같은 방식으로 구현한다(`+` 사인을 이용).

![그래프의 8개 구성요소(<https://initiation.doana-r.com/06-ggplot2#1>)](images/clipboard-3014854163.png){#fig-ggplot2-layers}

모든 실습의 시작은 [`tidyverse`](https://www.tidyverse.org/) 패키지를 불러오는 것이다.

```{r}
library(tidyverse)
```

실습을 위해 [`ggplot2`](https://ggplot2.tidyverse.org/) 패키지 속에 포함되어 있는 `mpg` 데이터와 diamonds 데이터를 사용한다. `mpg` 데이터의 11개 변수 중 다음의 세 가지 변수가 특히 중요한데, `displ`는 자동차의 엔진 크기이고, `hwy`는 고속도로 연비, `class`는 자동차의 유형이다. `diamond` 데이터는 총 54,000개의 다이아몬드에 대한 정보를 담고 있는데, 특히 가격(price) 캐럿(carat), 컬러(`color`), 투명도(`clarity`), 컷(`cut`)이 중요한 변수들이다.

## 핵심 레이어: 심미성과 기하

이 8개 구성요소 중 가장 중요한 것은 '심미성(aesthetics)' 혹은 '심미성 매핑(aesthetic mapping)'와 '기하(geometries)' 혹은 '기하 객체(geometric objects)'이다. 기하가 그래프의 전체 구조 혹은 형식을 규정하는 것이라면, 심미성은 기하의 외견을 규정한다. 결국 기하는 그래프의 유형(예: 막대 그래프, 산포도 등)과 관련되고, 심미성은 그래프의 시각적 속성(예: 컬러, 크기, 모양 등)과 관련된다. 이 두 가지는 독립적인 요소이지만, 어느 정도는 관련되어 있기도 하다. 모든 기하가 모든 심미성과 결합할 수 있는 것은 아니다. 특정한 기하는 오로지 특정한 심미성과만 결합한다. 예를 들어 포인트 기하 객체(`geom_point()`)는 크기(`size`) 심미성과 관련되지만, 라인 기하 객체(`geom_line()`)는 크기 심미성과는 관련되지 않고 라인폭(`linewidth`) 심미성과만 관련되는 식이다.

### 심미성 매핑

심미성 매핑이란 다양한 시각적 속성 혹은 재료를 그래프에 적용 혹은 부여하는 과정을 의미한다. `displ`과 `hwy`의 관계가 `class`에 따라 어떻게 달라지는지를 시각화한다. 다음의 두 그래프를 비교해 본다.

```{r}
#| label: fig-aesthetic-color
#| fig-cap: "심미성: 컬러"
ggplot(mpg, aes(x = displ, y = hwy, color = class)) +
  geom_point()
```

```{r}
#| label: fig-aesthetic-shape
#| fig-cap: "심미성: 형태"
ggplot(mpg, aes(x = displ, y = hwy, shape = class)) +
  geom_point()
```

@fig-aesthetic-color 과 @fig-aesthetic-shape 중 어느 것이 더 효과적인 시각화라고 생각하는가? 컬러(`color`)와 형태(`shape`)라는 심미성 요소 외에 크기(`size`)와 투명도(`alpha`) 요소를 동일한 데이터에 적용해 본다.

```{r}
#| label: fig-aesthetic-size
#| fig-cap: "심미성: 크기"
ggplot(mpg, aes(x = displ, y = hwy, size = class)) +
  geom_point()
```

```{r}
#| label: fig-aesthetic-alpha
#| fig-cap: "심미성: 투명도"
ggplot(mpg, aes(x = displ, y = hwy, alpha = class)) +
  geom_point()
```

크기와 투명도는 양적인 차이를 나타내는데 적합한 심미성이기 때문에 `class`라는 정성적인 범주의 차이를 보여주는데는 적합하지 않다. 심미성 부여에서 가장 중요한 것은 결국 얼마나 적절한 심미성 요소, 혹은 시각 변수(visual variables)를 선택하느냐에 달려 있다.

### 기하 객체

@fig-geometric-point 와 @fig-geometric-smooth 이 다르게 보이는 것은 기하 객체가 하나는 포인트(`point`)이고 다른 하나는 완만한 선(`smooth`)이기 때문이다.

```{r}
#| label: fig-geometric-point
#| fig-cap: "기하: geom_point()"
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point()
```

```{r}
#| label: fig-geometric-smooth
#| fig-cap: "기하: geom_smooth()"
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_smooth()
```

@fig-aesthetic-color 과 @fig-geometric-smooth 두 개를 결합해 본다.

```{r}
#| label: fig-geometric-point-smooth-1
#| fig-cap: "기하: geom_point() + geom_smooth() 1"
ggplot(mpg, aes(x = displ, y = hwy, color = class)) + 
  geom_point() + 
  geom_smooth()
```

원하는 것이 아니다. 왜 이런 결과가 나왔으며, 어떻게 하면 원하는 것을 얻을 수 있을지 생각해 본다.

```{r}
#| label: fig-geometric-point-smooth-2
#| fig-cap: "기하: geom_point() + geom_smooth() 2"
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point(aes(color = class)) + 
  geom_smooth()
```

두 결과의 차이는 `color` 심미성을 글로벌하게 적용하느냐 로컬하게 적용하느냐(포인트 기하에만 적용)에 달린 것이다. 글로벌한 심미성은 `ggplot()`속에서 설정하고, 국지적인 심미성은 개별 기하(`geom_point()`) 속에서 설정한다. 매우 중요한 사항이니 꼭 기억하도록 한다.

다양한 기하 객체는 동일한 데이터를 다양한 방식으로 탐색할 수 있게 해준다. 다음의 세가지 기하 객체는 탐색적 데이터 분석에서 널리 사용되는 것이다.

```{r}
#| label: fig-geometric-histogram-1
#| fig-cap: "기하: geom_histogram()"
ggplot(mpg, aes(x = hwy)) +
  geom_histogram(binwidth = 2)
```

```{r}
#| label: fig-geometric-density-1
#| fig-cap: "기하: geom_density()"
ggplot(mpg, aes(x = hwy)) +
  geom_density()
```

```{r}
#| label: fig-geometric-boxplot-1
#| fig-cap: "기하: geom_boxplot()"
ggplot(mpg, aes(x = hwy)) +
  geom_boxplot()
```

## 다른 레이어

### 스케일

스케일(scales)은 심미성이 구체적으로 어떻게 구현될지를 결정한다. 예를 들어 color 심미성이 적용되었다 하더라도 어떤 색상이 선정되어 어떻게 배열되는지에 따라 최종 그래프의 모습은 매우 달라질 수 있다. 그래프를 다시 나타낸다. 스케일이 어느 부분에 어떻게 적용되었는지 생각해 본다.

```{r}
#| label: fig-scale-1
#| fig-cap: ""
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
  geom_point() 
```

@fig-scale-1 은 아래에서 보는 것처럼, `ggplot2`가 자동적으로 적용한 세 가지의 스케일 설정에 의거해 만들어진 것이다.

```{r}
#| label: fig-scale-2
#| fig-cap: ""
#| eval: false
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
  geom_point() +
  scale_x_continuous() +
  scale_y_continuous() +
  scale_color_discrete()
```

수정하여 다음과 같이 적용할 수 있다. `scale` 함수의 아규먼트가 어떤 역할을 하는지 생각해 본다.

```{r}
#| label: fig-scale-3
#| fig-cap: ""
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
  geom_point() +
  scale_x_continuous(labels = NULL) +
  scale_y_continuous(breaks = seq(15, 40, by = 5)) +
  scale_color_brewer(palette = "Set1", labels = c("4" = "4-wheel", "f" = "front", "r" = "rear"))
```

`scale_color_brewer()` 함수는 [ColorBrewer](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3) 컬러 스케일을 사용한 것인데 익히고 있으면 많은 도움이 된다.

### 패싯

패싯(facets) 레이어는 다면생성(faceting) 과정을 통해 하나의 플롯을 여러개의 하위 플롯으로 쪼갬으로서 생성된다.

```{r}
#| label: fig-facet-1
#| fig-cap: "패싯: facet_wrap()"
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point() + 
  facet_wrap(~cyl)
```

두 개의 변수에 의거해 패싯을 생성할 수도 있다.

```{r}
#| label: fig-facet-2
#| fig-cap: "패싯: facet_grid()"
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point() + 
  facet_grid(drv ~ cyl)
```

### 통계적 변환

어떤 시각화 과정은 필연적으로 통계적 변환(statistical transformation)을 수반한다.

```{r}
#| label: fig-stat-1
#| fig-cap: "통계적 변환: geom_bar()"
ggplot(diamonds, aes(x = cut)) + 
  geom_bar()
```

@fig-stat-1 은 @fig-stat-2 에서 보는 바와 같이, 원데이터로부터 빈도를 계산(통계적 전환)하고 그것을 그래프로 전환한다.

![통계적 변환 과정: geom_bar()의 경우(<https://r4ds.hadley.nz/layers>)](https://r4ds.hadley.nz/images/visualization-stat-bar.png){#fig-stat-2}

`after_stat()`이라고 하는 도우미 함수를 사용하면, 이 그래프를 절대 빈도가 아닌 상대 빈도 그래프로 변환할 수 있다. 이 역시 통계적 변환 과정이 숨어 있는 것이다.

```{r}
#| label: fig-stat-3
#| fig-cap: "통계적 변환: geom_bar()"
ggplot(diamonds, aes(x = cut, y = after_stat(prop), group = 1)) + 
  geom_bar()
```

막대 그래프에 심미성을 가미하고, `position` 아규먼트를 통한 위치 조정(position adjustment)을 시도한다.

```{r}
#| label: fig-bar-fill-1
#| fig-cap: "position: stack"
ggplot(mpg, aes(x = drv, fill = class)) + 
  geom_bar()
```

기하 객체에 색상을 지정하고 싶을 때, 0차원(`point`)과 1차원(`line`) 객체에는 `color`라는 심미성을 적용하지만, 막대 그래프와 같은 2차원(`area`) 객체에는 `fill`이라는 심미성을 적용한다. 자주 혼돈이 되는 부분이다.

위치 조정을 위해 `position` 아규먼트를 사용하는데, 네 가지 옵션이 있다.

-   `position = "stack"`

-   `position = "identity"`

-   `position = "dodge"`

-   `position = "fill"`

@fig-bar-fill-1 에는 디폴트로 `position = "stack"`이 적용된 것이다. @fig-bar-fill-2 는 `position = "dodge"`를 적용한 것이다 . 나머지 옵션도 적용해보고 차이가 무엇인지 알아본다.

```{r}
#| label: fig-bar-fill-2
#| fig-cap: "position: dodge"
ggplot(mpg, aes(x = drv, fill = class)) + 
  geom_bar(position = "dodge")
```

### 좌표

좌표(coordinates) 레이어 혹은 좌표계(coordinate systems)는 그래픽 요소들의 위치 결정에 기준이 되는 준거체계이다. 특히 두 가지가 함수가 유용하다. `coord_flip()` 함수는 축을 전환한다.

```{r}
#| label: fig-coordinates-1
#| fig-cap: "coord_clip() 함수"
ggplot(mpg, aes(x = drv, fill = class)) + 
  geom_bar(position = "fill") +
  coord_flip()
```

`coord_fixed()` 함수는 두 축의 스케일을 절대화하여 동일하게 적용한다. 무슨 의미인지 알아본다.

```{r}
#| label: fig-coordinates-2
#| fig-cap: "coord_fixed() 함수"
ggplot(mpg, aes(cty, hwy)) +
  geom_point() +
  coord_fixed()
```

### 테마

테마(themes)는 그래프의 외양에 영향을 끼치는 또 다른 요소이다. 우선, 전체적인 외양을 한꺼번에 바꿀 수 있다. [`ggplot2`](https://ggplot2.tidyverse.org/)는 @fig-ggplot2-themes-1 에서 보는 처럼 모두 8가지 테마를 제공한다.

![ggplot2가 제공하는 테마(<https://r4ds.hadley.nz/communication>)](https://r4ds.hadley.nz/images/visualization-themes.png){#fig-ggplot2-themes-1}

디폴트인 회색빛 배경이 마음에 들지 않았다면 @fig-ggplot-themes-2 처럼 흑백 테마(`theme_bw()`)를 적용할 수도 있다. 다른 테마도 적용해 보고 그 차이를 알아본다.

```{r}
#| label: fig-ggplot-themes-2
#| fig-cap: ""
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  geom_smooth(se = FALSE) +
  theme_bw()
```

이렇게 한꺼번에 그래프의 외관을 바꿀 수도 있지만 `theme()` 함수를 통해 그래프의 개별 요소 하나씩을 모두 수정할 수 있다. 어떤 요소를 바꿀 수 있는지 다음을 참고한다.

-   <https://ggplot2.tidyverse.org/reference/theme.html>

@fig-ggplot-themes-3 는 몇 가지 요소를 수정한 사례이다.

```{r}
#| label: fig-ggplot-themes-3
#| fig-cap: "개별 요소의 수정: theme() 함수"
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
  geom_point() +
  labs(
    title = "Larger engine sizes tend to have lower fuel economy",
    caption = "Source: https://fueleconomy.gov."
  ) +
  theme(
    legend.position = c(0.6, 0.7),
    legend.direction = "horizontal",
    plot.title = element_text(face = "bold"),
    plot.title.position = "plot",
    plot.caption.position = "plot",
    plot.caption = element_text(hjust = 0)
  )
```

## 기타 사항

### 라벨과 주석

`lab()` 함수를 활용하면 그래프의 다양한 종류의 라벨을 설정할 수 있다.

```{r}
#| label: fig-ggplot-label-1
#| fig-cap: "라벨링"
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  geom_smooth(se = FALSE) +
  labs(
    x = "Engine displacement (L)",
    y = "Highway fuel economy (mpg)",
    color = "Car type",
    title = "Fuel efficiency generally decreases with engine size",
    subtitle = "Two seaters (sports cars) are an exception because of their light weight",
    caption = "Data from fueleconomy.gov"
  )
```

기하 함수인 `geom_text()` 혹은 `geom_label()`를 통해 그래프 속에 텍스트를 삽입할 수 있다. 주석이 겹치는 것을 방지하기 위해 `ggrepel` 패키지가 유용하게 사용될 수 있다.

```{r}
library(ggrepel)
```

```{r}
ggplot(mpg, aes(displ, hwy)) + 
  geom_point(colour = "red") +
  geom_label_repel(data = mpg |> slice_sample(prop = 0.1), aes(label = class))
```

### 레이아웃

레이아웃(layout)은 복수의 그래프를 적절히 배치하여 하나의 그래픽으로 융합하는 과정을 의미한다. 수 많은 [`ggplot2`](https://ggplot2.tidyverse.org/)의 [확장 패키지(ggplot2 extensions)](https://exts.ggplot2.tidyverse.org/) 중 하나이 [`patchwork`](https://patchwork.data-imaginist.com/) 패키지를 활용할 수 있다.

```{r}
library(patchwork)
```

```{r}
#| label: fig-ggplot-patchwork-1
#| fig-cap: "레이아웃: patchwork 패키지"
p1 <- ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point() + 
  labs(title = "Plot 1")
p2 <- ggplot(mpg, aes(x = drv, y = hwy)) + 
  geom_boxplot() + 
  labs(title = "Plot 2")
p1 + p2
```

### 그래프의 저장

두 가지 방식이 있다.

첫 번째 방식은 Output 창의 Plots 탭에 있는 Export 버턴을 이용하는 것이다. 다양한 그래픽 포멧 뿐만 아니라 pdf 형식으로도 저장할 수 있다.

두 번째 방식은 [`ggplot2`](https://ggplot2.tidyverse.org/) 의 `ggsave()` 함수를 이용하는 것이다. 결과물의 폰트 크기, 가로세로비, 해상도 등을 종합적으로 고려하여 최적의 세팅값을 찾아야 한다. 자신의 디바이스에 따라 동일한 세팅값이 다른 결과를 산출할 수도 있다.

```{r}
#| label: fig-ggplot-save-1
#| fig-cap: "그래프의 저장: ggsave() 함수"
my_plot <- ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
  geom_point() +
  labs(
    title = "Larger engine sizes tend to have lower fuel economy",
    caption = "Source: https://fueleconomy.gov."
  ) +
  theme(
    legend.position = c(0.6, 0.7),
    legend.direction = "horizontal",
    plot.title = element_text(face = "bold"),
    plot.title.position = "plot",
    plot.caption.position = "plot",
    plot.caption = element_text(hjust = 0)
  )
ggsave(filename = "my_plot.png", plot = my_plot, width = 8, height = 8 * 0.618, dpi = 600)
```
