[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "웹사이트 소개",
    "section": "",
    "text": "이 웹사이트는 데이터사이언스( Data Science)를 위한 개인 공부방으로 디자인되었다 .\n하지만 서울대학교에서 내가 개설한 데이터 사인언스 관련 교과목의 보충 웹사이트로 활용될 수도 있다.\n\n2024/1 M3450.001400 AI 융합교육을 위한 인문사회 컨텐츠 설계 (Designing Human and Social Education Contents for AI Convergence Education)",
    "crumbs": [
      "웹사이트 소개"
    ]
  },
  {
    "objectID": "index.html#웹사이트의-목적",
    "href": "index.html#웹사이트의-목적",
    "title": "웹사이트 소개",
    "section": "",
    "text": "이 웹사이트는 데이터사이언스( Data Science)를 위한 개인 공부방으로 디자인되었다 .\n하지만 서울대학교에서 내가 개설한 데이터 사인언스 관련 교과목의 보충 웹사이트로 활용될 수도 있다.\n\n2024/1 M3450.001400 AI 융합교육을 위한 인문사회 컨텐츠 설계 (Designing Human and Social Education Contents for AI Convergence Education)",
    "crumbs": [
      "웹사이트 소개"
    ]
  },
  {
    "objectID": "index.html#웹사이트의-구조",
    "href": "index.html#웹사이트의-구조",
    "title": "웹사이트 소개",
    "section": "웹사이트의 구조",
    "text": "웹사이트의 구조\n\n데이터 사이언스 관련 내용을 모두 10개의 하위 섹션으로 나누었다.\n각 하위 섹션은 세 개의 컨텐츠를 갖는다.\n\n내용 강의\n실습 강의\n실습",
    "crumbs": [
      "웹사이트 소개"
    ]
  },
  {
    "objectID": "index.html#참고문헌",
    "href": "index.html#참고문헌",
    "title": "웹사이트 소개",
    "section": "참고문헌",
    "text": "참고문헌\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund, 2023, R for Data Science: Import, Tidy, Transform, Visualize, and Model Data, 2nd edition, Boston: O’Reilly. \n\n이 사이트의 내용은 위의 책에 많은 토대를 두고 있다.\n\nWickham, Hadley, and Garrett Grolemund. 2016. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. 1st edition. Sebastopol, CA: O’Reilly.\nBonnell, Jerry, and Mitsunori Ogihara. 2023. Exploring Data Science with R and the Tidyverse. 1st edition. Chapman; Hall/CRC.\nIrizarry, Rafael A. 2020. Introduction to Data Science: Data Analysis and Prediction Algorithms with R. Boca Raton: CRC Press, Taylor & Francis Group.\nIsmay, Chester, and Albert Y. Kim. 2024. Statistical Inference via Data Science: A ModernDive into R and the Tidyverse: A ModernDive into R and the Tidyverse. Boca Raton: Chapman; Hall/CRC. \nBrendan R. E. Ansell, Introduction to R - tidyverse, 웹북\nRStudio IDE User Guide (https://docs.posit.co/ide/user/)\n김기환, 2023, R 프로그래밍(개정판), 웹북",
    "crumbs": [
      "웹사이트 소개"
    ]
  },
  {
    "objectID": "R_lec_07.html",
    "href": "R_lec_07.html",
    "title": "Data Collection",
    "section": "",
    "text": "Code\nResult\n\n\n\n\nlibrary(tidyverse)\nlibrary(readr)\nread_csv(\"https://pos.it/r4ds-students-csv\")\n\n\n\n\nlibrary(tidyverse)\nlibrary(readr)\nread_csv(\"https://pos.it/r4ds-students-csv\")\n\n# A tibble: 6 × 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\n\n\n\n\n\n\nCode\nResult\n\n\n\n\nlibrary(openxlsx)\nread.xlsx(\"https://github.com/awalker89/openxlsx/raw/master/inst/readTest.xlsx\")\n\n\n\n\nlibrary(openxlsx)\nread.xlsx(\"https://github.com/awalker89/openxlsx/raw/master/inst/readTest.xlsx\")\n\n    Var1 Var2   Var3 Var4  Var5         Var6 Var7\n1   TRUE    1   1.00    a 42042 3209324 This   NA\n2   TRUE   NA     NA    b 42041         &lt;NA&gt;   NA\n3   TRUE    2   1.34    c 42040         &lt;NA&gt;   NA\n4  FALSE    2     NA &lt;NA&gt;    NA         &lt;NA&gt;   NA\n5  FALSE    3   1.56    e    NA         &lt;NA&gt;   NA\n6  FALSE    1   1.70    f 42037         &lt;NA&gt;   NA\n7     NA   NA     NA &lt;NA&gt; 42036         &lt;NA&gt;   NA\n8  FALSE    2  23.00    h 42035         &lt;NA&gt;   NA\n9  FALSE    3  67.30    i 42034         &lt;NA&gt;   NA\n10    NA    1 123.00 &lt;NA&gt; 42033         &lt;NA&gt;   NA\n\n\n\n\n\n\n\n\nCode\nResult\n\n\n\n\nlibrary(googlesheets4)\ngs4_deauth()\nread_sheet(\"https://docs.google.com/spreadsheets/d/1U6Cf_qEOhiR9AZqTqS3mbMF3zt2db48ZP5v3rkrAEJY/edit#gid=780868077\")\n\n\n\n\nlibrary(googlesheets4)\ngs4_deauth()\nread_sheet(\"https://docs.google.com/spreadsheets/d/1U6Cf_qEOhiR9AZqTqS3mbMF3zt2db48ZP5v3rkrAEJY/edit#gid=780868077\")\n\n# A tibble: 624 × 6\n   country continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 Algeria Africa     1952    43.1  9279525     2449.\n 2 Algeria Africa     1957    45.7 10270856     3014.\n 3 Algeria Africa     1962    48.3 11000948     2551.\n 4 Algeria Africa     1967    51.4 12760499     3247.\n 5 Algeria Africa     1972    54.5 14760787     4183.\n 6 Algeria Africa     1977    58.0 17152804     4910.\n 7 Algeria Africa     1982    61.4 20033753     5745.\n 8 Algeria Africa     1987    65.8 23254956     5681.\n 9 Algeria Africa     1992    67.7 26298373     5023.\n10 Algeria Africa     1997    69.2 29072015     4797.\n# ℹ 614 more rows",
    "crumbs": [
      "R 프레젠테이션",
      "Data Collection"
    ]
  },
  {
    "objectID": "R_lec_07.html#readr-package",
    "href": "R_lec_07.html#readr-package",
    "title": "Data Collection",
    "section": "\nreadr package",
    "text": "readr package\n\n\nCode\nResult\n\n\n\n\nlibrary(tidyverse)\nlibrary(readr)\nread_csv(\"https://pos.it/r4ds-students-csv\")\n\n\n\n\nlibrary(tidyverse)\nlibrary(readr)\nread_csv(\"https://pos.it/r4ds-students-csv\")\n\n# A tibble: 6 × 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 Güvenç Attila    Ice cream          Lunch only          6",
    "crumbs": [
      "R 프레젠테이션",
      "Data Collection"
    ]
  },
  {
    "objectID": "R_lec_07.html#openxlsx-package",
    "href": "R_lec_07.html#openxlsx-package",
    "title": "Data Collection",
    "section": "\nopenxlsx package",
    "text": "openxlsx package\n\n\nCode\nResult\n\n\n\n\nlibrary(openxlsx)\nread.xlsx(\"https://github.com/awalker89/openxlsx/raw/master/inst/readTest.xlsx\")\n\n\n\n\nlibrary(openxlsx)\nread.xlsx(\"https://github.com/awalker89/openxlsx/raw/master/inst/readTest.xlsx\")\n\n    Var1 Var2   Var3 Var4  Var5         Var6 Var7\n1   TRUE    1   1.00    a 42042 3209324 This   NA\n2   TRUE   NA     NA    b 42041         &lt;NA&gt;   NA\n3   TRUE    2   1.34    c 42040         &lt;NA&gt;   NA\n4  FALSE    2     NA &lt;NA&gt;    NA         &lt;NA&gt;   NA\n5  FALSE    3   1.56    e    NA         &lt;NA&gt;   NA\n6  FALSE    1   1.70    f 42037         &lt;NA&gt;   NA\n7     NA   NA     NA &lt;NA&gt; 42036         &lt;NA&gt;   NA\n8  FALSE    2  23.00    h 42035         &lt;NA&gt;   NA\n9  FALSE    3  67.30    i 42034         &lt;NA&gt;   NA\n10    NA    1 123.00 &lt;NA&gt; 42033         &lt;NA&gt;   NA",
    "crumbs": [
      "R 프레젠테이션",
      "Data Collection"
    ]
  },
  {
    "objectID": "R_lec_07.html#googlesheet4-package",
    "href": "R_lec_07.html#googlesheet4-package",
    "title": "Data Collection",
    "section": "\ngooglesheet4 package",
    "text": "googlesheet4 package\n\n\nCode\nResult\n\n\n\n\nlibrary(googlesheets4)\ngs4_deauth()\nread_sheet(\"https://docs.google.com/spreadsheets/d/1U6Cf_qEOhiR9AZqTqS3mbMF3zt2db48ZP5v3rkrAEJY/edit#gid=780868077\")\n\n\n\n\nlibrary(googlesheets4)\ngs4_deauth()\nread_sheet(\"https://docs.google.com/spreadsheets/d/1U6Cf_qEOhiR9AZqTqS3mbMF3zt2db48ZP5v3rkrAEJY/edit#gid=780868077\")\n\n# A tibble: 624 × 6\n   country continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 Algeria Africa     1952    43.1  9279525     2449.\n 2 Algeria Africa     1957    45.7 10270856     3014.\n 3 Algeria Africa     1962    48.3 11000948     2551.\n 4 Algeria Africa     1967    51.4 12760499     3247.\n 5 Algeria Africa     1972    54.5 14760787     4183.\n 6 Algeria Africa     1977    58.0 17152804     4910.\n 7 Algeria Africa     1982    61.4 20033753     5745.\n 8 Algeria Africa     1987    65.8 23254956     5681.\n 9 Algeria Africa     1992    67.7 26298373     5023.\n10 Algeria Africa     1997    69.2 29072015     4797.\n# ℹ 614 more rows",
    "crumbs": [
      "R 프레젠테이션",
      "Data Collection"
    ]
  },
  {
    "objectID": "R_lec_07.html#rvest-package",
    "href": "R_lec_07.html#rvest-package",
    "title": "Data Collection",
    "section": "\nrvest package",
    "text": "rvest package",
    "crumbs": [
      "R 프레젠테이션",
      "Data Collection"
    ]
  },
  {
    "objectID": "R_lec_07.html#example-1-website",
    "href": "R_lec_07.html#example-1-website",
    "title": "Data Collection",
    "section": "Example 1: Website",
    "text": "Example 1: Website\nvignette(“starwars”)\n\n&lt;section&gt;\n  &lt;h2 data-id=\"1\"&gt;The Phantom Menace&lt;/h2&gt;\n  &lt;p&gt;Released: 1999-05-19&lt;/p&gt;\n  &lt;p&gt;Director: &lt;span class=\"director\"&gt;George Lucas&lt;/span&gt;&lt;/p&gt;\n  \n  &lt;div class=\"crawl\"&gt;\n    &lt;p&gt;...&lt;/p&gt;\n    &lt;p&gt;...&lt;/p&gt;\n    &lt;p&gt;...&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/section&gt;",
    "crumbs": [
      "R 프레젠테이션",
      "Data Collection"
    ]
  },
  {
    "objectID": "R_lec_07.html#example-1-title",
    "href": "R_lec_07.html#example-1-title",
    "title": "Data Collection",
    "section": "Example 1: Title",
    "text": "Example 1: Title\n\n\nCode\nResult\n\n\n\n\nlibrary(rvest)\nurl &lt;- \"https://rvest.tidyverse.org/articles/starwars.html\"\nread_html(url) |&gt; \n  html_elements(\"section\") |&gt; \n  html_element(\"h2\") |&gt; \n  html_text2()\n\n\n\n\nlibrary(rvest)\nurl &lt;- \"https://rvest.tidyverse.org/articles/starwars.html\"\nread_html(url) |&gt; \n  html_elements(\"section\") |&gt; \n  html_element(\"h2\") |&gt; \n  html_text2()\n\n[1] \"The Phantom Menace\"      \"Attack of the Clones\"   \n[3] \"Revenge of the Sith\"     \"A New Hope\"             \n[5] \"The Empire Strikes Back\" \"Return of the Jedi\"     \n[7] \"The Force Awakens\"",
    "crumbs": [
      "R 프레젠테이션",
      "Data Collection"
    ]
  },
  {
    "objectID": "R_lec_07.html#example-1-all-together",
    "href": "R_lec_07.html#example-1-all-together",
    "title": "Data Collection",
    "section": "Example 1: All together",
    "text": "Example 1: All together\n\n\nCode\nResult\n\n\n\n\nsection &lt;- read_html(url) |&gt; \n  html_elements(\"section\")\ntibble(\n  title = section |&gt; \n    html_element(\"h2\") |&gt; \n    html_text2(),\n  released = section |&gt; \n    html_element(\"p\") |&gt; \n    html_text2() |&gt; \n    str_remove(\"Released: \") |&gt; \n    parse_date(),\n  director = section |&gt; \n    html_element(\".director\") |&gt; \n    html_text2(),\n  intro = section |&gt; \n    html_element(\".crawl\") |&gt; \n    html_text2()\n)\n\n\n\n\nsection &lt;- read_html(url) |&gt; \n  html_elements(\"section\")\ntibble(\n  title = section |&gt; \n    html_element(\"h2\") |&gt; \n    html_text2(),\n  released = section |&gt; \n    html_element(\"p\") |&gt; \n    html_text2() |&gt; \n    str_remove(\"Released: \") |&gt; \n    parse_date(),\n  director = section |&gt; \n    html_element(\".director\") |&gt; \n    html_text2(),\n  intro = section |&gt; \n    html_element(\".crawl\") |&gt; \n    html_text2()\n)\n\n# A tibble: 7 × 4\n  title                   released   director         intro                     \n  &lt;chr&gt;                   &lt;date&gt;     &lt;chr&gt;            &lt;chr&gt;                     \n1 The Phantom Menace      1999-05-19 George Lucas     \"Turmoil has engulfed the…\n2 Attack of the Clones    2002-05-16 George Lucas     \"There is unrest in the G…\n3 Revenge of the Sith     2005-05-19 George Lucas     \"War! The Republic is cru…\n4 A New Hope              1977-05-25 George Lucas     \"It is a period of civil …\n5 The Empire Strikes Back 1980-05-17 Irvin Kershner   \"It is a dark time for th…\n6 Return of the Jedi      1983-05-25 Richard Marquand \"Luke Skywalker has retur…\n7 The Force Awakens       2015-12-11 J. J. Abrams     \"Luke Skywalker has vanis…",
    "crumbs": [
      "R 프레젠테이션",
      "Data Collection"
    ]
  },
  {
    "objectID": "R_lec_07.html#example-2-naver-news",
    "href": "R_lec_07.html#example-2-naver-news",
    "title": "Data Collection",
    "section": "Example 2: Naver news",
    "text": "Example 2: Naver news\n\n\n네이버 뉴스\n뉴스 검색: “지방소멸”\n검색 결과: https://search.naver.com/search.naver?where=news&ie=utf8&sm=nws_hty&query=%EC%A7%80%EB%B0%A9%EC%86%8C%EB%A9%B8",
    "crumbs": [
      "R 프레젠테이션",
      "Data Collection"
    ]
  },
  {
    "objectID": "R_lec_07.html#example-2-naver-news-1",
    "href": "R_lec_07.html#example-2-naver-news-1",
    "title": "Data Collection",
    "section": "Example 2: Naver news",
    "text": "Example 2: Naver news\n\n\nCode\nResult\n\n\n\n\nurl &lt;- \"https://search.naver.com/search.naver?where=news&ie=utf8&sm=nws_hty&query=%EC%A7%80%EB%B0%A9%EC%86%8C%EB%A9%B8\"\ntitle &lt;- url |&gt; \n  read_html() |&gt; \n  html_elements(\".news_tit\") |&gt; \n  html_text2()\ncontents &lt;- url |&gt; \n  read_html() |&gt; \n  html_elements(\".dsc_txt_wrap\") |&gt; \n  html_text2()\ntibble(title, contents)\n\n\n\n\nurl &lt;- \"https://search.naver.com/search.naver?where=news&ie=utf8&sm=nws_hty&query=%EC%A7%80%EB%B0%A9%EC%86%8C%EB%A9%B8\"\ntitle &lt;- url |&gt; \n  read_html() |&gt; \n  html_elements(\".news_tit\") |&gt; \n  html_text2()\ncontents &lt;- url |&gt; \n  read_html() |&gt; \n  html_elements(\".dsc_txt_wrap\") |&gt; \n  html_text2()\ntibble(title, contents)\n\n# A tibble: 10 × 2\n   title                                                               contents \n   &lt;chr&gt;                                                               &lt;chr&gt;    \n 1 \"[지방소멸 경고등] 위기 속 작은 희망…영월 옥동초교의 실험\"          \"연합뉴… \n 2 \"지자체 ‘지방소멸기금’ 최대 160억 지원\"                             \"지방소… \n 3 \"접경지, 청년 창업 ‘확대’…지방소멸 ‘극복’ 시도\"                     \"[앵커] …\n 4 \"우수 지자체에 지방소멸대응기금 집중 지원한다…배분체계 개선\"        \"행정안… \n 5 \"저출산율·양극화… 韓사회는 왜 소멸의 길을 가고 있나\"                \"사람들… \n 6 \"[인터뷰] 천하람 \\\"저출산·지방소멸·정치개혁…미래세대 이슈에 집중\\\"\" \"또 지방…\n 7 \"[매일경제TV] 지방 소멸 막기 위한 정책\"                             \"인구 감…\n 8 \"지역소멸 시대, 농협의 역할에 변화가 필요하다\"                      \"농식품… \n 9 \"여당 재선 엄태영 \\\"지방소멸위기 처한 제천·단양 반드시 살리겠다\\\"\"  \"'실천하…\n10 \"“강진군, 지역소멸 위기 극복 인구정책 롤모델 급부상”\"               \"군에 따…",
    "crumbs": [
      "R 프레젠테이션",
      "Data Collection"
    ]
  },
  {
    "objectID": "R_lec_07.html#example-naver-news",
    "href": "R_lec_07.html#example-naver-news",
    "title": "Data Collection",
    "section": "Example: Naver news",
    "text": "Example: Naver news\n\n\nNAVER Developer (https://developers.naver.com/main/)\n\n[Products]-[서비스 API]-[검색] (https://developers.naver.com/products/service-api/search/search.md)\n\n오픈 API 이용 신청\n개발 가이드 보기\n\n\n\n오픈 API 이용 신청\n\n애플리케이션 이름\n\n비로그인 오픈 API 서비스 환경\n\nWEB 설정\n웹 서비스 URL: http://localhost",
    "crumbs": [
      "R 프레젠테이션",
      "Data Collection"
    ]
  },
  {
    "objectID": "R_lec_07.html#example-naver-news-1",
    "href": "R_lec_07.html#example-naver-news-1",
    "title": "Data Collection",
    "section": "Example: Naver news",
    "text": "Example: Naver news\n\n\nCode 1\nResult 1\nCode 2\n\n\n\n\nlibrary(httr2)\nsearch &lt;- \"지방소멸\"\nyour_url &lt;- \"https://openapi.naver.com/v1/search/news.json\"\nresult_naver &lt;- request(your_url) |&gt; \n  req_headers(\n    \"X-Naver-Client-ID\" = your_ClientID,\n    \"X-Naver-Client-Secret\" = your_Client_Secret\n  ) |&gt; \n  req_url_query(\n    query = search,\n    display = 100,\n    start = 1,\n    sort = \"date\"\n  ) |&gt; \n  req_perform() |&gt; \n  resp_body_json() \nnaver_data &lt;- data.frame(t(sapply(result_naver$items, data.frame)))\nnaver_data\n\n\n\n\nlibrary(httr2)\nsearch &lt;- \"지방소멸\"\nyour_url &lt;- \"https://openapi.naver.com/v1/search/news.json\"\nresult_naver &lt;- request(your_url) |&gt; \n  req_headers(\n    \"X-Naver-Client-ID\" = your_ClientID,\n    \"X-Naver-Client-Secret\" = your_Client_Secret\n  ) |&gt; \n  req_url_query(\n    query = search,\n    display = 100,\n    start = 1,\n    sort = \"date\"\n  ) |&gt; \n  req_perform() |&gt; \n  resp_body_json() \nnaver_data &lt;- data.frame(t(sapply(result_naver$items, data.frame)))\nnaver_data\n\n                                                                                           title\n1                                                             '저출생' 파장에 사회 전반이 '흔들'\n2                                                     포천시의회, 인구감소대응특위 위원장단 선임\n3                                                 농협 경제사업 강화로 지역 일자리 창출 확대해야\n4                                            지역&lt;b&gt;소멸&lt;/b&gt; 시대, 농협의 역할에 변화가 필요하다\n5                          장성군, 나주시·화순·담양군과 전남권 개발제한구역 전면 해제 공동건의\n6                               상품권·온라인 포인트·상장 주식…7월부터 쉽고 편하게 기부하세요\n7                                                         전통시장 부활‥&quot;상권 살리자&quot;\n8                                                경남도청 산악회, 전남 사랑애 서포터즈 홍보 앞장\n9                                         전북하이텍고-완주군, 협약형 특성화고 1차 서류심사 통과\n10                  하승철 하동군수, 국토부에 컴팩트 매력도시 현안 사업 건의..제2차관 만나 확...\n11                   Professor Story / 군장대 외식조리과 이선일 교수 ”캡스톤 디자인에 입각하...\n12                   '전라·제주 여성가족정책 네트워크' 출범…전북여성가족재단, 지역주도 여성...\n13                                                  [매일경제TV] &lt;b&gt;지방 소멸&lt;/b&gt; 막기 위한 정책\n14                     [인터뷰] 천하람 “개혁신당 3석, ‘소신파 정치인’ 멸종 막겠다는 국민 뜻”\n15               [헬로 이슈토크] 중구영도구 조승환 당선인 &quot;기업유치·일자리 창출 집중&quot;\n16                                                  '1명 출산할 때 1억 원'...저출생 해결책 될까?\n17                                             경남도청 산악회, '전남 사랑애 서포터즈 홍보' 앞장\n18                                                              7월부터 '이것'도 기부 가능해진다\n19                                                  영주시, 제1회 추경예산안 1조 1천838억원 편성\n20                                                                일본의 ‘2지역 거주인구 대책’\n21                                   &quot;혐오정치 끝내러 왔다&quot; 서미화, '이준석' 콕 찍었다\n22                                     경상북도시장군수협의회 정례회 개최…저출생 극복 성금 전달\n23                                            &quot;전남권 개발제한구역 전면 해제&quot; 공동건의\n24                             7월부터 백화점·마트 상품권, 상장 주식, 네이버 포인트도 기부 가능\n25                          제주-광주전남 '혁신플랫폼', 미래형운송기기·미래모빌리티 발전 '맞손'\n26                          장성군, 나주시‧화순군‧담양군, 전남권 개발제한구역 전면 해제 공동건의\n27                                  “목포대 의과대학 유치 결의”… 목포시 5월 시정현안회의 개최\n28                                     주식·백화점 상품권·네이버 페이도 기부된다…7월31일 시행\n29                               일본판 ‘고향사랑기부제’ 9조원 뭉칫돈…답례품 경쟁 과열 양상도\n30                                    장성군 등 전남 중부권 4개 시군, 개발제한구역 전면 해제해야\n31                                               백화점 상품권·주식 등 유가증권 기부 가능해진다\n32                                           경남도청 산악회, 전남 사랑애 서포터즈 홍보 앞장선다\n33                                         &quot;네이버포인트·백화점상품권으로 기부하세요&quot;\n34                  '전남 사랑애 서포터즈' 홍보 앞장선 경남도청 산악회...전남도청 산악회와 상...\n35                                      강원대 김헌영 총장, '차이나는 클라스 – 위대한 질문' 출연\n36                              [취재파일] 인공위성에 찍힌 생생한 북한, 경제학자가 분석했더니...\n37                                              경남도청 산악회, '전남 사랑애서포터즈' 홍보 앞장\n38                              &quot;백화점 상품권, 네이버 포인트도 기부 가능&quot;...입법 예고\n39                                 '영호남 화합' 경남도청 산악회, 전남 사랑애 서포터즈 홍보 앞장\n40                              경북도의회, 경북도 2억1700만원 감액ㆍ경북교육청 9억818만 원 감액\n41                                                      김헌영 강원대 총장, 차이나는 클라스 출연\n42                                               경남도청 산악회, 전남 사랑애 서포터즈 홍보 앞장\n43                   대학 캠퍼스에도 실버타운 들어서나? 고령화시대 새 먹거리로 주목[황재성의 ...\n44           [인터뷰] 천하람 &quot;저출산·&lt;b&gt;지방소멸&lt;/b&gt;·정치개혁…미래세대 이슈에 집중&quot;\n45                                            함양 서상초, '경남 작은학교 살리기 공모 사업' 선정\n46    &quot;조국당 돌풍 진원지 '광주', 민주당 뼈아프게 새겨야&quot;...&quot;전주 떠난 KCC, 연...\n47                 &quot;어린이 없는 놀이터 부지기수&quot;…초등생 확 줄고 문 닫는 유치원 '속출'\n48         [청년이 희망이다] &quot;완도를 제주처럼 멋지게&quot;…피어싱한 20대 여성 이장의 도...\n49                                  7월부터 백화점 상품권·네이버 포인트·주식도 기부 가능해진다\n50                         경상북도시장군수협의회, 정기회의 개최…저출생 극복 성금 2000만원 전달\n51                                     접경지, 청년 창업 ‘확대’…&lt;b&gt;지방소멸&lt;/b&gt; ‘극복’ 시도\n52                                   하승철 하동군수, 국토교통부에 컴팩트 매력도시 현안사업 건의\n53                                                 세종시-청양군, 고향기부 활성화 위해 교차 기부\n54                                                    전남도-전남도새마을회, 지역 미래 발전 맞손\n55                                  경상북도시장군수협의회 정례회 개최…저출생 성금 2천만원 전달\n56                                              고령군, 2040 중장기 종합발전계획 주민설명회 개최\n57                                     영주시, 2024년도 제1회 추가경정 예산안 1조 1838억 원 편성\n58                                                '농사짓는 현직 도의원' 김성일, 전남도의장 도전\n59                                                지자체 ‘&lt;b&gt;지방소멸&lt;/b&gt;기금’ 최대 160억 지원\n60                               경북 김천시, 제1회 추경예산안 1조4850억 원 편성…1200억 원 증액\n61                                          호서대, ㈜한국후꼬꾸와 '외국인 유학생 취업' 산학협력\n62                                            고령군, '2040 중장기 종합발전계획 주민설명회' 개최\n63                                         재개발·재건축 규제 풀어도 '내 집 마련' 멀어지는 이유\n64                           장성군-4개 시.군 자치단체장, 전남권 개발제한구역 전면해제 공동 건의\n65                                                    전남도-전남도새마을회, 지역 미래 발전 맞손\n66                          저출산 극복 위한 국회 세미나···&quot;부영모델 확산여부 관심&quot;\n67                                                        세종-청양 고향사랑기부제 교차기부 동참\n68                                    저출산 극복 위한 기업의 역할과 국회의 지원방안 세미나 개최\n69                      [위클리오늘] 경상북도시장군수협의회 정례회 개최 … 저출생 극복 성금 전달\n70                           “인구정책 1번지 비법이 뭔가요?” …강진군 인구정책 벤치마킹 이어져\n71                      포천시의회 '인구감소 대응 특위' 열고 임종훈 위원장·안애경 부위원장 선임\n72                                                성평등 실현을 위한 최초 광역형 성평등기구 출범\n73                  포천시의회 인구감소 위기 대응 특별위원회 출범: 위기 극복을 위한 기대와 과...\n74                   경남도립남해대학-경남국제외국인학교, 글로컬대학사업 및 교육발전특구사업 ...\n75                                                 울진 월변지구 개발 속도…2026년 기반시설 준공\n76                            나주시,, 장성군화순담양군과 전남권 개발제한구역 전면 해제 공동건의\n77                                  하승철 하동군수, 국토교통부에 컴팩트 매력도시 현안 사업 건의\n78                                              함양 서상초, 경남 작은학교 살리기 공모 사업 선정\n79                                  [e추천경매물건]송파 올림픽선수촌 131.8㎡, 18.8억원 매물 나와\n80                                                   영월군 '경기의정포럼, 2024 의정워크숍' 개최\n81                                        태백시, 청년 및 신혼부부 대상, 만원 임대료 입주자 모집\n82  [지역&lt;b&gt;소멸&lt;/b&gt;을 막아라] &quot;고등학교서도 유학생이 공부를…&quot; 김천고 한국의 '이튼...\n83                                        &quot;은퇴 준비라는 것은 행복하게 살기 위한 준비&quot;\n84                              [&lt;b&gt;지방소멸&lt;/b&gt; 경고등] 위기 속 작은 희망…영월 옥동초교의 실험\n85              여당 재선 엄태영 &quot;&lt;b&gt;지방소멸&lt;/b&gt;위기 처한 제천·단양 반드시 살리겠다&quot;\n86            &quot;닥터바리스타 방탄커피&quot; 등 4일 캐시워크 돈버는퀴즈 전체 문제+정답![단독]\n87                                   저출산율·양극화… 韓사회는 왜 &lt;b&gt;소멸&lt;/b&gt;의 길을 가고 있나\n88                                                영월군의회, 집행부와 함께 우수사례 현장 워크숍\n89                                              함양 서상초, 경남 작은학교 살리기 공모 사업 선정\n90                                   초고령사회 눈앞… 실버타운 승부수로 ‘두 마리 토끼’ 잡는다\n91                             장성군, 나주‧화순‧담양군 '전남권 개발제한구역 전면 해제' 공동건의\n92                                                  전남도-전남도새마을회, 지역 미래 발전 '맞손'\n93                                                               [에디터 프리즘] 1만원 로또 주택\n94                                                    영주시, 제1회 추경예산안 1조 1838억원 편성\n95                  포천시의회, '인구감소 위기 대응 특별위원회' 제1차 회의 개의···위원장·...\n96                                                             TK 출신 제3지대 당선인 누가 있나?\n97                                                   세종-청양 고향사랑기부제 교차기부 동참 눈길\n98                                                           곡성군, 곡성군민의 날 기념행사 개최\n99                                                   세종-청양 고향사랑기부제 교차기부 동참 눈길\n100                             경북 시장군수협의회, 봉화서 현안사업 논의…저출생 극복 성금 전달\n                                                                                                                                        originallink\n1                                                                                   http://news.lghellovision.net/news/articleView.html?idxno=465222\n2                                                                                              https://www.ekn.kr/web/view.php?key=20240505022040658\n3                                                                                           http://www.ikpnews.net/news/articleView.html?idxno=63718\n4                                                                                           http://www.ikpnews.net/news/articleView.html?idxno=63748\n5                                                                                                 http://www.metroseoul.co.kr/article/20240503500443\n6                                                                           https://www.khan.co.kr/national/national-general/article/202405052105005\n7                                                                                                   https://ysmbc.co.kr/article/xs4IrUpxIvOloOE6-Wap\n8                                                                                        http://www.bzeronews.com/news/articleView.html?idxno=658800\n9                                                                                        http://www.jeonmin.co.kr/news/articleView.html?idxno=396957\n10                                                                                                           http://kpenews.com/View.aspx?No=3220350\n11                                                                                          https://www.cooknchefnews.com/news/view/1065594646252469\n12                                                                                       http://www.jeonmin.co.kr/news/articleView.html?idxno=396923\n13                                                                                                             https://www.mk.co.kr/article/11007802\n14                                                                      https://www.kmib.co.kr/article/view.asp?arcid=0020067996&code=61111511&cp=nv\n15                                                                                  http://news.lghellovision.net/news/articleView.html?idxno=465236\n16                                                                                                 https://www.ytn.co.kr/_ln/0103_202405051638546366\n17                                                                                    http://www.newsworker.co.kr/news/articleView.html?idxno=330301\n18                                                                                      https://kizmom.hankyung.com/news/view.html?aid=202405057572o\n19                                                                                              https://www.imaeil.com/page/view/2024050510280271096\n20                                                                                           http://www.m-economynews.com/news/article.html?no=43234\n21  https://www.ohmynews.com/NWS_Web/View/at_pg.aspx?CNTN_CD=A0003026837&CMPT_CD=P0010&utm_source=naver&utm_medium=newsearch&utm_campaign=naver_news\n22                                                                                                      http://www.kbsm.net/news/view.php?idx=432238\n23                                                                                         http://www.gjdream.com/news/articleView.html?idxno=643188\n24                                                                                        https://www.khan.co.kr/local/Seoul/article/202405051351001\n25                                                                                        http://www.jejusori.net/news/articleView.html?idxno=426460\n26                                                                                                                  http://www.breaknews.com/1030675\n27                                                                                                                  http://www.breaknews.com/1030678\n28                                                                       https://www.newsis.com/view/?id=NISX20240505_0002724228&cID=10201&pID=10200\n29                                                                                                             https://www.mk.co.kr/article/11007655\n30                                                                 https://www.seoul.co.kr/news/publicnews/2024/05/05/20240505500013?wlog_tag3=naver\n31                                                                                    https://www.daejonilbo.com/news/articleView.html?idxno=2129301\n32                                                                      https://www.kmib.co.kr/article/view.asp?arcid=0020067282&code=61121111&cp=nv\n33                                                                                 https://www.pinpointnews.co.kr/news/articleView.html?idxno=263670\n34                                                                                                     http://www.fnnews.com/news/202405051022317579\n35                                                                                      https://www.kfenews.co.kr/news/articleView.html?idxno=622449\n36                                                                 https://news.sbs.co.kr/news/endPage.do?news_id=N1007634612&plink=ORI&cooper=NAVER\n37                                                                                      https://www.getnews.co.kr/news/articleView.html?idxno=672848\n38                                                                 http://mbn.mk.co.kr/pages/news/newsView.php?category=mbn00003&news_seq_no=5024235\n39                                                                                                           http://kpenews.com/View.aspx?No=3220235\n40                                                                                       https://www.viva100.com/main/view.php?key=20240505010001236\n41                                                                                           http://www.kado.net/news/articleView.html?idxno=1242301\n42                                          https://www.nocutnews.co.kr/news/6140009?utm_source=naver&utm_medium=article&utm_campaign=20240505090021\n43                                                                               https://www.donga.com/news/Economy/article/all/20240503/124781088/1\n44                                                                                                  https://www.newspim.com/news/view/20240503000891\n45                                                                                 https://www.newsfreezone.co.kr/news/articleView.html?idxno=566597\n46                                                                                           http://www.jbsori.com/news/articleView.html?idxno=13653\n47                                                                                                             https://www.news1.kr/articles/5405720\n48                                                                                       https://www.yna.co.kr/view/AKR20240502125500054?input=1195m\n49                                                                                       https://www.yna.co.kr/view/AKR20240503145200530?input=1195m\n50                                                                                     http://www.kyongbuk.co.kr/news/articleView.html?idxno=4008149\n51                                                                                     https://news.kbs.co.kr/news/pc/view/view.do?ncd=7956125&ref=A\n52                                                                                     https://www.gukjenews.com/news/articleView.html?idxno=2986228\n53                                                                                                    http://www.tjb.co.kr/news05/bodo/view/id/68673\n54                                                                                                        http://www.mdilbo.com/detail/GQFJv6/719453\n55                                                                                       http://www.seoulwire.com/news/articleView.html?idxno=608284\n56                                                                            https://tk.newdaily.co.kr/site/data/html/2024/05/04/2024050400025.html\n57                                                                            https://tk.newdaily.co.kr/site/data/html/2024/05/04/2024050400022.html\n58                                                    https://www.pressian.com/pages/articles/2024050415371612178?utm_source=naver&utm_medium=search\n59                                                                                                    https://www.nongmin.com/article/20240503500818\n60                                                                                       https://www.viva100.com/main/view.php?key=20240504010001227\n61                                                                                        https://www.newscj.com/news/articleView.html?idxno=3136319\n62                                                                                 https://www.newsfreezone.co.kr/news/articleView.html?idxno=566538\n63                                          https://www.nocutnews.co.kr/news/6139991?utm_source=naver&utm_medium=article&utm_campaign=20240504013010\n64                                                                                           https://www.sportsseoul.com/news/read/1425760?ref=naver\n65                                                                                                                  http://www.breaknews.com/1030622\n66                                                                                            https://www.smartfn.co.kr/article/view/sfn202405040004\n67                                                                                      https://www.joongdo.co.kr/web/view.php?key=20240504010001069\n68                                                                                   https://www.pointdaily.co.kr/news/articleView.html?idxno=200233\n69                                                                                     http://www.weeklytoday.com/news/articleView.html?idxno=624157\n70                                                                                                 http://www.betanews.net:8080/article/1465815.html\n71                                                                                     http://www.kihoilbo.co.kr/news/articleView.html?idxno=1086658\n72                                                                                      http://www.kwangju.co.kr/article.php?aid=1714784400767780007\n73                                                                                       https://www.nbntv.co.kr/news/articleView.html?idxno=3016437\n74                                                                                       https://www.viva100.com/main/view.php?key=20240504010001210\n75                                                                                              https://www.imaeil.com/page/view/2024050214395197733\n76                                                                                             http://news.heraldcorp.com/view.php?ud=20240504050015\n77                                                                                       https://www.viva100.com/main/view.php?key=20240504010001183\n78                                                                                       https://www.viva100.com/main/view.php?key=20240504010001192\n79                                                                                http://www.edaily.co.kr/news/newspath.asp?newsid=01305446638885640\n80                                                                                               https://www.cnbnews.com/news/article.html?no=657877\n81                                                                                               https://www.cnbnews.com/news/article.html?no=657865\n82                                                                                                    https://www.ajunews.com/view/20240502122350957\n83                                                                                       http://www.bzeronews.com/news/articleView.html?idxno=658762\n84                                                                                       https://www.yna.co.kr/view/AKR20240503055600062?input=1195m\n85                                                                                                             https://www.news1.kr/articles/5404966\n86                                                                                      http://www.economytalk.kr/news/articleView.html?idxno=255139\n87                                                                                         http://www.segye.com/newsView/20240502514555?OutUrl=naver\n88                                                                                             https://www.ekn.kr/web/view.php?key=20240504022570355\n89                                                                                https://www.dnews.co.kr/uhtml/view.jsp?idxno=202405040209432560677\n90                                                                               https://www.donga.com/news/Economy/article/all/20240503/124783492/1\n91                                                                                        https://www.newscj.com/news/articleView.html?idxno=3136270\n92                                                                                    http://www.newsworker.co.kr/news/articleView.html?idxno=330231\n93                                                                                                       https://www.joongang.co.kr/article/25247008\n94                                                                                     https://www.gukjenews.com/news/articleView.html?idxno=2985952\n95                                                                                   http://www.enewstoday.co.kr/news/articleView.html?idxno=2123484\n96                                                                               https://www.tbc.co.kr/news/view?pno=20240503161448AE02264&id=186773\n97                                                                                      https://www.psnews.co.kr/news/articleView.html?idxno=2054256\n98                                                                                              https://view.asiae.co.kr/article/2024050321094252385\n99                                                                                       http://www.bzeronews.com/news/articleView.html?idxno=658740\n100                                                                          http://news.heraldcorp.com/village/view.php?ud=202405032033528048618_10\n                                                                      link\n1         http://news.lghellovision.net/news/articleView.html?idxno=465222\n2                    https://www.ekn.kr/web/view.php?key=20240505022040658\n3                 http://www.ikpnews.net/news/articleView.html?idxno=63718\n4                 http://www.ikpnews.net/news/articleView.html?idxno=63748\n5                       http://www.metroseoul.co.kr/article/20240503500443\n6            https://n.news.naver.com/mnews/article/032/0003294520?sid=102\n7                         https://ysmbc.co.kr/article/xs4IrUpxIvOloOE6-Wap\n8              http://www.bzeronews.com/news/articleView.html?idxno=658800\n9              http://www.jeonmin.co.kr/news/articleView.html?idxno=396957\n10                                 http://kpenews.com/View.aspx?No=3220350\n11                https://www.cooknchefnews.com/news/view/1065594646252469\n12             http://www.jeonmin.co.kr/news/articleView.html?idxno=396923\n13           https://n.news.naver.com/mnews/article/009/0005298594?sid=106\n14           https://n.news.naver.com/mnews/article/005/0001693673?sid=100\n15        http://news.lghellovision.net/news/articleView.html?idxno=465236\n16           https://n.news.naver.com/mnews/article/052/0002031545?sid=102\n17          http://www.newsworker.co.kr/news/articleView.html?idxno=330301\n18            https://kizmom.hankyung.com/news/view.html?aid=202405057572o\n19           https://n.news.naver.com/mnews/article/088/0000876289?sid=102\n20                 http://www.m-economynews.com/news/article.html?no=43234\n21           https://n.news.naver.com/mnews/article/047/0002432606?sid=100\n22                            http://www.kbsm.net/news/view.php?idx=432238\n23               http://www.gjdream.com/news/articleView.html?idxno=643188\n24           https://n.news.naver.com/mnews/article/032/0003294430?sid=102\n25              http://www.jejusori.net/news/articleView.html?idxno=426460\n26                                        http://www.breaknews.com/1030675\n27                                        http://www.breaknews.com/1030678\n28           https://n.news.naver.com/mnews/article/003/0012529251?sid=102\n29           https://n.news.naver.com/mnews/article/009/0005298476?sid=104\n30           https://n.news.naver.com/mnews/article/081/0003448776?sid=100\n31           https://n.news.naver.com/mnews/article/656/0000089059?sid=102\n32           https://n.news.naver.com/mnews/article/005/0001693613?sid=102\n33       https://www.pinpointnews.co.kr/news/articleView.html?idxno=263670\n34           https://n.news.naver.com/mnews/article/014/0005180790?sid=102\n35            https://www.kfenews.co.kr/news/articleView.html?idxno=622449\n36           https://n.news.naver.com/mnews/article/055/0001152566?sid=101\n37            https://www.getnews.co.kr/news/articleView.html?idxno=672848\n38           https://n.news.naver.com/mnews/article/057/0001815967?sid=101\n39                                 http://kpenews.com/View.aspx?No=3220235\n40             https://www.viva100.com/main/view.php?key=20240505010001236\n41           https://n.news.naver.com/mnews/article/654/0000073721?sid=102\n42           https://n.news.naver.com/mnews/article/079/0003892193?sid=102\n43           https://n.news.naver.com/mnews/article/020/0003562912?sid=101\n44                        https://www.newspim.com/news/view/20240503000891\n45       https://www.newsfreezone.co.kr/news/articleView.html?idxno=566597\n46                 http://www.jbsori.com/news/articleView.html?idxno=13653\n47           https://n.news.naver.com/mnews/article/421/0007521564?sid=102\n48           https://n.news.naver.com/mnews/article/001/0014669636?sid=102\n49           https://n.news.naver.com/mnews/article/001/0014669605?sid=102\n50           http://www.kyongbuk.co.kr/news/articleView.html?idxno=4008149\n51           https://n.news.naver.com/mnews/article/056/0011715036?sid=101\n52           https://www.gukjenews.com/news/articleView.html?idxno=2986228\n53                          http://www.tjb.co.kr/news05/bodo/view/id/68673\n54                              http://www.mdilbo.com/detail/GQFJv6/719453\n55             http://www.seoulwire.com/news/articleView.html?idxno=608284\n56  https://tk.newdaily.co.kr/site/data/html/2024/05/04/2024050400025.html\n57  https://tk.newdaily.co.kr/site/data/html/2024/05/04/2024050400022.html\n58           https://n.news.naver.com/mnews/article/002/0002330412?sid=102\n59           https://n.news.naver.com/mnews/article/662/0000042925?sid=102\n60             https://www.viva100.com/main/view.php?key=20240504010001227\n61              https://www.newscj.com/news/articleView.html?idxno=3136319\n62       https://www.newsfreezone.co.kr/news/articleView.html?idxno=566538\n63           https://n.news.naver.com/mnews/article/079/0003892159?sid=101\n64           https://n.news.naver.com/mnews/article/468/0001057111?sid=102\n65                                        http://www.breaknews.com/1030622\n66                  https://www.smartfn.co.kr/article/view/sfn202405040004\n67            https://www.joongdo.co.kr/web/view.php?key=20240504010001069\n68         https://www.pointdaily.co.kr/news/articleView.html?idxno=200233\n69           http://www.weeklytoday.com/news/articleView.html?idxno=624157\n70                       http://www.betanews.net:8080/article/1465815.html\n71           http://www.kihoilbo.co.kr/news/articleView.html?idxno=1086658\n72            http://www.kwangju.co.kr/article.php?aid=1714784400767780007\n73             https://www.nbntv.co.kr/news/articleView.html?idxno=3016437\n74             https://www.viva100.com/main/view.php?key=20240504010001210\n75           https://n.news.naver.com/mnews/article/088/0000876179?sid=102\n76           https://n.news.naver.com/mnews/article/016/0002304431?sid=102\n77             https://www.viva100.com/main/view.php?key=20240504010001183\n78             https://www.viva100.com/main/view.php?key=20240504010001192\n79           https://n.news.naver.com/mnews/article/018/0005731000?sid=101\n80                     https://www.cnbnews.com/news/article.html?no=657877\n81                     https://www.cnbnews.com/news/article.html?no=657865\n82                          https://www.ajunews.com/view/20240502122350957\n83             http://www.bzeronews.com/news/articleView.html?idxno=658762\n84           https://n.news.naver.com/mnews/article/001/0014669131?sid=102\n85           https://n.news.naver.com/mnews/article/421/0007520971?sid=102\n86            http://www.economytalk.kr/news/articleView.html?idxno=255139\n87           https://n.news.naver.com/mnews/article/022/0003930007?sid=103\n88                   https://www.ekn.kr/web/view.php?key=20240504022570355\n89      https://www.dnews.co.kr/uhtml/view.jsp?idxno=202405040209432560677\n90           https://n.news.naver.com/mnews/article/020/0003562849?sid=101\n91              https://www.newscj.com/news/articleView.html?idxno=3136270\n92          http://www.newsworker.co.kr/news/articleView.html?idxno=330231\n93           https://n.news.naver.com/mnews/article/353/0000047913?sid=110\n94           https://www.gukjenews.com/news/articleView.html?idxno=2985952\n95         http://www.enewstoday.co.kr/news/articleView.html?idxno=2123484\n96     https://www.tbc.co.kr/news/view?pno=20240503161448AE02264&id=186773\n97            https://www.psnews.co.kr/news/articleView.html?idxno=2054256\n98           https://n.news.naver.com/mnews/article/277/0005414211?sid=165\n99             http://www.bzeronews.com/news/articleView.html?idxno=658740\n100          https://n.news.naver.com/mnews/article/016/0002304360?sid=102\n                                                                                                                                                                                                                                   description\n1                               결국 수도권 쏠림으로 &lt;b&gt;지방소멸&lt;/b&gt;이 가속화되고, 집값 양극화로 부동산 가치는 더 하락할 것이라는 전망도 나옵니다. 가구가 정점을 찍는 2040년 이후 집값은 장기 하락 국면에 진입할 것이란 분석입니다. 문제는... \n2                  한편 포천시는 2020년 한국고용정보원의 &lt;b&gt;지방소멸&lt;/b&gt; 위험지역으로 분류되고, 2022년 행정안전부의 인구감소 관심지역으로 지정된 바 있다. 인구수는 올해 4월말 기준 14만2545명으로 경기도 31개 시-군 중 25번째다. kkjoo0912... \n3                     &lt;b&gt;지방소멸&lt;/b&gt;이라는 파격적인 표현에 담긴 메시지는 강렬했고, 10년이라는 시간 동안 이 화두는 뜨겁게 타올라 퍼져나갔다. 사람들은 각자 위치에 따라 제각기 다른 의미를 부여하며 이슈를 흡수하기에 바빴고, 무엇보다 이를... \n4                       농식품신유통연구원(이사장 원철희)과 농촌살리기현장네트워크(이사장 이동필)는 지난달 26일 서울 양재동 aT센터에서 '&lt;b&gt;지방소멸&lt;/b&gt;시대 지역농협 역할과 과제' 토론회를 열었다. 지역소멸은 농협에게 특히 중요한 이슈다.... \n5   4개 시군 자치단체장은 &quot;지난 2월 대통령 주재 민생토론회에서 제도 개선안이 발표됐지만, 누적된 피해를 보듬고 &lt;b&gt;지방 소멸&lt;/b&gt;을 방지하기에는 미흡하다는 것이 지역민 의견&quot;이라며 &quot;개발제한구역 전면 해제를 건의한다&quot;고... \n6                      아동·청소년·장애인 등의 건전한 육성 및 지원, 근로자의 고용 촉진 및 생활 향상, 저출생·고령화 및 인구 감소·&lt;b&gt;지방소멸&lt;/b&gt; 대응, 지역사회와 공동체의 활성화, 이외 공익 목적 등이다. 또 매년 12월 두 번째 월요일을... \n7                                                                       광양시는 전통시장의 기능 회복이지역경제활성화와 도시재생은 물론가장 확실한 &lt;b&gt;지방소멸&lt;/b&gt; 대응책이라고 보고행정력을 집중하고 있습니다. MBC뉴스 최우식입니다.◀ END ▶\n8          강성일 회장은 &quot;이번 경남도청과의 친선 산행을 시작으로 앞으로 경북, 부산, 울산까지 확대하는 등 도청 산악회가 영호남 교류의 가교역할을 충실하겠다&quot;며 &quot;지방 최대 현안인 &lt;b&gt;지방소멸&lt;/b&gt; 위기 극복과 농수축산물 홍보... \n9                      이와 함께 정착한 청년들을 위한 복지정책인 '생애주기별 행복한 완주살이'를 지원함으로써 청년 정주율을 높여 &lt;b&gt;지방소멸&lt;/b&gt;에 대응한다는 계획이다. 유희태 완주군수는 이날 오후 전북하이텍고를 방문해 학생들을 대상으로... \n10                            확장 등의 사안에 관심을 가지고 적극 협력하겠다”고 말했다. 하승철 하동군수는 컴팩트 매력도시 조성과 &lt;b&gt;지방소멸&lt;/b&gt; 위기 극복, 정주 여건 개선을 위해 중앙부처의 지원을 받을 수 있도록 적극 노력할 의지를 밝혔다.\n11          지금은 국가적 당면 이슈가 되어 다양한 출산장려정책을 펼치고자 노력하고 있지만 수도권이 아닌 이곳 &lt;b&gt;지방&lt;/b&gt;은 학령인구 감소에 따른 지역&lt;b&gt;소멸&lt;/b&gt;의 위기가 날로 심각해져 가고 있다보니 &lt;b&gt;지방&lt;/b&gt;대학들도 초비상사태입니다.... \n12             출범기념 포럼에서는 정현백 전 여성가족부 장관이 '&lt;b&gt;지방소멸&lt;/b&gt; 위기와 성평등'을 주제로 기조발제에 나서, &lt;b&gt;지방소멸&lt;/b&gt;을 막을 수 있는 것은 지역사회의 성평등이라고 강조했다. 이어 '전라·제주지역 &lt;b&gt;지방소멸&lt;/b&gt; 위기와... \n13                    인구 감소는 &lt;b&gt;지방 소멸&lt;/b&gt;로 이어진다. 한국의 지방은 인구 유출까지 겹쳐 지역 소멸의 위기를 맞고 있다. 지난 15년간 정부에서 약 380조원을 쏟아부었지만 인구 위기는 비수도권을 넘어 경기도 북동부까지 빠르게 확산되고... \n14                       &lt;b&gt;지방소멸&lt;/b&gt;·저출산·고령화 문제의 심각성도 뼛속 깊이 느끼게 됐다. 저는 대구에서 태어났지만 정치적 고향은 순천이다. 호남에 의미 있는 성과로 보답하고 싶은 마음이 크다.” -22대 국회의 최우선 정치개혁 과제는.... \n15           지역 &lt;b&gt;소멸&lt;/b&gt;이나 이런 거로까지 지금 이거는 뭐 규제적인 측면으로 볼 게 아니라 이거는 좀 다른 관점에서 봐야... 그게 사실 제가 부산 &lt;b&gt;지방&lt;/b&gt;해양수산청장 시절에 영도에 들어와서 살까, 라는 생각을 했었어요. 그때 와이프가... \n16                      사실 일반 국민들이 &lt;b&gt;지방소멸&lt;/b&gt;대응기금이라는 걸 잘 모르십니다. 그런데도 이런 얘기가 나왔다는 것은 나와 관련된 다른 예산들이 쓰여지는 것은 한편으로 우려하는 측면들이 뒤에 깔려 있는 거예요. 지금 최근에 저출산... \n17         강성일 회장은 &quot;이번 경남도청과의 친선 산행을 시작으로 앞으로 경북, 부산, 울산까지 확대하는 등 도청 산악회가 영호남 교류의 가교역할을 충실하겠다&quot;며 &quot;지방 최대 현안인 &lt;b&gt;지방소멸&lt;/b&gt; 위기 극복과 농수축산물 홍보... \n18                 아동·청소년·장애인 등의 건전한 육성 및 지원, 근로자의 고용 촉진 및 생활 향상, 저출산·고령화 및 인구감소·&lt;b&gt;지방소멸&lt;/b&gt; 대응, 지역사회 및 공동체의 활성화, 이외 공익 목적 등이다. 행안부 관계자는 7월 안에 시행령이... \n19                     박남서 영주시장은 &quot;어려운 재정 여건 속에서도 가용 재원을 최대한 반영해 국가산단 조성, &lt;b&gt;지방소멸&lt;/b&gt; 대응, 생활 인프라 구축 등에 꼭 필요한 사업을 흔들림없이 추진할 수 있도록 예산을 편성했다&quot;고 말했다.... \n20                 정부는 철거하지 않고 활용이 가능한 빈집에 대해서는 &lt;b&gt;지방소멸&lt;/b&gt;대응기금을 활용해 주거, 관광, 문화자원 등으로 재 조성한다는 방침이다. 정부는 지난해 24곳 지자체에서 &lt;b&gt;지 방소멸&lt;/b&gt;대응기금을 활용해 빈집을 정비하고... \n21  지역&lt;b&gt;소멸&lt;/b&gt; 대응 등에 대한 구체적인 해법을 묻고 들었습니다. &lt;편집자말&gt; ▲  서미화 더불어민주당 비례대표... 그래서 2010년 &lt;b&gt;지방&lt;/b&gt;선거를 앞두고 여러 단체들이 모여서 '차라리 우리가 후보를 내자'고 결정했다. 나도 그 중 한... \n22                      이강덕 협의회장은 “경상북도 인구감소 장기화에 따라 &lt;b&gt;지방소멸&lt;/b&gt; 위기감이 크게 고조되고 있는 상황”이라며 “저출생 문제 해결을 위해 모두 함께 관심을 갖고 총력 대응해 나가자”고 당부했다. 한편 이번 협의회에서... \n23  4개 시군 자치단체장은 &quot;지난 2월 대통령 주재 민생토론회에서 제도 개선안이 발표됐지만, 누적된 피해를 보듬고 &lt;b&gt;지방 소멸&lt;/b&gt;을 방지하기에는 미흡하다는 것이 지역민 의견&quot;이라며 &quot;개발제한구역 전면 해제를 건의한다&quot;고... \n24                      아동·청소년·장애인 등의 건전한 육성 및 지원, 근로자의 고용 촉진 및 생활 향상, 저출생·고령화 및 인구감소·&lt;b&gt;지방소멸&lt;/b&gt; 대응, 지역사회와 공동체의 활성화, 이외 공익 목적 등이다. 또 매년 12월 두 번째 월요일을... \n25                        '지역혁신플랫폼'은 인구감소, 고령화, 핵심산업 쇠락 등 지역&lt;b&gt;소멸&lt;/b&gt; 위기 문제를 해결키 위해 지자체와 대학... &lt;b&gt;지방&lt;/b&gt;자치단체와 대학 협력기반 지역혁신사업(RIS)을 추진하기 위해 설립된 제주지역혁신플랫폼은... \n26                                                                              4개 시군 자치단체장은 “지난 2월 대통령 주재 민생토론회에서 제도 개선안이 발표됐지만, 누적된 피해를 보듬고 &lt;b&gt;지방 소멸&lt;/b&gt;을 방지하기에는 미흡하다는 것이... \n27                                                                         박홍률 목포시장은 “도전과 혁신, 융합과 협업의 적극적인 자세와 정신으로 &lt;b&gt;지방 소멸&lt;/b&gt; 위기 극복과 지역 균형발전을 선도하고, 미래 세대가 풍요로운 삶을 살아갈... \n28                    기부금품 모집 목적은 아동·청소년·장애인 등의 육성과 지원, 근로자의 고용 촉진 및 생활 향상, 저출생·고령화 및 인구감소·&lt;b&gt;지방소멸&lt;/b&gt; 대응, 지역사회 및 공동체의 활성화, 이외의 공익 목적 등으로 구체화했다. 기부... \n29                      &lt;b&gt;지방소멸&lt;/b&gt;현상 대응 위해 2008년 부터 제도 도입 15년새 120배 넘게 급증 답례품 과열 현상도 나타나 일본판 ‘고향사랑 기부제’인 ‘후루사토(古里) 납세’ 기부액이 지난해 전국적으로 1조엔(약 9조원)을 넘을 것으로... \n30                           4개 시군 자치단체장은 “지난 2월 대통령 주재 민생토론회에서 제도 개선안이 발표됐지만, 누적된 피해를 보듬고 &lt;b&gt;지방 소멸&lt;/b&gt;을 방지하기에는 미흡하다는 것이 지역민들의 의견이다”며 “개발제한구역 전면 해제를... \n31                      개정령안은 아동·청소년·장애인 등의 건전한 육성 및 지원, 근로자의 고용 촉진 및 생활 향상, 저출생·고령화 및 인구감소·&lt;b&gt;지방소멸&lt;/b&gt; 대응, 지역사회 및 공동체의 활성화, 이외 공익 목적 등 '기부금품 모집 목적'도... \n32                            강성일 전남도청 산악회 회장은 “이번 경남도청과의 친선 산행을 시작으로 앞으로 경북, 부산, 울산까지 확대하는 등 도청 산악회가 영호남 교류의 가교역할을 충실하겠다”며 “지방 최대 현안인 &lt;b&gt;지방소멸&lt;/b&gt; 위기... \n33                  아동·청소년·장애인 등의 건전한 육성 및 지원, 근로자의 고용 촉진 및 생활 향상, 저출생·고령화 및 인구감소·&lt;b&gt;지방소멸&lt;/b&gt; 대응, 지역사회 및 공동체의 활성화, 이외 공익 목적 등이다. 행안부 관계자는 &quot;7월말 전에... \n34        강성일 전남도청 산악회장은 &quot;이번 경남도청과의 친선 산행을 시작으로 앞으로 경북, 부산, 울산까지 확대하는 등 도청 산악회가 영호남 교류의 가교 역할을 충실하겠다&quot;면서 &quot;지방 최대 현안인 &lt;b&gt;지방 소멸&lt;/b&gt; 위기 극복과... \n35                        김헌영 총장은 &quot;학령인구 감소와 &lt;b&gt;지방소멸&lt;/b&gt; 위기, 그리고 최근 AI혁명에 이르기까지 매 순간 급변하는 시대에 발맞춰 대학은 스스로 끊임없이 혁신하고 사회는 대학의 혁신노력이 성공으로 이어질 수 있도록 적극... \n36           그러면 그 &lt;b&gt;지방&lt;/b&gt;이 매력적인 도시가 되지는 않거든요. 그 세대가 끝나면 다시 또 &lt;b&gt;소멸&lt;/b&gt;의 위기가 오게 되고요. 조금 장기적인 호흡으로 다양한 기회들을 줄 수 있는 &lt;b&gt;지방&lt;/b&gt; 도시를 만드는 게 중요하지 않을까 생각하는데... \n37         전남도청 산악회 강성일 회장은 &quot;이번 경남도청과의 친선 산행을 시작으로 앞으로 경북, 부산, 울산까지 확대하는 등 도청 산악회가 영호남 교류의 가교역할을 충실하겠다&quot;며 &quot;지방 최대 현안인 &lt;b&gt;지방소멸&lt;/b&gt; 위기 극복과... \n38              아동·청소년·장애인 등의 건전한 육성 및 지원, 근로자의 고용 촉진 및 생활 향상, 저출생·고령화 및 인구감소·&lt;b&gt;지방소멸&lt;/b&gt; 대응, 지역사회 및 공동체의 활성화, 이외 공익 목적 등입니다. 매년 12월 두 번째 월요일인 '기부의... \n39                        강성일 전남도청 산악회장은 “이번 경남도청과의 친선 산행을 시작으로 앞으로 경북, 부산, 울산까지 확대하는 등 도청 산악회가 영호남 교류의 가교역할을 충실하겠다”며 “지방 최대 현안인 &lt;b&gt;지방소멸&lt;/b&gt; 위기 극복과... \n40       또한 관내 학교 문제가 정리돼야 &lt;b&gt;지방&lt;/b&gt;의 &lt;b&gt;소멸&lt;/b&gt;을 막고 아이들이 꿈과 희망을 가지고 자라날 수 있다며 도교육청에서 의지를 가지고 적극적으로 문제해결에 임해줄 것을 당부했다. 안동=김종현 기자 gim1390@viva100.com 2024년도... \n41               방영을 앞두고 김헌영 총장은 &quot;학령인구 감소와 &lt;b&gt;지방소멸&lt;/b&gt; 위기, 그리고 최근 AI혁명에 이르기까지 매 순간 급변하는 시대에 발맞춰 대학은 스스로 끊임없이 혁신하고 사회는 대학의 혁신노력이 성공으로 이어질 수 있도록... \n42         강성일 회장은 &quot;이번 경남도청과의 친선 산행을 시작으로 앞으로 경북, 부산, 울산까지 확대하는 등 도청 산악회가 영호남 교류의 가교역할을 충실하겠다&quot;며 &quot;지방 최대 현안인 &lt;b&gt;지방소멸&lt;/b&gt; 위기 극복과 농수축산물 홍보... \n43                정부와 &lt;b&gt;소멸&lt;/b&gt; 위기에 직면한 &lt;b&gt;지방&lt;/b&gt;자치단체 등도 마중물 확보 차원에서 관련 규제 완화나 시범사업 추진 등에 나서고 있습니다. 다만 여전히 보완할 과제가 적잖다는 지적도 끊이질 않습니다. 과연 우리는 목전에 다가선... \n44                 또 &lt;b&gt;지방소멸&lt;/b&gt;, 정치개혁 키워드에 관심을 갖고 있다.&quot; 개혁신당은 4·10 총선에서 3석을 확보하는 데 성공했다. 제3지대로서 원내 의원 숫자는 적지만 '미래세대'라는 키워드를 정면으로 내세우며 22대 국회 개원 전부터... \n45                          인구 유출과 &lt;b&gt;지방 소멸&lt;/b&gt;의 위기를 절감하는 경남 군단위 지역이 급증함에 따라 '2024년 경남 작은 학교 살리기 공모 사업' 신청에 7개 시군에서 8개교가 신청을 하는 등 역대 가장 치열한 경쟁률을 보여주기도 했다.... \n46                             지역 변호사 업계도 &lt;b&gt;지방소멸&lt;/b&gt;시대에 접어들고 있어 법률 서비스 질적 하락이 우려된다는 지적이 나왔다. 특히 지역 로스쿨을 졸업하고 변호사 자격증을 취득한 젊은 변호사들이 지방변호사회에 등록을 하지 않기... \n47                                        도내 주요 시‧군의 인구정책 관계자들은 “&lt;b&gt;지방소멸&lt;/b&gt;을 막기 위해 당장 주민등록인구를 높일 수 있는 인구 유입 지원 대책도 중요하지만, 장기적인 관점에서 출생아 수와 어린이 수가 늘어야 한다”며... \n48              이들 청년의 존재는 인구절벽으로 &lt;b&gt;소멸&lt;/b&gt; 위기에 처한 지역사회에도 큰 힘이 됩니다. 연합뉴스는 &lt;b&gt;지방&lt;/b&gt;에 살면서 자신의 삶을 개척해 나가는 청년들의 도전과 꿈을 매주 한 차례씩 소개합니다. (완도=연합뉴스) 형민우 기자... \n49                아동·청소년·장애인 등의 건전한 육성 및 지원, 근로자의 고용 촉진 및 생활 향상, 저출생·고령화 및 인구감소·&lt;b&gt;지방소멸&lt;/b&gt; 대응, 지역사회 및 공동체의 활성화, 이외 공익 목적 등이다. 매년 12월 두 번째 월요일인 '기부의... \n50      이강덕 협의회장은 &quot;경상북도 인구감소 장기화에 따라 &lt;b&gt;지방소멸&lt;/b&gt; 위기감이 크게 고조되고 있는 상황&quot;이라며 &quot;저출생 문제 해결을 위해 모두 함께 관심을 갖고 총력 대응해 나가자&quot;고 당부했다. 한편 이번 협의회에서... \n51                 [앵커] 접경지역의 &lt;b&gt;지방소멸&lt;/b&gt; 위기가 해가 갈수록 심각해지고 있습니다. 특히, 청년층 인구 감소가 문제인데요. 그 해법으로 청년 창업 지원 사업이 추진되고 있습니다. 김영준 기자입니다. [리포트] 양구 중앙시장 초입에 새... \n52              지역&lt;b&gt;소멸&lt;/b&gt; 위기 극복과 컴팩트 매력도시 하동 조성을 위한 주요 현안사업의 정부 지원을 요청했다. 하승철... 하동군이 &lt;b&gt;지방&lt;/b&gt;자치단체 최초로 농촌형 자율버스를 운행함에 따라 대중교통 통합환승 체계 구축을 위한 하동역... \n53                             공무원 등 60명이 역시 세종시에 600만 원을 내놓았습니다. 세종시는 &lt;b&gt;지방소멸&lt;/b&gt; 위기에 처해 있는 청양군을 위해 힘을 보태는 차원에서 교차기부를 구상했다며 앞으로 더욱 교차기부를 더욱 확대하겠다고 밝혔습니다.\n54                      전남도와 전남도새마을회(회장 양재원)가 &lt;b&gt;지방소멸&lt;/b&gt; 위기 극복 등 지역 현안 해결에 공동 대응하기로 했다. 전남도는 3일 도청 김대중강당에서 개최된 제14회 새마을의 날 기념식에서 전남도새마을회와 지역 발전을 위한... \n55      이강덕 협의회장은 &quot;경상북도 인구감소 장기화에 따라 &lt;b&gt;지방소멸&lt;/b&gt; 위기감이 크게 고조되고 있는 상황&quot;이라며 &quot;저출생 문제 해결을 위해 모두 함께 관심을 갖고 총력 대응해 나가자&quot;고 당부했다. 한편 이번 협의회에서... \n56                     본 설명회는 2023년 착수하여 추진 중인 ‘고령군 2040 중장기 종합발전계획 수립’ 용역의 추진상황을 주민들과 공유하고, &lt;b&gt;지방소멸&lt;/b&gt;의 위기 속에서도 더욱 경쟁력 있는 지역으로 나아가기 위한 고령의 미래비전, 권역별... \n57                              박남서 영주시장은 “어려운 재정 여건 속에서도 가용재원을 최대한 반영해 국가산단 조성, &lt;b&gt;지방소멸&lt;/b&gt; 대응, 생활 인프라 구축 등 꼭 필요한 사업들이 흔들림없이 추진될 수 있도록 예산을 편성했다”고 밝혔다.... \n58                            12대 들어서는 제1기 예산결산특별위원회과 전반기 보건복지환경위원회 위원으로 지역 의료 공공성 강화와 저소득층 복지증진, 전남권 의대 설립, &lt;b&gt;지방소멸&lt;/b&gt; 대응, 영산강 수질개선 등 도민의 삶의 질 향상을 위한... \n59                 &lt;b&gt;지방소멸&lt;/b&gt;을 극복하기 위해 투입하는 &lt;b&gt;지방소멸&lt;/b&gt;대응기금 배분체계가 종전 4단계에서 2단계로 개편된다. 지방자치단체 한곳에 지급하는 최대 금액은 144억에서 160억원으로 늘리고 사용처도 확대된다. 행정안전부는 최근... \n60                                 또한 &lt;b&gt;지방소멸&lt;/b&gt;과 저출생 극복을 위해 △공공산후조리원 증축 4억 원 △체류형 귀농귀촌학교 조성 3억 원 △청년 신혼부부 월세 지원 3억 원 등을 편성했다. 이번 추경예산안은 오는 9일부터 21일까지 열리는... \n61    호서대 박설호 국제협력처장 겸 부총장은 &quot;&lt;b&gt;지방 소멸&lt;/b&gt;과 지방 노동력 문제 극복을 위해 외국인 유학생의 국내 취업 및 정주가 중요한 시점에서 이번 협약이 가지는 의미는 크다&quot;며 &quot;앞으로도 호서대는 우수한 외국인 인재의... \n62                      설명회는 이장 및 주민대표 100여 명이 참석한 가운데 중장기 종합발전계획 수립 용역 추진상황 설명과 &lt;b&gt;지방소멸&lt;/b&gt;의 위기 속에서도 경쟁력 갖추는 고령 미래비전, 권역별 발전 구상 및 핵심과제 제시 등을 통해 각계각층... \n63                 그걸 짓기 위해서 분양가는 계속 올라가서 청년들은 집을 갖기가 어렵고 &lt;b&gt;지방&lt;/b&gt;은 점점 텅텅 비는거죠. 1기... 주택정책 이전에 &lt;b&gt;지방&lt;/b&gt;분권에 대한 정책이 정치권에서 먼저 논의가 돼야 해요. 국민들이 원하잖아요. '빨리... \n64                               4개 시군 자치단체장은 “지난 2월 대통령 주재 민생토론회에서 제도 개선안이 발표됐지만, 누적된 피해를 보듬고 &lt;b&gt;지방 소멸&lt;/b&gt;을 방지하기에는 미흡하다는 것이 지역민 의견”이라며 “개발제한구역 전면 해제를... \n65                                                                                전남도와 전남도새마을회가 &lt;b&gt;지방소멸&lt;/b&gt; 위기 극복 등 지역 현안 해결에 공동 대응하기로 했다. 전남도는 3일 도청 김대중강당에서 개최된 제14회 새마을의 날... \n66         국가&lt;b&gt;소멸&lt;/b&gt;의 위기를 초래할 수 있다&quot;는 위기의식을 설명했다. 출산장려금 지원 과정에서 세제와 관련해... 이어 민 박사는 지역 인재 양성을 통한 &lt;b&gt;지방&lt;/b&gt; 저출산 문제 해결에 대한 정부와 기업의 적극적인 역할을 주문했다.... \n67            세종시 농업정책과 최병인 팀장은 &quot;세종시의 재정 확충은 물론 &lt;b&gt;지방소멸&lt;/b&gt; 위기에 처해 있는 고향 청양군을 위해 힘을 보태려는 마음에서 교차 기부를 구상했다&quot;며 &quot;앞으로도 세종시와 청양군 고향사랑기부제 기부자... \n68  국가&lt;b&gt;소멸&lt;/b&gt;의 위기를 초래할 수 있다&quot;는 위기의식을 설명했다. 이어 출산장려금 지원 과정에서 세제와 관련해... &quot;고 말하며, 이 외에도 지역 인재 양성을 통한 &lt;b&gt;지방&lt;/b&gt; 저출산 문제 해결에 대한 정부와 기업의 역할에 대해서도... \n69      이강덕 협의회장은 &quot;경상북도 인구감소 장기화에 따라 &lt;b&gt;지방소멸&lt;/b&gt; 위기감이 크게 고조되고 있는 상황&quot;이라며 &quot;저출생 문제 해결을 위해 모두 함께 관심을 갖고 총력 대응해 나가자&quot;고 당부했다. 한편 이번 협의회에서... \n70                         4일 군에 따르면 올해 1월부터 4월 사이에만 행정안전부를 비롯한 중앙정부와 강원도 태백시, 전남 해남군, 전북 순창군 등 13개 지자체가 강진군을 방문해, &lt;b&gt;지방소멸&lt;/b&gt;위기 극복을 위해 군이 추진 중인 다양한 정책을... \n71                포천시는 지난 2020년 한국고용정보원의 &lt;b&gt;지방소멸&lt;/b&gt; 위험지역으로 분류되고, 2022년 행정안전부의 인구감소 관심 지역으로 지정된 바 있으며, 인구수는 경기도 내 31개 시군 중 25번째로, 2024년 4월 말 기준 14만 2천545명으로... \n72                     네트워크는 출범기념 포럼을 열고 정현백(전 여성가족부 장관)을 초청해 ‘&lt;b&gt;지방소멸&lt;/b&gt; 위기와 성평등’이라는 주제로 강연을 진행했다. 이어 ‘전라·제주지역의 &lt;b&gt;지방소멸&lt;/b&gt; 위기와 여성가족정책 진단’이라는 주제로... \n73                        ◇포천시의 미래를 위한 도전 2020년 한국고용정보원에 의해 &lt;b&gt;지방소멸&lt;/b&gt; 위험지역으로 분류되었고, 2022년에는 행정안전부에 의해 인구감소 관심 지역으로 지정되었다. 최근 통계에 따르면, 포천시의 인구는 지속적으로... \n74                       남해대학은 학령인구 감소와 &lt;b&gt;지방소멸&lt;/b&gt; 위기 극복을 위해 올해 첫 외국인 유학생을 신입생으로 유치했다. 현재 총 23명(인도네시아 교환학생 8명·베트남 유학생 15명)의 유학생이 전기·전자, 용접 전공 과정에 입학해... \n75                             이 사업은 군비 200억원과 &lt;b&gt;지방소멸&lt;/b&gt;대응기금 50억원을 포함한 총 250억원을 투자해 6만1천994㎡를 개발할 계획이다. 이번에 착공한 기반시설 조성공사는 오는 2026년 4월 준공 예정이다. 이 곳에는 400여 가구의... \n76                               4개 시군 자치단체장은 “지난 2월 대통령 주재 민생토론회에서 제도 개선안이 발표됐지만, 누적된 피해를 보듬고 &lt;b&gt;지방 소멸&lt;/b&gt;을 방지하기에는 미흡하다는 것이 지역민 의견”이라며 “개발제한구역 전면 해제를... \n77                       하승철 군수는 “컴팩트 매력도시 조성과 &lt;b&gt;지방소멸&lt;/b&gt; 위기 극복, 정주 여건 개선을 위해 중앙부처의 지원을 받을 수 있도록 적극 노력하겠다”고 전했다. 경남=정도정 기자 sos6831@viva100.com 국토교통부 제2차관 만나... \n78                     인구 유출 및 &lt;b&gt;지방 소멸&lt;/b&gt;의 위기를 절감하는 경남 군단위 지역이 급증함에 따라 ‘2024년 경남 작은 학교 살리기 공모 사업’ 신청에 7개 시·군에서 8개교가 신청을 하는 등 역대 가장 치열한 경쟁률을 보여주기도 했다.... \n79                        납부시 &lt;b&gt;소멸&lt;/b&gt;된다. 소유자가 거주하고 있어 매각 시 인도부담이 적다. 시세는 10억원에서 11억원에 거래되고 있으며 전세가는 5억5000만원에서 6억5000만원 선이다. 매각일자는 5월 14일 서울북부&lt;b&gt;지방&lt;/b&gt;법원 경매... \n80                   한국&lt;b&gt;지방&lt;/b&gt;행정연구 자치제도 연구실장과 함께 경기연구원이 참여해 정책 세미나와 정책 탐방을 진행했다. 정책 세미나는 ‘지역&lt;b&gt;소멸&lt;/b&gt;에 대응하는 문화도시 영월’을 주제로 영월문화관광재단 김경희 문화도시센터장이... \n81                     (사진=태백시 제공) 태백시(시장 이상호)는 5월 3일부터 10일까지 8일간 &lt;b&gt;지방소멸&lt;/b&gt;에 대응하고 청년 및 신혼부부의 주거비 부담을 완화하기 위해 ‘2024 만 원 임대주택’ 입주자 모집 공고 및 접수를 실시한다고 밝혔다.... \n82                 지역사회 역시 &lt;b&gt;지방소멸&lt;/b&gt;, 학령인구 감소의 위기를 극복하면서 미래를 설계하는 김천고의 유학생 유치가 단순한 학생수 늘리기를 넘어 한국의 ‘이튼스쿨’로 거듭나 &lt;b&gt;지방소멸&lt;/b&gt;을 막고 지역발전의 견인차 역할을 해주길... \n83               특히 과거 세대에게는 당연하게 여겨졌던 '평생직장'이 &lt;b&gt;소멸&lt;/b&gt;하면서 길어진 인생은 기대보다는 살아남아야... 명실상부한 대한민국 최고의 자기계발 전문가로 삼성전자, 현대자동차, 서울대학병원, 대검찰청, &lt;b&gt;지방&lt;/b&gt;자치단... \n84                   연합뉴스는 '&lt;b&gt;지방소멸&lt;/b&gt;' 위기 징후 현장과 이를 극복하기 위한 지자체 등의 고육책, 일부 부분적인 성과 등을 매주 한 차례씩 소개합니다. (영월·삼척=연합뉴스) 양지웅 기자 = 교육이, 학교가 지역사회를 살릴 수 있을까?... \n85                 '실천하는 여권 재선 의원'을 앞세운 엄 당선인이 22대 국회에서 인구 &lt;b&gt;지방 소멸&lt;/b&gt; 위기에 처한 제천과 단양 발전을 위해 어떤 정치적 역량을 발휘할지 지역민의 관심이 쏠린다. 다음은 엄 의원과 일문일답. -여권 재선 의원에... \n86                 닥터바리스타 방탄커피는 OOOO은 줄이고 건강한 &lt;b&gt;지방&lt;/b&gt;으로 채워 포만감을 가득 주면서도 건강한 식습관을... 캐시 &lt;b&gt;소멸&lt;/b&gt;이 임박했다면 저렴한 기프티콘이라도 사두는 것이 이득이다. 돈버는 퀴즈를 맞춰 캐시를 얻을 수... \n87            사람들은 결혼하지 않고, 출산하지 않으며, &lt;b&gt;지방&lt;/b&gt;은 &lt;b&gt;소멸&lt;/b&gt;하고, 우리 모두 기형적인 고물가와 양극화된 사회체제 속에서 엄청난 경쟁 압력에 시달리고 있다. 일각에서는 이러한 이유로 한국인의 이기적인 품성을 꺼내 들거나... \n88                       워크숍은 산업·관광·귀농귀촌 등 다양한 분야의 우수 정책들을 살펴보며 집행부와 의회가 긴밀하게 소통하고 &lt;b&gt;지방소멸&lt;/b&gt; 위기에 적극 대응할 수 있도록 정책역량을 강화하자는 취지로 마련됐다. 첫날인 2일에는 태안군... \n89                       인구 유출 및 &lt;b&gt;지방 소멸&lt;/b&gt;의 위기를 절감하는 경남 군단위 지역이 급증함에 따라 ‘2024년 경남 작은 학교 살리기 공모 사업’ 신청에 7개 시군에서 8개교가 신청을 하는 등 역대 가장 치열한 경쟁률을 보여주기도 했다.... \n90                    정부와 &lt;b&gt;소멸&lt;/b&gt; 위기에 직면한 &lt;b&gt;지방&lt;/b&gt;자치단체도 마중물 확보 차원에서 관련 규제 완화나 시범사업 추진에 나서고 있다. ● 건설업계, 실버타운에 주목 가장 적극적인 곳은 건설업계다. 주택 경기 침체로 새로운 수익원... \n91  4개 시군 자치단체장은 &quot;지난 2월 대통령 주재 민생토론회에서 제도 개선안이 발표됐지만, 누적된 피해를 보듬고 &lt;b&gt;지방 소멸&lt;/b&gt;을 방지하기에는 미흡하다는 것이 지역민 의견&quot;이라며 &quot;개발제한구역 전면 해제를 건의한다&quot;고... \n92                    전라남도와 전남도새마을회(회장 양재원)가 &lt;b&gt;지방소멸&lt;/b&gt; 위기 극복 등 지역 현안 해결에 공동 대응하기로 했다. 전남도는 3일 도청 김대중강당에서 개최된 제14회 새마을의 날 기념식에서 전남도새마을회와 지역 발전을 위한... \n93                        전남 지역 자치단체들은 &lt;b&gt;지방소멸&lt;/b&gt;대응기금 등 2843억원을 투입해 2035년까지 인구감소지역 16개 군에 1000가구 공급을 목표하겠다는 계획이다. 그런데 서울 동작구 1만원 주택은 이러한 인구소멸지역의 사례와는 결이... \n94                      박남서 영주시장은 &quot;어려운 재정 여건 속에서도 가용재원을 최대한 반영해 국가산단 조성, &lt;b&gt;지방소멸&lt;/b&gt; 대응, 생활 인프라 구축 등 꼭 필요한 사업들이 흔들림없이 추진될 수 있도록 예산을 편성했다&quot;고 말했다.... \n95                   참고로 포천시는 2020년 한국고용정보원의 &lt;b&gt;지방소멸&lt;/b&gt; 위험지역으로 분류되고, 2022년 행정안전부의 인구감소 관심 지역으로 지정된 바 있다. 인구수는 경기도 내 31개 시군 중 25번째로, 2024년 4월말 기준 14만 2545명으로... \n96                       대구.경북 지역의 유권자분들에게 제가 도움이 되고 보탬이 되는 의정 활동을 할 계획입니다.” 제3지대 지역 출신 당선인들은 &lt;b&gt;지방소멸&lt;/b&gt; 문제가 시급한 현안이라는 데 인식을 같이 하면서 22대 국회에서 거대 양당과는... \n97        최병인 농업정책과 팀장은 &quot;세종시의 재정 확충은 물론 &lt;b&gt;지방소멸&lt;/b&gt; 위기에 처해 있는 고향 청양군을 위해 힘을 보태고자 하는 마음에서 교차 기부를 구상했다&quot;며 &quot;앞으로도 세종시와 충남 청양 간 고향사랑기부제 기부자... \n98                       한편, 곡성군은 지난해에 1조 4천억 원 규모의 양수발전소를 유치하여 안정적인 일자리를 창출하고, 겸면 제2농공단지 조성사업을 통해 지속 가능한 성장 기반을 마련했으며 &lt;b&gt;지방 소멸&lt;/b&gt; 위기에 적극 대응하기 위해 생활... \n99        최병인 농업정책과 팀장은 &quot;세종시의 재정 확충은 물론 &lt;b&gt;지방소멸&lt;/b&gt; 위기에 처해 있는 고향 청양군을 위해 힘을 보태고자 하는 마음에서 교차 기부를 구상했다&quot;며 &quot;앞으로도 세종시와 충남 청양 간 고향사랑기부제 기부자... \n100                       이강덕 협의회장은 “경상북도 인구감소 장기화에 따라 &lt;b&gt;지방소멸&lt;/b&gt; 위기감이 크게 고조되고 있는 상황”이라며 “저출생 문제 해결을 위해 모두 함께 관심을 갖고 총력 대응해 나가자”고 강조했다. 한편 경상북도 시장... \n                            pubDate\n1   Mon, 06 May 2024 00:06:00 +0900\n2   Sun, 05 May 2024 22:38:00 +0900\n3   Sun, 05 May 2024 21:32:00 +0900\n4   Sun, 05 May 2024 21:30:00 +0900\n5   Sun, 05 May 2024 21:24:00 +0900\n6   Sun, 05 May 2024 21:06:00 +0900\n7   Sun, 05 May 2024 20:42:00 +0900\n8   Sun, 05 May 2024 19:16:00 +0900\n9   Sun, 05 May 2024 18:30:00 +0900\n10  Sun, 05 May 2024 18:16:00 +0900\n11  Sun, 05 May 2024 17:48:00 +0900\n12  Sun, 05 May 2024 17:18:00 +0900\n13  Sun, 05 May 2024 17:16:00 +0900\n14  Sun, 05 May 2024 17:04:00 +0900\n15  Sun, 05 May 2024 17:02:00 +0900\n16  Sun, 05 May 2024 16:38:00 +0900\n17  Sun, 05 May 2024 16:22:00 +0900\n18  Sun, 05 May 2024 15:32:00 +0900\n19  Sun, 05 May 2024 15:20:00 +0900\n20  Sun, 05 May 2024 15:20:00 +0900\n21  Sun, 05 May 2024 14:46:00 +0900\n22  Sun, 05 May 2024 14:38:00 +0900\n23  Sun, 05 May 2024 14:22:00 +0900\n24  Sun, 05 May 2024 13:52:00 +0900\n25  Sun, 05 May 2024 13:44:00 +0900\n26  Sun, 05 May 2024 13:18:00 +0900\n27  Sun, 05 May 2024 13:18:00 +0900\n28  Sun, 05 May 2024 11:58:00 +0900\n29  Sun, 05 May 2024 11:52:00 +0900\n30  Sun, 05 May 2024 10:44:00 +0900\n31  Sun, 05 May 2024 10:40:00 +0900\n32  Sun, 05 May 2024 10:38:00 +0900\n33  Sun, 05 May 2024 10:36:00 +0900\n34  Sun, 05 May 2024 10:29:00 +0900\n35  Sun, 05 May 2024 10:10:00 +0900\n36  Sun, 05 May 2024 10:00:00 +0900\n37  Sun, 05 May 2024 09:56:00 +0900\n38  Sun, 05 May 2024 09:51:00 +0900\n39  Sun, 05 May 2024 09:38:00 +0900\n40  Sun, 05 May 2024 09:18:00 +0900\n41  Sun, 05 May 2024 09:10:00 +0900\n42  Sun, 05 May 2024 09:02:00 +0900\n43  Sun, 05 May 2024 09:01:00 +0900\n44  Sun, 05 May 2024 08:00:00 +0900\n45  Sun, 05 May 2024 07:50:00 +0900\n46  Sun, 05 May 2024 07:10:00 +0900\n47  Sun, 05 May 2024 07:10:00 +0900\n48  Sun, 05 May 2024 07:01:00 +0900\n49  Sun, 05 May 2024 06:15:00 +0900\n50  Sat, 04 May 2024 23:30:00 +0900\n51  Sat, 04 May 2024 21:26:00 +0900\n52  Sat, 04 May 2024 20:54:00 +0900\n53  Sat, 04 May 2024 20:36:00 +0900\n54  Sat, 04 May 2024 19:58:00 +0900\n55  Sat, 04 May 2024 18:42:00 +0900\n56  Sat, 04 May 2024 16:28:00 +0900\n57  Sat, 04 May 2024 16:04:00 +0900\n58  Sat, 04 May 2024 15:55:00 +0900\n59  Sat, 04 May 2024 15:31:00 +0900\n60  Sat, 04 May 2024 15:18:00 +0900\n61  Sat, 04 May 2024 14:52:00 +0900\n62  Sat, 04 May 2024 13:36:00 +0900\n63  Sat, 04 May 2024 13:32:00 +0900\n64  Sat, 04 May 2024 12:36:00 +0900\n65  Sat, 04 May 2024 12:18:00 +0900\n66  Sat, 04 May 2024 10:52:00 +0900\n67  Sat, 04 May 2024 10:44:00 +0900\n68  Sat, 04 May 2024 10:42:00 +0900\n69  Sat, 04 May 2024 10:36:00 +0900\n70  Sat, 04 May 2024 10:22:00 +0900\n71  Sat, 04 May 2024 10:14:00 +0900\n72  Sat, 04 May 2024 10:02:00 +0900\n73  Sat, 04 May 2024 09:58:00 +0900\n74  Sat, 04 May 2024 09:48:00 +0900\n75  Sat, 04 May 2024 09:46:00 +0900\n76  Sat, 04 May 2024 09:24:00 +0900\n77  Sat, 04 May 2024 09:06:00 +0900\n78  Sat, 04 May 2024 09:06:00 +0900\n79  Sat, 04 May 2024 09:01:00 +0900\n80  Sat, 04 May 2024 08:24:00 +0900\n81  Sat, 04 May 2024 08:24:00 +0900\n82  Sat, 04 May 2024 08:02:00 +0900\n83  Sat, 04 May 2024 07:50:00 +0900\n84  Sat, 04 May 2024 07:01:00 +0900\n85  Sat, 04 May 2024 07:00:00 +0900\n86  Sat, 04 May 2024 06:18:00 +0900\n87  Sat, 04 May 2024 06:02:00 +0900\n88  Sat, 04 May 2024 04:24:00 +0900\n89  Sat, 04 May 2024 02:22:00 +0900\n90  Sat, 04 May 2024 01:41:00 +0900\n91  Sat, 04 May 2024 01:08:00 +0900\n92  Sat, 04 May 2024 00:56:00 +0900\n93  Sat, 04 May 2024 00:11:00 +0900\n94  Fri, 03 May 2024 23:38:00 +0900\n95  Fri, 03 May 2024 21:49:00 +0900\n96  Fri, 03 May 2024 21:30:00 +0900\n97  Fri, 03 May 2024 21:20:00 +0900\n98  Fri, 03 May 2024 21:09:00 +0900\n99  Fri, 03 May 2024 20:46:00 +0900\n100 Fri, 03 May 2024 20:42:00 +0900\n\n\n\n\n\nall_news &lt;- data.frame()\nsearch &lt;- \"지방소멸\"\nfor(i in 1:10){\n  news &lt;- request(your_url) |&gt; \n    req_headers(\n      \"X-Naver-Client-ID\" = your_ClientID,\n      \"X-Naver-Client-Secret\" = your_Client_Secret\n    ) |&gt; \n    req_url_query(\n      query = search,\n      display = 100,\n      start = i,\n      sort = \"date\"\n    ) |&gt; \n    req_perform() |&gt; \n    resp_body_json()\n  body &lt;- data.frame(t(sapply(news$item, data.frame)))\n  all_news &lt;- bind_rows(all_news, body)\n}",
    "crumbs": [
      "R 프레젠테이션",
      "Data Collection"
    ]
  },
  {
    "objectID": "R_lec_05.html",
    "href": "R_lec_05.html",
    "title": "Data Visualization",
    "section": "",
    "text": "https://initiation.doana-r.com/06-ggplot2#1",
    "crumbs": [
      "R 프레젠테이션",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R_lec_05.html#eight-components-of-ggplot2",
    "href": "R_lec_05.html#eight-components-of-ggplot2",
    "title": "Data Visualization",
    "section": "",
    "text": "https://initiation.doana-r.com/06-ggplot2#1",
    "crumbs": [
      "R 프레젠테이션",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R_lec_05.html#aesthetics-geometries",
    "href": "R_lec_05.html#aesthetics-geometries",
    "title": "Data Visualization",
    "section": "Aesthetics & Geometries",
    "text": "Aesthetics & Geometries\n\n\n심미성(aesthetics) 혹은 심미성 매핑(aesthetic mapping)\n\n그래프의 외견을 규정\n시각 변수 혹은 속성: color, size, shape 등\n\n\n\n기하(geometries) 혹은 기하 객체(geometric objects)\n\n그래프의 전체 구조 혹은 형식을 규정\n그래프의 유형: bar chart, line chart 등",
    "crumbs": [
      "R 프레젠테이션",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R_lec_05.html#aesthetics-geometries-1",
    "href": "R_lec_05.html#aesthetics-geometries-1",
    "title": "Data Visualization",
    "section": "Aesthetics & Geometries",
    "text": "Aesthetics & Geometries\n\n\nCode\nResult\n\n\n\n\ngapminder |&gt; \n  filter(year == 2007) |&gt; \n  ggplot(aes(x = gdpPercap, y = lifeExp)) +\n  geom_point(aes(color = continent)) +\n  geom_smooth(color = \"black\")",
    "crumbs": [
      "R 프레젠테이션",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R_lec_05.html#aesthetics",
    "href": "R_lec_05.html#aesthetics",
    "title": "Data Visualization",
    "section": "Aesthetics",
    "text": "Aesthetics\n\nx-axis, y-axis\ncolor, fill\nshape\nsize\nalpha\nposition",
    "crumbs": [
      "R 프레젠테이션",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R_lec_05.html#geometries",
    "href": "R_lec_05.html#geometries",
    "title": "Data Visualization",
    "section": "Geometries",
    "text": "Geometries\n\ngeom_point()\ngeom_line()\ngeom_bar(), geom_col()\ngeom_histogram(), geom_density()\ngeom_smooth()\ngeom_boxplot(), geom_violin()\ngeom_text(), geom_label()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R_lec_05.html#scale",
    "href": "R_lec_05.html#scale",
    "title": "Data Visualization",
    "section": "Scale",
    "text": "Scale\n\n심미성의 구체적 구현\n\nx-axis, y-axis\n\n\nscale_x_continuous(), scale_x_discrete()\n\n\n\n\ncolor and fill\n\n\nscale_color_brewer(), scale_fill_brewer()\n\n\nscale_color_manual(), scale_fill_manual()\n\n\n\n\nothers\n\nscale_shape(), scale_size()\nscale_linetype(), scale_linewidth()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R_lec_05.html#facet",
    "href": "R_lec_05.html#facet",
    "title": "Data Visualization",
    "section": "Facet",
    "text": "Facet\n\n다면생성(faceting) 과정을 통해, 하나의 플롯을 여러 개의 하위 플롯으로 분할\n\n두 가지 중요 함수\n\nfacet_wrap()\nfacet_grid()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R_lec_05.html#facet-1",
    "href": "R_lec_05.html#facet-1",
    "title": "Data Visualization",
    "section": "Facet",
    "text": "Facet\n\n\nNormal\nFaceting",
    "crumbs": [
      "R 프레젠테이션",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R_lec_05.html#statistical-transformation",
    "href": "R_lec_05.html#statistical-transformation",
    "title": "Data Visualization",
    "section": "Statistical transformation",
    "text": "Statistical transformation\n\n\nhttps://r4ds.hadley.nz/layers",
    "crumbs": [
      "R 프레젠테이션",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R_lec_05.html#coordinates",
    "href": "R_lec_05.html#coordinates",
    "title": "Data Visualization",
    "section": "Coordinates",
    "text": "Coordinates\n\n그래픽 요소들의 위치 결정에 기준이 되는 준거 체계\n\n두 가지 중요 함수\n\ncoord_flip()\ncoord_fixed()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R_lec_05.html#theme",
    "href": "R_lec_05.html#theme",
    "title": "Data Visualization",
    "section": "Theme",
    "text": "Theme\n\n\n그래프의 전체적인 외양(테마)를 수정\n\n8개 테마 제공\n\n\n\n그래프의 세부 구성 요소를 수정\n\ntheme()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R_lec_05.html#theme-1",
    "href": "R_lec_05.html#theme-1",
    "title": "Data Visualization",
    "section": "Theme",
    "text": "Theme\n\n\nhttps://r4ds.hadley.nz/communication",
    "crumbs": [
      "R 프레젠테이션",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R_lec_05.html#theme-2",
    "href": "R_lec_05.html#theme-2",
    "title": "Data Visualization",
    "section": "Theme",
    "text": "Theme\n\n\n수 많은 옵션 https://ggplot2.tidyverse.org/reference/theme.html\n\naxis 관련\nlegend 관련\nplot.title 관련",
    "crumbs": [
      "R 프레젠테이션",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R_lec_05.html#major-extensions",
    "href": "R_lec_05.html#major-extensions",
    "title": "Data Visualization",
    "section": "Major extensions",
    "text": "Major extensions\n\npatchwork\nggplotly\ngganimate\nGGally\nggcorrplot\ntidyterra",
    "crumbs": [
      "R 프레젠테이션",
      "Data Visualization"
    ]
  },
  {
    "objectID": "R_lec_03.html",
    "href": "R_lec_03.html",
    "title": "Data Import and Tidying",
    "section": "",
    "text": "Names\nFormats\n\n\n\nread_csv()\n콤마분리(comma-separated values, CSV) 형식\n\n\nread_csv2()\n세미콜론분리(semicolon-separated) 형식\n\n\nread_tsv()\n탭구분(tab-limited) 형식\n\n\nread_delim()\n여타의 구분 형식\n\n\nread_fwf()\n고정폭(fixed-width) 형식\n\n\nread_table()\n공백구분 형식\n\n\nread_log()\n아파치 형식(Apache-style)의 로그 파일\n\n\n\n\n컬럼명: col_names\n\n컬럼의 데이터 유형 지정과 파싱(parsing): col_types = cols()\n\ncol_double()\ncol_integer()\ncol_character()\ncol_logical()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nread_xls(), read_xlsx(), read_excel()\n\nsheet\nskip\ncol_names\ncol_types: “skip”, “guess”, “text”, “logical”, “numeric”, etc.",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#main-functions-of-readr-package",
    "href": "R_lec_03.html#main-functions-of-readr-package",
    "title": "Data Import and Tidying",
    "section": "",
    "text": "Names\nFormats\n\n\n\nread_csv()\n콤마분리(comma-separated values, CSV) 형식\n\n\nread_csv2()\n세미콜론분리(semicolon-separated) 형식\n\n\nread_tsv()\n탭구분(tab-limited) 형식\n\n\nread_delim()\n여타의 구분 형식\n\n\nread_fwf()\n고정폭(fixed-width) 형식\n\n\nread_table()\n공백구분 형식\n\n\nread_log()\n아파치 형식(Apache-style)의 로그 파일",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#main-arguments-of-read_csv",
    "href": "R_lec_03.html#main-arguments-of-read_csv",
    "title": "Data Import and Tidying",
    "section": "",
    "text": "컬럼명: col_names\n\n컬럼의 데이터 유형 지정과 파싱(parsing): col_types = cols()\n\ncol_double()\ncol_integer()\ncol_character()\ncol_logical()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#readxl-package",
    "href": "R_lec_03.html#readxl-package",
    "title": "Data Import and Tidying",
    "section": "",
    "text": "read_xls(), read_xlsx(), read_excel()\n\nsheet\nskip\ncol_names\ncol_types: “skip”, “guess”, “text”, “logical”, “numeric”, etc.",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#tibble-package",
    "href": "R_lec_03.html#tibble-package",
    "title": "Data Import and Tidying",
    "section": "\ntibble package",
    "text": "tibble package\n\nA new type of dataframe provided by tidyverse",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#tibble-vs.-data.frame",
    "href": "R_lec_03.html#tibble-vs.-data.frame",
    "title": "Data Import and Tidying",
    "section": "tibble vs. data.frame",
    "text": "tibble vs. data.frame",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#data-viewer",
    "href": "R_lec_03.html#data-viewer",
    "title": "Data Import and Tidying",
    "section": "Data viewer",
    "text": "Data viewer\n\nLike an Excel view\n\nHow to initiate\n\nView() function\nClick on an icon in Environment window\n\n\n\nFunctions\n\nSorting\nScrolling\nFiltering\nSearching",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#data-viewer-1",
    "href": "R_lec_03.html#data-viewer-1",
    "title": "Data Import and Tidying",
    "section": "Data viewer",
    "text": "Data viewer",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#data-viewer-2",
    "href": "R_lec_03.html#data-viewer-2",
    "title": "Data Import and Tidying",
    "section": "Data viewer",
    "text": "Data viewer",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#tidyr-package",
    "href": "R_lec_03.html#tidyr-package",
    "title": "Data Import and Tidying",
    "section": "\ntidyr package",
    "text": "tidyr package",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#the-concept-of-tidy-data",
    "href": "R_lec_03.html#the-concept-of-tidy-data",
    "title": "Data Import and Tidying",
    "section": "The concept of tidy data",
    "text": "The concept of tidy data",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#the-concept-of-tidy-data-1",
    "href": "R_lec_03.html#the-concept-of-tidy-data-1",
    "title": "Data Import and Tidying",
    "section": "The concept of tidy data",
    "text": "The concept of tidy data",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#the-concept-of-tidy-data-2",
    "href": "R_lec_03.html#the-concept-of-tidy-data-2",
    "title": "Data Import and Tidying",
    "section": "The concept of tidy data",
    "text": "The concept of tidy data\n\n개별 변수(variable)는 열(column) 하나를 차지한다. 즉, 개별 열에는 하나의 변수가 위치한다.\n개별 관측개체(observation)는 하나의 행(row)을 차지한다. 즉, 개별 행에는 하나의 관측개체가 위치한다.\n개별 값(value)은 하나의 셀(cell)을 차지한다. 즉, 개별 셀에는 하나의 값이 위치한다.",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#examples-table1",
    "href": "R_lec_03.html#examples-table1",
    "title": "Data Import and Tidying",
    "section": "Examples: table1",
    "text": "Examples: table1\n\nlibrary(tidyverse)\ntable1\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#examples-table2",
    "href": "R_lec_03.html#examples-table2",
    "title": "Data Import and Tidying",
    "section": "Examples: table2",
    "text": "Examples: table2\n\ntable2\n\n# A tibble: 12 × 4\n   country      year type            count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#examples-table3",
    "href": "R_lec_03.html#examples-table3",
    "title": "Data Import and Tidying",
    "section": "Examples: table3",
    "text": "Examples: table3\n\ntable3\n\n# A tibble: 6 × 3\n  country      year rate             \n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#benefits-of-tidy-data",
    "href": "R_lec_03.html#benefits-of-tidy-data",
    "title": "Data Import and Tidying",
    "section": "Benefits of tidy data",
    "text": "Benefits of tidy data",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#benefits-of-tidy-data-1",
    "href": "R_lec_03.html#benefits-of-tidy-data-1",
    "title": "Data Import and Tidying",
    "section": "Benefits of tidy data",
    "text": "Benefits of tidy data",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#benefits-of-tidy-data-2",
    "href": "R_lec_03.html#benefits-of-tidy-data-2",
    "title": "Data Import and Tidying",
    "section": "Benefits of tidy data",
    "text": "Benefits of tidy data",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#core-methods-of-data-tidying",
    "href": "R_lec_03.html#core-methods-of-data-tidying",
    "title": "Data Import and Tidying",
    "section": "Core methods of data tidying",
    "text": "Core methods of data tidying",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#wide-form-vs.-long-form",
    "href": "R_lec_03.html#wide-form-vs.-long-form",
    "title": "Data Import and Tidying",
    "section": "wide form vs. long form",
    "text": "wide form vs. long form",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#lengthening-data",
    "href": "R_lec_03.html#lengthening-data",
    "title": "Data Import and Tidying",
    "section": "Lengthening data",
    "text": "Lengthening data\n\n\ntable4a\nResult\n\n\n\n\ntable4a\n\n# A tibble: 3 × 3\n  country     `1999` `2000`\n  &lt;chr&gt;        &lt;dbl&gt;  &lt;dbl&gt;\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n\n\n\n\n\ntable4a |&gt; \n  pivot_longer(\n    cols = c(`1999`, `2000`),\n    names_to = \"year\", \n    values_to = \"cases\"\n  )\n\n# A tibble: 6 × 3\n  country     year   cases\n  &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt;\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#lengthening-data-1",
    "href": "R_lec_03.html#lengthening-data-1",
    "title": "Data Import and Tidying",
    "section": "Lengthening data",
    "text": "Lengthening data",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#widening-data",
    "href": "R_lec_03.html#widening-data",
    "title": "Data Import and Tidying",
    "section": "Widening data",
    "text": "Widening data\n\n\ntable2\nResult\n\n\n\n\ntable2\n\n# A tibble: 12 × 4\n   country      year type            count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n\n\n\n\n\ntable2 |&gt; \n  pivot_wider(\n    id_cols = c(country, year),\n    names_from = type, \n    values_from = count\n  )\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#widening-data-1",
    "href": "R_lec_03.html#widening-data-1",
    "title": "Data Import and Tidying",
    "section": "Widening data",
    "text": "Widening data",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#dplyr-package",
    "href": "R_lec_03.html#dplyr-package",
    "title": "Data Import and Tidying",
    "section": "\ndplyr package",
    "text": "dplyr package",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#keys",
    "href": "R_lec_03.html#keys",
    "title": "Data Import and Tidying",
    "section": "Keys",
    "text": "Keys",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#types-of-join",
    "href": "R_lec_03.html#types-of-join",
    "title": "Data Import and Tidying",
    "section": "Types of join",
    "text": "Types of join",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#types-of-join-1",
    "href": "R_lec_03.html#types-of-join-1",
    "title": "Data Import and Tidying",
    "section": "Types of join",
    "text": "Types of join",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_03.html#types-of-join-2",
    "href": "R_lec_03.html#types-of-join-2",
    "title": "Data Import and Tidying",
    "section": "Types of join",
    "text": "Types of join",
    "crumbs": [
      "R 프레젠테이션",
      "Data Import and Tidying"
    ]
  },
  {
    "objectID": "R_lec_01.html",
    "href": "R_lec_01.html",
    "title": "R & RStudio",
    "section": "",
    "text": "George Ross Ihaka\n\n\n\n\n\n\n\nUniversity of Auckland\n\n\n\n\n\n\n\nRobert C. Gentleman\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\nHadley Wickham",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#fathers-of-r-1993",
    "href": "R_lec_01.html#fathers-of-r-1993",
    "title": "R & RStudio",
    "section": "Fathers of R, 1993",
    "text": "Fathers of R, 1993\n\n\n\n\n\n\nGeorge Ross Ihaka\n\n\n\n\n\n\n\nUniversity of Auckland\n\n\n\n\n\n\n\nRobert C. Gentleman",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#ggplot2-2007",
    "href": "R_lec_01.html#ggplot2-2007",
    "title": "R & RStudio",
    "section": "ggplot2, 2007",
    "text": "ggplot2, 2007\n\n\n\n\n\n\n \n\n\n\n\n\nHadley Wickham",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#what-is-rstudio-for-r",
    "href": "R_lec_01.html#what-is-rstudio-for-r",
    "title": "R & RStudio",
    "section": "What is RStudio for R?",
    "text": "What is RStudio for R?",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#what-is-rstudio-for-r-1",
    "href": "R_lec_01.html#what-is-rstudio-for-r-1",
    "title": "R & RStudio",
    "section": "What is RStudio for R?",
    "text": "What is RStudio for R?",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#ide",
    "href": "R_lec_01.html#ide",
    "title": "R & RStudio",
    "section": "IDE",
    "text": "IDE",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#four-panes-or-windows",
    "href": "R_lec_01.html#four-panes-or-windows",
    "title": "R & RStudio",
    "section": "Four panes or windows",
    "text": "Four panes or windows",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#r-project",
    "href": "R_lec_01.html#r-project",
    "title": "R & RStudio",
    "section": "R Project",
    "text": "R Project",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#r-project-1",
    "href": "R_lec_01.html#r-project-1",
    "title": "R & RStudio",
    "section": "R Project",
    "text": "R Project",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#rstudio-guide",
    "href": "R_lec_01.html#rstudio-guide",
    "title": "R & RStudio",
    "section": "RStudio Guide",
    "text": "RStudio Guide\n\nRStudio IDE User Guide\nPosit Cheatsheets",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#google-trend",
    "href": "R_lec_01.html#google-trend",
    "title": "R & RStudio",
    "section": "Google Trend",
    "text": "Google Trend",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#differences",
    "href": "R_lec_01.html#differences",
    "title": "R & RStudio",
    "section": "Differences",
    "text": "Differences",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#differences-1",
    "href": "R_lec_01.html#differences-1",
    "title": "R & RStudio",
    "section": "Differences",
    "text": "Differences",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#r-for-open-science",
    "href": "R_lec_01.html#r-for-open-science",
    "title": "R & RStudio",
    "section": "R for Open Science",
    "text": "R for Open Science",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#r-for-reproducible-research",
    "href": "R_lec_01.html#r-for-reproducible-research",
    "title": "R & RStudio",
    "section": "R for Reproducible Research",
    "text": "R for Reproducible Research",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#r-communities",
    "href": "R_lec_01.html#r-communities",
    "title": "R & RStudio",
    "section": "R Communities",
    "text": "R Communities",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#r-communities-1",
    "href": "R_lec_01.html#r-communities-1",
    "title": "R & RStudio",
    "section": "R Communities",
    "text": "R Communities",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#r-and-python-in-harmony",
    "href": "R_lec_01.html#r-and-python-in-harmony",
    "title": "R & RStudio",
    "section": "R and Python in Harmony",
    "text": "R and Python in Harmony",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "lab_07.html",
    "href": "lab_07.html",
    "title": "Lab07: 데이터 수집하기",
    "section": "",
    "text": "이 실습은 R로 데이터를 수집하는 과정을 다룬다. R을 활용한 데이터 수집은 다양한 방법으로 진행될 수 있지만 여기서는 웹상의 데이터 파일 불러오기, 웹 스크레이핑, API를 이용하는 방식에 집중한다. 실습의 시작은 tidyverse 패키지를 불러오는 것이다.",
    "crumbs": [
      "R 실습",
      "Lab07: 데이터 수집하기"
    ]
  },
  {
    "objectID": "lab_07.html#실습-개요",
    "href": "lab_07.html#실습-개요",
    "title": "Lab07: 데이터 수집하기",
    "section": "",
    "text": "이 실습은 R로 데이터를 수집하는 과정을 다룬다. R을 활용한 데이터 수집은 다양한 방법으로 진행될 수 있지만 여기서는 웹상의 데이터 파일 불러오기, 웹 스크레이핑, API를 이용하는 방식에 집중한다. 실습의 시작은 tidyverse 패키지를 불러오는 것이다.",
    "crumbs": [
      "R 실습",
      "Lab07: 데이터 수집하기"
    ]
  },
  {
    "objectID": "lab_07.html#웹상의-데이터-파일-불러오기",
    "href": "lab_07.html#웹상의-데이터-파일-불러오기",
    "title": "Lab07: 데이터 수집하기",
    "section": "\n1 웹상의 데이터 파일 불러오기",
    "text": "1 웹상의 데이터 파일 불러오기\n\nlibrary(tidyverse)\n\n아마도 데이터를 수집하는 가장 단순한 방법은 웹상에 파일 형태로 존재하는 데이터를 R에서 불러오는 것일 것이다. readr 패키지에서 제공하는 다양한 데이터 불러오기 함수(예: read_csv())를 데이터의 URL에 적용하면 손쉽게 데이터를 획득할 수 있다.\n\nstudents &lt;- read_csv(\"https://pos.it/r4ds-students-csv\")\nstudents\n\n# A tibble: 6 × 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\n그런데 엑셀 형식의 파일은 readxl 패키지가 제공하는 read_excel() 함수를 이용해 막바로 데이터를 불러오는 것이 불가능하다. openxlsx 패키지는 이러한 문제를 해결할 수 있게 해준다. 정말 다양한 함수를 제공하지만 read.xlsx() 함수가 URL을 통해 엑셀 데이터를 불러오는데 사용된다.\n\nlibrary(openxlsx)\nxlsx_data &lt;- read.xlsx(\"https://github.com/awalker89/openxlsx/raw/master/inst/readTest.xlsx\")\nxlsx_data\n\n    Var1 Var2   Var3 Var4  Var5         Var6 Var7\n1   TRUE    1   1.00    a 42042 3209324 This   NA\n2   TRUE   NA     NA    b 42041         &lt;NA&gt;   NA\n3   TRUE    2   1.34    c 42040         &lt;NA&gt;   NA\n4  FALSE    2     NA &lt;NA&gt;    NA         &lt;NA&gt;   NA\n5  FALSE    3   1.56    e    NA         &lt;NA&gt;   NA\n6  FALSE    1   1.70    f 42037         &lt;NA&gt;   NA\n7     NA   NA     NA &lt;NA&gt; 42036         &lt;NA&gt;   NA\n8  FALSE    2  23.00    h 42035         &lt;NA&gt;   NA\n9  FALSE    3  67.30    i 42034         &lt;NA&gt;   NA\n10    NA    1 123.00 &lt;NA&gt; 42033         &lt;NA&gt;   NA",
    "crumbs": [
      "R 실습",
      "Lab07: 데이터 수집하기"
    ]
  },
  {
    "objectID": "lab_07.html#웹스크레이핑",
    "href": "lab_07.html#웹스크레이핑",
    "title": "Lab07: 데이터 수집하기",
    "section": "\n2 웹스크레이핑",
    "text": "2 웹스크레이핑\n웹스크레이핑(web scraping)이란 웹페이지로부터 특정한 데이터를 추출하는 것을 의미한다. R에서 웹스크레이핑은 rvest 패키지가 답당하는데, reaxl 패키지와 마찬가지로 tidyverse의 핵심 패키지는 아니기 때문에 따로 불러와야 한다.\n\nlibrary(rvest)\n\n\n2.1 웹스크레이핑의 실제 1: 테이블이 하나 있는 경우\n위키피디어의 한 항목(List of countries and dependencies by population)에는 표 하나가 포함되어 있다. 해당 표의 데이터를 수집한다.\n\nurl &lt;- \"https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population\"\nmy_table &lt;- url |&gt; \n  read_html() |&gt; \n  html_element(\"table\") |&gt; \n  html_table()\nmy_table\n\n# A tibble: 241 × 7\n   ``      Location    Population `% ofworld` Date  Source (official or …¹ ``   \n   &lt;chr&gt;   &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;                  &lt;chr&gt;\n 1 –       World       8,104,769… 100%        5 Ma… UN projection[3]       \"\"   \n 2 1/2 [b] China       1,409,670… 17.4%       31 D… Official estimate[5]   \"[c]\"\n 3 1/2 [b] India       1,400,744… 17.3%       1 Ma… Official projection[6] \"[d]\"\n 4 3       United Sta… 335,893,2… 4.1%        1 Ja… Official estimate[7]   \"[e]\"\n 5 4       Indonesia   279,118,8… 3.4%        1 Ju… National annual proje… \"\"   \n 6 5       Pakistan    241,499,4… 3.0%        1 Ma… 2023 census result[9]  \"[f]\"\n 7 6       Nigeria     223,800,0… 2.8%        1 Ju… Official projection[1… \"\"   \n 8 7       Brazil      203,080,7… 2.5%        1 Au… 2022 census result[11] \"\"   \n 9 8       Bangladesh  169,828,9… 2.1%        14 J… 2022 census result[12] \"\"   \n10 9       Russia      146,150,7… 1.8%        1 Ja… Official estimate[13]  \"[g]\"\n# ℹ 231 more rows\n# ℹ abbreviated name: ¹​`Source (official or fromthe United Nations)`\n\n\n수집한 데이터를 가공해본다. 필요없는 컬럼을 제거하고, 컬럼 이름을 바꾸고, 몇몇 변수를 특정 형태의 타입(numeric, date)으로 변환하기 위한 과정이다.\n\nmy_table &lt;- my_table |&gt; \n  select(-1, -7) |&gt; \n  rename(\n    location = \"Location\",\n    population = \"Population\",\n    pop_pct = \"% ofworld\",\n    date = \"Date\",\n    source = \"Source (official or fromthe United Nations)\"\n  ) |&gt; \n  mutate(\n    population = str_remove_all(population, \",\"),\n    population = as.numeric(population),\n    pop_pct = str_remove(pop_pct, \"%\"),\n    pop_pct = as.numeric(pop_pct),\n    date = dmy(date)\n  )\n\nmy_table\n\n# A tibble: 241 × 5\n   location      population pop_pct date       source                       \n   &lt;chr&gt;              &lt;dbl&gt;   &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;                        \n 1 World         8104769000   100   2024-05-05 UN projection[3]             \n 2 China         1409670000    17.4 2023-12-31 Official estimate[5]         \n 3 India         1400744000    17.3 2024-03-01 Official projection[6]       \n 4 United States  335893238     4.1 2024-01-01 Official estimate[7]         \n 5 Indonesia      279118866     3.4 2023-07-01 National annual projection[8]\n 6 Pakistan       241499431     3   2023-03-01 2023 census result[9]        \n 7 Nigeria        223800000     2.8 2023-07-01 Official projection[10]      \n 8 Brazil         203080756     2.5 2022-08-01 2022 census result[11]       \n 9 Bangladesh     169828911     2.1 2022-06-14 2022 census result[12]       \n10 Russia         146150789     1.8 2024-01-01 Official estimate[13]        \n# ℹ 231 more rows\n\n\n\n2.2 웹스크레이핑의 실제 2: 테이블이 둘 이상인 경우\n위키피디아의 한 항목(List of FIPS country codes)에는 동일한 내용에 대해 여러 개의 표가 나타나 있다. 개별 표의 데이터를 수집한 후 결합하여 단일한 데이터 프레임을 구성한다.\n\nurl &lt;- \"https://en.wikipedia.org/wiki/List_of_FIPS_country_codes\"\nmy_tables &lt;- url |&gt; \n  read_html() |&gt; \n  html_elements(\"table\") |&gt; \n  html_table() |&gt; \n  bind_rows()\nmy_tables\n\n# A tibble: 283 × 10\n   Code    `Short-form name` .mw-parser-output .n…¹ .mw-parser-output .n…² ...3 \n   &lt;chr&gt;   &lt;chr&gt;             &lt;chr&gt;                  &lt;chr&gt;                  &lt;chr&gt;\n 1 .mw-pa… Aruba             &lt;NA&gt;                   &lt;NA&gt;                   &lt;NA&gt; \n 2 AC      Antigua and Barb… &lt;NA&gt;                   &lt;NA&gt;                   &lt;NA&gt; \n 3 AE      United Arab Emir… &lt;NA&gt;                   &lt;NA&gt;                   &lt;NA&gt; \n 4 AF      Afghanistan       &lt;NA&gt;                   &lt;NA&gt;                   &lt;NA&gt; \n 5 AG      Algeria           &lt;NA&gt;                   &lt;NA&gt;                   &lt;NA&gt; \n 6 AJ      Azerbaijan        &lt;NA&gt;                   &lt;NA&gt;                   &lt;NA&gt; \n 7 AL      Albania           &lt;NA&gt;                   &lt;NA&gt;                   &lt;NA&gt; \n 8 AM      Armenia           &lt;NA&gt;                   &lt;NA&gt;                   &lt;NA&gt; \n 9 AN      Andorra           &lt;NA&gt;                   &lt;NA&gt;                   &lt;NA&gt; \n10 AO      Angola            &lt;NA&gt;                   &lt;NA&gt;                   &lt;NA&gt; \n# ℹ 273 more rows\n# ℹ abbreviated names:\n#   ¹​`.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:\"[ \"}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:\" ]\"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a&gt;span,.mw-parser-output .navbar a&gt;abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteGeocode systems...1`,\n#   ²​`.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:\"[ \"}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:\" ]\"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a&gt;span,.mw-parser-output .navbar a&gt;abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteGeocode systems...2`\n# ℹ 5 more variables: ...4 &lt;chr&gt;, ...5 &lt;chr&gt;, ...6 &lt;chr&gt;, X1 &lt;chr&gt;, X2 &lt;chr&gt;\n\n\n수집한 데이터를 약간 가공한다. 역시 필요한 컬럼만 남기고, 이름을 바꿔준다. 마지막 str_extract는 Aruba의 단축어에 원치 않는 문자열이 추가되어 있어 제거하기 위한 코드이다.\n\nmy_tables &lt;- my_tables |&gt; \n  select(1, 2) |&gt; \n  rename(\n    code = \"Code\", \n    short_name = \"Short-form name\"\n  ) |&gt; \n  mutate(\n    code = str_extract(code, \"[A-Z][A-Z]\")\n  )\nmy_tables\n\n# A tibble: 283 × 2\n   code  short_name          \n   &lt;chr&gt; &lt;chr&gt;               \n 1 AA    Aruba               \n 2 AC    Antigua and Barbuda \n 3 AE    United Arab Emirates\n 4 AF    Afghanistan         \n 5 AG    Algeria             \n 6 AJ    Azerbaijan          \n 7 AL    Albania             \n 8 AM    Armenia             \n 9 AN    Andorra             \n10 AO    Angola              \n# ℹ 273 more rows\n\n\n\n\n\n\n\n\n추가 예제\n\n\n\n\n\n간혹 테이블을 불러올 때 데이터가 깨지는 경우도 발생한다. 이는 인코딩 방식의 문제인데, 아래와 같이 인코딩 아규먼트를 추가하면 해결된다. 보통 “EUC-KR”이나 “UTF-8” 둘 중 하나는 제대로 작동한다.\n한 번 네이버가 제공하는 주식 거래 상위 품목을 크롤링해보자.\n\nlibrary(DT)\nkospi &lt;- \"https://finance.naver.com/sise/sise_quant.naver?sosok=0\"\n\nkospi_table &lt;- kospi |&gt; \n  read_html(, encoding = \"EUC-KR\") |&gt; \n  html_elements(\"table\") |&gt; \n  html_table() |&gt; \n  _[[2]] |&gt; \n  filter(is.na(N) == FALSE)\n\ndatatable(kospi_table)",
    "crumbs": [
      "R 실습",
      "Lab07: 데이터 수집하기"
    ]
  },
  {
    "objectID": "lab_07.html#api의-활용",
    "href": "lab_07.html#api의-활용",
    "title": "Lab07: 데이터 수집하기",
    "section": "\n3 API의 활용",
    "text": "3 API의 활용\nKOSIS를 포함한 많은 대한민국의 데이터 포털은 개방 API 서비스를 제공하고 있다. KOSIS는 공유서비스 홈페이지(https://kosis.kr/openapi/)를 통해 Open API를 통한 데이터 수집을 권장하고 있다.\n앞에서 설명한 것처럼, API용 패키지를 직접 사용할 수도 있지만, 래퍼 패키지가 존재하기만 한다면 그것을 활용하는 것이 훨씬 손쉬운 옵션일 수 있다. 놀랍게도 한국의 주석훈(Seokhoon Joo)이라는 분이 그러한 기능을 하는 kosis(https://cran.r-project.org/web/packages/kosis/index.html)라는 패키지를 이미 개발해 두었고, 그것을 활용하고자 한다.\n실습 주제는 2022년 센서스 인구 기준으로 전국의 17개 시도별 ’지방소멸위험지수’를 계산하고 그래프의 형태로 표현하는 것이다.\n\n3.1 KOSIS에서 API KEY 받기\n먼저 API를 활용하기 위해 기관으로부터 KEY를 발급받아야 한다. 이를 위해 통계청에 회원가입을 한 후, KEY를 요청해야 한다. 과정은 아래와 같다.\n\nKOSIS 공유서비스 웹페이지(https://kosis.kr/openapi/) 접속\n\n상단의 [활용신청] 탭 클릭\n\n통계청의 ONE-ID로 통합로그인(없으면 회원가입 필수)\n\n\n\n활용신청하여 사용자 인증키 획득\n\n사용자 인증키는 마이페이지에서 언제든 확인 가능\n\n\n\n3.2 패키지 설치 및 인증키 등록\n우선 kosis 패키지를 오른쪽 하단 윈도우의 Packages 탭을 활용하여 인스톨한다. 이후에 아래와 같이 kosis와 tidyverse 패키지를 불러온다.\n\nlibrary(kosis)\n\n다음으로, kosis 패키지의 kosis.setKey() 함수를 이용하여 인증키를 등록한다. Your Key Here 자리에 부여받은 인증키를 붙여 넣는다.\n\nkosis.setKey(apiKey = \"Your Key Here\")\n\n\n3.3 데이터 추출\n이제 통계청 홈페이지에 접속해서 데이터를 불러와본다. 과정은 아래와 같다.\n\nKOSIS에 접속 후 로그인\n\n데이터에 접근 후 URL 생성\n\n[국내통계]-[주제별 통계]-[인구]-[인구총조사]-[인구부문]-[총조사인구(2015년 이후)]-[전수부문 (등록센서스, 2015년 이후)]-[전수기본표]-[연령 및 성별 인구]\n항목: ‘총인구(명)’, ‘총인구_남자(명)’, ’총인구_여자(명)’만 선택(더 많은 항목을 선택하면 데이터가 너무 커 에러가 발생)\n행정구역별(읍면동): ‘1 레벨’과 ’2 레벨’ 선택(’1 레벨’은 시도 수준, ’2 레벨’은 시군구 수준)\n조회기간: ‘기간설정’ 버턴을 누른 후, 기간설정이 2022~2022년인지 확인한다.\n응답필드: 하나씩 눌러 모두 선택한 후, ‘URL생성’ 탭을 클릭한다. 그리고 나서 ‘URL 복사’ 탭을 클릭한다. URL 속에 api key가 포함되어 있음을 확인한\n\n\n생성한 URL로부터 데이터 획득\n\n\nyour_url &lt;- \"Your URL\"\ndata_api &lt;- getStatDataFromURL(url = your_url)\n\ngetStatDataFromURL 함수의 아규먼트에 위에서 생성한 URL을 입력하면, 다운로드 과정 없이 곧바로 데이터를 획득할 수 있다.\n\n3.4 데이터 정리 및 변형\n아래와 같이 데이터를 정리 및 변형한다. 최종적으로 지역별 지역소멸위험지수를 산출한다.\n\ndata &lt;- data_api |&gt; \n  select(C1, C1_NM, C2, C2_NM, ITM_ID, ITM_NM, DT) |&gt; \n  mutate(\n    across(c(C1, DT), as.numeric),\n    ITM_ID = case_match(\n    ITM_ID, \"T00\" ~ \"T\",\n    \"T01\" ~ \"M\",\n    \"T02\" ~ \"F\"),\n  ) |&gt;\n  unite(\"gender_age\", ITM_ID, C2_NM, sep = \"_\") |&gt; \n  pivot_wider(\n    id_cols = c(C1, C1_NM),\n    names_from = gender_age,\n    values_from = DT\n  ) |&gt; \n  mutate(\n    index = (`F_20~24세` + `F_25~29세` + `F_30~34세` + `F_35~39세`) / `T_65세이상`\n  ) |&gt; \n  select(\n    C1, C1_NM, index\n  )\n\n시도 데이터와 시군구 데이터를 분리하여 저장한다.\n\ndata_sido &lt;- data |&gt; \n  filter(nchar(C1) == 2) \n\ndata_sgg &lt;- data |&gt; \n  filter(nchar(C1) == 5 & substr(C1, 5, 5) == 0 & !C1_NM %in% c(\"동부\", \"면부\", \"읍부\"))\n\n\n3.5 그래프 작성\n인구소멸위험지수 연구에서 주로 사용되는 5개의 위험도 클래스의 구분법을 적용하고, 위험도 클래스별로 특정한 색상을 적용하고, 그래프의 범례에 5개의 클래스가 모두 나타나게 하려다보니 코드가 조금 복잡해졌다. \n\ndata_sido &lt;- data_sido |&gt; \n  mutate(\n    index_class = case_when(\n      index &lt; 0.2 ~ \"1\",\n      index &gt;= 0.2 & index &lt; 0.5 ~ \"2\",\n      index &gt;= 0.5 & index &lt; 1.0 ~ \"3\",\n      index &gt;= 1.0 & index &lt; 1.5 ~ \"4\",\n      index &gt;= 1.5 ~ \"5\"\n    ),\n    index_class = factor(index_class, levels = as.character(1:5))\n  )\n\nclass_color &lt;- c(\"1\" = \"#d7191c\", \"2\" = \"#fdae61\",\n                 \"3\" = \"#ffffbf\", \"4\" = \"#a6d96a\", \n                 \"5\" = \"#1a9641\")\ndata_sido |&gt; \n  ggplot(aes(x = index, y = fct_reorder(C1_NM, index))) +\n  geom_col(aes(fill = index_class), show.legend = TRUE) +\n  geom_text(aes(label = format(round(index, digits = 3), \n                               nsmall = 3)), hjust = -0.1) +\n  scale_x_continuous(limits = c(0, 1.5)) +\n  scale_fill_manual(name = \"Classes\", \n                    labels = c(\"&lt; 0.2\", \"0.2 ~ 0.5\", \"0.5 ~ 1.0\", \n                               \"1.0 ~ 1.5\", \"&gt;= 1.5\"), \n                    values = class_color, drop = FALSE) +\n  labs(title = \"인구소멸위험지수, 2022년\", \n       x = \"인구소멸위험지수\", \n       y = \"\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nKOSIS API의 추가 예제\n\n\n\n\n\n이렇게 KOSIS 홈페이지에서 URL을 직접 지정하지 않고도 데이터를 불러오는 방법이 있다. getStatData 함수로, 기관명과 데이터 코드를 아규먼트에 입력하면 해당 데이터를 불러올 수 있다. 가령 방금 실습에서 사용한 데이터는 통계청의 2015년 인구총조사 전수부문의 연령 및 성별인구에 해당한다. 이때 통계청의 기관 코드는 101, 해당 데이터의 코드는 DT_1IN503이다.\n아래의 코드는 여기에 몇 개의 아규먼트를 더 추가하여 서울특별시 종로구의 2015년부터 2022년까지의 데이터를 불러오고, 이를 바탕으로 인구소멸지수를 계산하여 그 추이를 시각화 한 것이다.\n\naoi_code &lt;- \"11010\" # 서울특별시 종로구 코드\naoi &lt;- getStatData(orgId = 101, tblId = \"DT_1IN1503\", prdSe = \"Y\",\n                    startPrdDe = \"2015\", endPrdDe = \"2022\",\n                    objL1 = aoi_code, objL2 = \"ALL\") |&gt; \n  filter(nchar(C2) == 3)\n\naoi &lt;- aoi |&gt; \n  select(C1, C1_NM, C2, C2_NM, ITM_ID, ITM_NM, DT, PRD_DE) |&gt; \n  filter(ITM_ID == \"T00\" | ITM_ID == \"T01\" | ITM_ID == \"T02\") |&gt; \n  mutate(\n    across(c(C1, DT), as.numeric),\n    ITM_ID = case_match(\n      ITM_ID, \"T00\" ~ \"T\",\n      \"T01\" ~ \"M\",\n      \"T02\" ~ \"F\"),\n  ) |&gt; \n  unite(\"gender_age\", ITM_ID, C2_NM, sep = \"_\") |&gt; \n  pivot_wider(\n    id_cols = c(C1, C1_NM, PRD_DE),\n    names_from = gender_age,\n    values_from = DT\n  ) |&gt; \n  mutate(\n    index = (`F_20~24세` + `F_25~29세` + `F_30~34세` + `F_35~39세`) / `T_65세이상`\n  ) |&gt; \n  select(\n    C1, C1_NM, index, PRD_DE\n  )\n\nregion &lt;- aoi$C1_NM[1]\n\n\naoi |&gt; \n  ggplot(aes(x=PRD_DE, y=index)) +\n  geom_point() +\n  geom_line(group = 1, linewidth = 0.5) +\n  ggtitle(paste0(region, \" 인구소멸위험지수 추이\")) +\n  xlab(label = \"연도\") +\n  ylab(label = \"인구소멸위험지수\") +\n  theme(plot.title = element_text(size = 18, hjust=0.5))\n\n\n\n\n\n\n\naoi_code에 내가 원하는 지역의 코드를 넣으면 마찬가지로 해당 관심지역의 인구소멸위험지수 추이를 관측할 수 있다. 예컨대 인구가 빠르게 증가하는 경기 김포시는 “31230”, 화성시는 “31240”이고, 소멸지수가 가장 높은 경북 상주시는 “37080”, 경북 문경시는 “37090”이다. 제공한 코드에서 한번 aoi_code 부분만 변경해보자.\n한편, 이렇게 URL 없이 데이터를 불러오는 경우 KOSIS에서 직접 조정하는 것에 비해 덜 번거롭지만 제한사항도 많다. 가령 복수의 지역을 불러오는 것이 반복문을 사용하지 않고서는 불가능하고, 불필요한 데이터를 빼고 가져오기도 어렵다. 그러나 startPrdDe와 endPrdDe 아규먼트를 이용해 데이터를 시계열로 수집하고자 하는 측면에서는 유용하다.\n그러므로 수집하고자 하는 데이터를 잘 파악해서 API를 활용해보자.\n\n\n\n\n3.6 cf) KOSIS API를 활용한 함수 작성\n마지막으로, API를 활용한 함수를 소개한다. API를 신청할 때 보았듯, 이는 웹/앱 애플리케이션을 제작하기 위한 용도로 주로 사용된다.\n이와 관련된 매우 간단한 예시로, 학생에게 인구소멸지수가 궁금한 지역을 검색해보도록 하는 활동을 구상한다고 가정해보자. 학생이 매번 코드를 작성하며 확인하기란 사실상 불가능하다. 그런데 위에서 사용한 코드와 API를 활용하면 함수를 어렵지 않게 생성할 수 있다.\n예컨대 교사가 아래와 같이 exInd() 함수를 한번 작성해두면, 학생은 단 한 줄의 코드만 입력해도 금방 지역의 인구소멸지수의 추이를 탐색해볼 수 있을 것이다.\n\n# 함수 생성: 교사 작성 부분\nexInd &lt;- function(){\n  # Library\n  library(tidyverse)\n  library(kosis)\n  library(DT)\n  library(openxlsx)\n  \n  # Table for Searching Region Code\n  region_table &lt;- read.xlsx(\"https://github.com/Sechang-Kim/gis-lab/raw/download/korea-sigungu-code(2022).xlsx\")\n  print(datatable(region_table))\n  \n  # Input Arguments\n  aoi_code &lt;- readline('지역 코드를 입력하세요: ')\n  start &lt;- as.numeric(readline('시작 연도를 입력하세요: '))\n  end &lt;- as.numeric(readline('종료 연도를 입력하세요: '))\n  \n  # Data Request\n  aoi &lt;- getStatData(orgId = 101, tblId = \"DT_1IN1503\", prdSe = \"Y\",\n                     startPrdDe = start, endPrdDe = end,\n                     objL1 = aoi_code, objL2 = \"ALL\") |&gt; \n    filter(nchar(C2) == 3) # Delete 1-age interval(Only 5-age interval)\n  \n  # Data Cleansing\n  aoi &lt;- aoi |&gt; \n    select(C1, C1_NM, C2, C2_NM, ITM_ID, ITM_NM, DT, PRD_DE) |&gt; \n    filter(ITM_ID == \"T00\" | ITM_ID == \"T01\" | ITM_ID == \"T02\") |&gt; \n    mutate(\n      across(c(C1, DT), as.numeric),\n      ITM_ID = case_match(\n        ITM_ID, \"T00\" ~ \"T\",\n        \"T01\" ~ \"M\",\n        \"T02\" ~ \"F\"),\n    ) |&gt; \n    unite(\"gender_age\", ITM_ID, C2_NM, sep = \"_\") |&gt; \n    pivot_wider(\n      id_cols = c(C1, C1_NM, PRD_DE),\n      names_from = gender_age,\n      values_from = DT\n    ) |&gt; \n    mutate(\n      index = (`F_20~24세` + `F_25~29세` + `F_30~34세` + `F_35~39세`) / `T_65세이상`\n    ) |&gt; \n    select(\n      C1, C1_NM, index, PRD_DE\n    )\n  \n  ## Visualization\n  region &lt;- aoi$C1_NM[1] # For Auto-Plot Title\n  vis &lt;- aoi |&gt; \n    ggplot(aes(x=PRD_DE, y=index)) +\n    geom_point() +\n    geom_line(group = 1, linewidth = 0.5) +\n    ggtitle(paste0(region, \" 인구소멸위험지수 추이\")) +\n    xlab(label = \"연도\") +\n    ylab(label = \"인구소멸위험지수\") +\n    theme(plot.title = element_text(size = 18, hjust=0.5))\n  \n  return(vis)\n}\n\n\n# 함수 실행: 학생 작성 부분\nexInd()",
    "crumbs": [
      "R 실습",
      "Lab07: 데이터 수집하기"
    ]
  },
  {
    "objectID": "lab_05.html",
    "href": "lab_05.html",
    "title": "Lab05: 데이터 시각화하기",
    "section": "",
    "text": "이 실습은 R로 데이터사이언스를 하는 과정 중 데이터 시각화하기(visualizing)를 다룬다. 다음의 사항을 다룬다. 데이터 시각화하기는 tidyverse의 핵심 패키지 중의 하나인 ggplot2 에서 제공된다.\n모든 실습의 시작은 tidyverse 패키지를 불러오는 것이다. 또한 이후 사용하게 될 패키지 ggrepel, patchwork, RColorBrewer 패키지도 미리 설치하고 불러온다.\n\nlibrary(tidyverse)\nlibrary(ggrepel)\nlibrary(patchwork)\nlibrary(RColorBrewer)\n\n실습을 위해 ggplot2 패키지 속에 포함되어 있는 mpg 데이터와 diamonds 데이터를 사용한다. 각 데이터에서 눈여겨 볼 변수는 아래와 같다.\n\n\nmpg\n\ndispl : 배기량(displacement)\nclass : 자동차 유형(compact/midsize/suv/2seater/minivan/pickup/subcompact)\nhwy : 고속도로(highway) 연비\n\n\n\ndiamonds\n\nprice : 가격\ncarat : 캐럿\ncolor : 다이아몬드 색깔\nclarity : 투명도\ncut : 가공의 품질",
    "crumbs": [
      "R 실습",
      "Lab05: 데이터 시각화하기"
    ]
  },
  {
    "objectID": "lab_05.html#실습-개요",
    "href": "lab_05.html#실습-개요",
    "title": "Lab05: 데이터 시각화하기",
    "section": "",
    "text": "이 실습은 R로 데이터사이언스를 하는 과정 중 데이터 시각화하기(visualizing)를 다룬다. 다음의 사항을 다룬다. 데이터 시각화하기는 tidyverse의 핵심 패키지 중의 하나인 ggplot2 에서 제공된다.\n모든 실습의 시작은 tidyverse 패키지를 불러오는 것이다. 또한 이후 사용하게 될 패키지 ggrepel, patchwork, RColorBrewer 패키지도 미리 설치하고 불러온다.\n\nlibrary(tidyverse)\nlibrary(ggrepel)\nlibrary(patchwork)\nlibrary(RColorBrewer)\n\n실습을 위해 ggplot2 패키지 속에 포함되어 있는 mpg 데이터와 diamonds 데이터를 사용한다. 각 데이터에서 눈여겨 볼 변수는 아래와 같다.\n\n\nmpg\n\ndispl : 배기량(displacement)\nclass : 자동차 유형(compact/midsize/suv/2seater/minivan/pickup/subcompact)\nhwy : 고속도로(highway) 연비\n\n\n\ndiamonds\n\nprice : 가격\ncarat : 캐럿\ncolor : 다이아몬드 색깔\nclarity : 투명도\ncut : 가공의 품질",
    "crumbs": [
      "R 실습",
      "Lab05: 데이터 시각화하기"
    ]
  },
  {
    "objectID": "lab_05.html#핵심-레이어-심미성과-기하",
    "href": "lab_05.html#핵심-레이어-심미성과-기하",
    "title": "Lab05: 데이터 시각화하기",
    "section": "\n1 핵심 레이어: 심미성과 기하",
    "text": "1 핵심 레이어: 심미성과 기하\n이 8개 구성요소 중 가장 중요한 것은 ‘심미성(aesthetics)’ 혹은 ‘심미성 매핑(aesthetic mapping)’와 ’기하(geometries)’ 혹은 ’기하 객체(geometric objects)’이다. 기하가 그래프의 전체 구조 혹은 형식을 규정하는 것이라면, 심미성은 기하의 외견을 규정한다. 결국 기하는 그래프의 유형(예: 막대 그래프, 산포도 등)과 관련되고, 심미성은 그래프의 시각적 속성(예: x축, y축, 컬러, 크기, 모양 등)과 관련된다. 이 두 가지는 독립적인 요소이지만, 어느 정도는 관련되어 있기도 하다. 모든 기하가 모든 심미성과 결합할 수 있는 것은 아니다. 특정한 기하는 오로지 특정한 심미성과만 결합한다. 예를 들어 포인트 기하 객체(geom_point())는 크기(size) 심미성과 관련되지만, 라인 기하 객체(geom_line())는 크기 심미성과는 관련되지 않고 라인폭(linewidth) 심미성과만 관련되는 식이다.\n\n1.1 기초 예제\n그래프를 그리기 위해 반드시 필요한 것은 데이터, 심미성, 기하이다. 이들을 차례로 하나씩 추가해본다.\nFigure 1 를 보면, 빈 화면만 출력되는 것을 볼 수 있다. 데이터만 올라왔으므로, 그릴 수 있는 것이 없다. Figure 2 에서는 x축과 y축이 나타났다. 그러나 이 재료를 가지고 무슨 그래프를 그릴지는 지정하지 않았으므로 아무 그래프도 나타나지 않는다. Figure 3 에서야 비로소 그래프가 나타나는데, 이는 어떤 데이터로부터 어떤 변수를 사용할지, 그리고 그것을 어떤 방식으로 그릴지를 모두 지정해주었기 때문이다.\n\n# 데이터만 추가\nggplot(data=mpg)\n\n\n\n\n\n\nFigure 1: 데이터만 추가\n\n\n\n\n\nggplot(data=mpg, aes(x=displ, y=hwy))\n\n\n\n\n\n\nFigure 2: 데이터 + 심미성(x, y축)\n\n\n\n\n\nggplot(data=mpg, aes(x=displ, y=hwy)) +\n  geom_point()\n\n\n\n\n\n\nFigure 3: 데이터 + 심미성(x, y축) + 기하\n\n\n\n\n\n1.2 심미성 매핑\n심미성 매핑이란 다양한 시각적 속성 혹은 재료를 그래프에 적용 혹은 부여하는 과정을 의미한다. displ과 hwy의 관계가 class에 따라 어떻게 달라지는지를 시각화한다. 다음의 두 그래프를 비교해 본다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = class)) +\n  geom_point()\n\n\n\n\n\n\nFigure 4: 심미성: 컬러\n\n\n\n\n\nggplot(mpg, aes(x = displ, y = hwy, shape = class)) +\n  geom_point()\n\n\n\n\n\n\nFigure 5: 심미성: 형태\n\n\n\n\nFigure 4 과 Figure 5 중 어느 것이 더 효과적인 시각화라고 생각하는가? 컬러(color)와 형태(shape)라는 심미성 요소 외에 크기(size)와 투명도(alpha) 요소를 동일한 데이터에 적용해 본다.\n\nggplot(mpg, aes(x = displ, y = hwy, size = class)) +\n  geom_point()\n\n\n\n\n\n\nFigure 6: 심미성: 크기\n\n\n\n\n\nggplot(mpg, aes(x = displ, y = hwy, alpha = class)) +\n  geom_point()\n\n\n\n\n\n\nFigure 7: 심미성: 투명도\n\n\n\n\n크기와 투명도는 양적인 차이를 나타내는데 적합한 심미성이기 때문에 class라는 정성적인 범주의 차이를 보여주는데는 적합하지 않다. 심미성 부여에서 가장 중요한 것은 결국 얼마나 적절한 심미성 요소, 혹은 시각 변수(visual variables)를 선택하느냐에 달려 있다.\n\n1.3 기하 객체\nFigure 8 와 Figure 9 이 다르게 보이는 것은 기하 객체가 하나는 포인트(point)이고 다른 하나는 완만한 선(smooth)이기 때문이다.\n\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point()\n\n\n\n\n\n\nFigure 8: 기하: geom_point()\n\n\n\n\n\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_smooth()\n\n\n\n\n\n\nFigure 9: 기하: geom_smooth()\n\n\n\n\nFigure 4 과 Figure 9 두 개를 결합해 본다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = class)) + \n  geom_point() + \n  geom_smooth()\n\n\n\n\n\n\nFigure 10: 기하: geom_point() + geom_smooth() 1\n\n\n\n\n원하는 것이 아니다. 왜 이런 결과가 나왔으며, 어떻게 하면 원하는 것을 얻을 수 있을지 생각해 본다.\n\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point(aes(color = class)) + \n  geom_smooth()\n\n\n\n\n\n\nFigure 11: 기하: geom_point() + geom_smooth() 2\n\n\n\n\n두 결과의 차이는 color 심미성을 글로벌하게 적용하느냐 로컬하게 적용하느냐(포인트 기하에만 적용)에 달린 것이다. 글로벌한 심미성은 ggplot()속에서 설정하고, 국지적인 심미성은 개별 기하(geom_point()) 속에서 설정한다. 매우 중요한 사항이니 꼭 기억하도록 한다.\n다양한 기하 객체는 동일한 데이터를 다양한 방식으로 탐색할 수 있게 해준다. 다음의 세가지 기하 객체는 탐색적 데이터 분석에서 널리 사용되는 것이다.\n\nggplot(mpg, aes(x = hwy)) +\n  geom_histogram(binwidth = 2)\n\n\n\n\n\n\nFigure 12: 기하: geom_histogram()\n\n\n\n\n\nggplot(mpg, aes(x = hwy)) +\n  geom_density()\n\n\n\n\n\n\nFigure 13: 기하: geom_density()\n\n\n\n\n\nggplot(mpg, aes(x = hwy)) +\n  geom_boxplot()\n\n\n\n\n\n\nFigure 14: 기하: geom_boxplot()",
    "crumbs": [
      "R 실습",
      "Lab05: 데이터 시각화하기"
    ]
  },
  {
    "objectID": "lab_05.html#다른-레이어",
    "href": "lab_05.html#다른-레이어",
    "title": "Lab05: 데이터 시각화하기",
    "section": "\n2 다른 레이어",
    "text": "2 다른 레이어\n\n2.1 스케일\n스케일(scales)은 심미성이 구체적으로 어떻게 구현될지를 결정한다. 예를 들어 color 심미성이 적용되었다 하더라도 어떤 색상이 선정되어 어떻게 배열되는지에 따라 최종 그래프의 모습은 매우 달라질 수 있다. 그래프를 다시 나타낸다. 스케일이 어느 부분에 어떻게 적용되었는지 생각해 본다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() \n\n\n\n\n\n\nFigure 15\n\n\n\n\nFigure 15 은 아래에서 보는 것처럼, ggplot2가 자동적으로 적용한 세 가지의 스케일 설정에 의거해 만들어진 것이다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  scale_x_continuous() +\n  scale_y_continuous() +\n  scale_color_discrete()\n\n수정하여 다음과 같이 적용할 수 있다. scale 함수의 아규먼트가 어떤 역할을 하는지 생각해 본다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  scale_x_continuous(labels = NULL) +\n  scale_y_continuous(breaks = seq(15, 40, by = 5)) +\n  scale_color_brewer(palette = \"Set1\", labels = c(\"4\" = \"4-wheel\", \"f\" = \"front\", \"r\" = \"rear\"))\n\n\n\n\n\n\nFigure 16\n\n\n\n\nscale_color_brewer() 함수는 ColorBrewer 컬러 스케일을 사용한 것인데 익히고 있으면 많은 도움이 된다. 살펴보면 양적인 변수에 적용하기 좋은 팔레트가 있고, 질적인 변수에 적용하기 좋은 팔레트도 있다. 한번 마음에 드는 팔레트를 골라보자.\n\npar(mar=c(0.1, 3, 0.1, 1))\ndisplay.brewer.all()\n\n\n\n\n\n\n\n\n\n\n\n\n\n직접 색상 지정하는 방법\n\n\n\n\n\n한편, 내가 원하는 색상을 골라 직접 지정하는 방법도 있다. scale_color_brewer() 대신 scale_color_manual() 함수를 사용하면 된다. 또한 RGB 색상에 대한 html 코드를 사용해도 되고, R에서 부여한 657개의 이름 중에서 골라 사용해도 된다. 색상 이름 및 html 코드는 다음 사이트를 참고하라.\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  scale_x_continuous(labels = NULL) +\n  scale_y_continuous(breaks = seq(15, 40, by = 5)) +\n  scale_color_manual(values = c(\"sienna1\", \"slateblue4\", \"#698B22\"))\n\n\n\n\n\n\n\n\n\n\n\n2.2 패싯\n패싯(facets) 레이어는 다면생성(faceting) 과정을 통해 하나의 플롯을 여러개의 하위 플롯으로 쪼갬으로서 생성된다.\n\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point() + \n  facet_wrap(~cyl)\n\n\n\n\n\n\nFigure 17: 패싯: facet_wrap()\n\n\n\n\n두 개의 변수에 의거해 패싯을 생성할 수도 있다.\n\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point() + \n  facet_grid(drv ~ cyl)\n\n\n\n\n\n\nFigure 18: 패싯: facet_grid()\n\n\n\n\n\n2.3 통계적 변환\n어떤 시각화 과정은 필연적으로 통계적 변환(statistical transformation)을 수반한다.\n\nggplot(diamonds, aes(x = cut)) + \n  geom_bar()\n\n\n\n\n\n\nFigure 19: 통계적 변환: geom_bar()\n\n\n\n\nafter_stat()이라고 하는 도우미 함수를 사용하면, 이 그래프를 절대 빈도가 아닌 상대 빈도 그래프로 변환할 수 있다. 이 역시 통계적 변환 과정이 숨어 있는 것이다.\n\nggplot(diamonds, aes(x = cut, y = after_stat(prop), group = 1)) + \n  geom_bar()\n\n\n\n\n\n\nFigure 20: 통계적 변환: geom_bar()\n\n\n\n\n\n\n\n\n\n\ngeom_bar() vs. geom_col()\n\n\n\n\n\ngeom_bar() 함수는 자동으로 통계적 변환을 한 후 결과를 반환한다. 그래서 y축을 지정하지 않아도 된다. 반면 geom_col() 함수는 마찬가지로 막대그래프이지만, x축과 그에 상응하는 y축의 값을 바탕으로 그래프를 생성한다. 아래의 두 코드를 살펴보고 결과를 비교해보자. geom_bar()의 통계적 변환이 무엇을 한 것인지, 두 함수의 차이가 무엇이지 이해할 수 있을 것이다. 참고로 두 번째 코드는 지난 실습 때 다룬 count() 함수를 활용한 것이다. 다른 코드이지만 동일한 결과가 출력됨됨을 알 수 있다.\n\ndiamonds |&gt; \n  ggplot(aes(x = cut)) +\n  geom_bar()\n\n\n\n\n\n\n\n\ndiamonds |&gt;\n  count(cut) |&gt; \n  ggplot(aes(x = cut, y = n)) +\n  geom_col()\n\n\n\n\n\n\n\n\n\n\n막대 그래프에 심미성을 가미하고, position 아규먼트를 통한 위치 조정(position adjustment)을 시도한다.\n\nggplot(mpg, aes(x = drv, fill = class)) + \n  geom_bar()\n\n\n\n\n\n\nFigure 21: position: stack\n\n\n\n\n기하 객체에 색상을 지정하고 싶을 때, 0차원(point)과 1차원(line) 객체에는 color라는 심미성을 적용하지만, 막대 그래프와 같은 2차원(area) 객체에는 fill이라는 심미성을 적용한다. 자주 혼돈이 되는 부분이다.\n위치 조정을 위해 position 아규먼트를 사용하는데, 네 가지 옵션이 있다.\n\nposition = \"stack\"\nposition = \"identity\"\nposition = \"dodge\"\nposition = \"fill\"\n\nFigure 21 에는 디폴트로 position = \"stack\"이 적용된 것이다. Figure 22 는 position = \"dodge\"를 적용한 것이다 . 나머지 옵션도 적용해보고 차이가 무엇인지 알아본다.\n\nggplot(mpg, aes(x = drv, fill = class)) + \n  geom_bar(position = \"dodge\")\n\n\n\n\n\n\nFigure 22: position: dodge\n\n\n\n\n\n\n\n\n\n\nposition 아규먼트의 종류와 차이\n\n\n\n\n\nposition 아규먼트에 따른 차이는 아래의 그래프가 잘 보여준다. 아래에서 배울(운) patchwork도 활용했다.\n\ng1 &lt;- ggplot(mpg, aes(x = drv, fill = class)) + \n  geom_bar(position = \"stack\") +\n  labs(title = \"'stack' graph\")\n\ng2 &lt;- ggplot(mpg, aes(x = drv, fill = class)) + \n  geom_bar(position = \"dodge\") +\n  labs(title = \"'dodge' graph\")\n\ng3 &lt;- ggplot(mpg, aes(x = drv, fill = class)) + \n  geom_bar(position = \"fill\") +\n  labs(title = \"'fill' graph\")\n\ng4 &lt;- ggplot(mpg, aes(x = drv, fill = class)) + \n  geom_bar(position = \"identity\") +\n  labs(title = \"'identity' graph\")\n\ng1+g2+g3+g4 +\n  plot_annotation(\n    title = \"How does position argument work?\",\n    subtitle = \"Graph differences by position argument\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n2.4 좌표\n좌표(coordinates) 레이어 혹은 좌표계(coordinate systems)는 그래픽 요소들의 위치 결정에 기준이 되는 준거체계이다. 특히 두 가지가 함수가 유용하다. coord_flip() 함수는 축을 전환한다.\n\nggplot(mpg, aes(x = drv, fill = class)) + \n  geom_bar(position = \"fill\") +\n  coord_flip()\n\n\n\n\n\n\nFigure 23: coord_clip() 함수\n\n\n\n\ncoord_fixed() 함수는 두 축의 스케일을 절대화하여 동일하게 적용한다. 아규먼트로 x축 한 단위 대비 y축 한 단위의 비(y/x)를 받으며, 생략할 경우 디폴트로 1을 지정한다. 무슨 의미인지 알아본다.\n\nggplot(mpg, aes(cty, hwy)) +\n  geom_point() +\n  coord_fixed()\n\n\n\n\n\n\nFigure 24: coord_fixed() 함수\n\n\n\n\n\n\n\n\n\n\n왜 coord_fixed() 함수를 사용할까?\n\n\n\n\n\ncoord_fixed()를 사용하지 않아도 ggplot은 적당한 비율을 찾아 그래프를 그려준다. 그러나 간혹 사용자가 원하는 가로-세로 비율이 있을 때가 있다. 예를 들어, 우리나라가 동고서저의 지형임을 보여주는 그래프를 그려보자.\n\n# 가상 데이터\ndata &lt;- tibble(x=seq(0, 170, by=10),\n               y=c(10, 62, 108, 162, 245, 330, 469, 608, 780, 942,\n                   1125, 1307, 1500, 1707, 1324, 849, 394, 0))\n\n\n# 비율 지정 안하면?\nggplot(data, aes(x=x, y=y)) +\n  geom_point()+\n  geom_line()+\n  labs(x=\"서울-강릉(km)\", y=\"고도(m)\")\n\n\n\n\n\n\n\n비율을 지정하지 않으니 조금 이상하다. 시각적 효과를 위해서, 가로 한 단위와 세로 한 단위의 비율을 적절히 맞춰보자.\n\n# 적정 비율 지정하기\nggplot(data, aes(x=x, y=y)) +\n  geom_point()+\n  geom_line()+\n  labs(x=\"서울-강릉(km)\", y=\"고도(m)\") +\n  coord_fixed(ratio = 0.02)\n\n\n\n\n\n\n\n아까보다 조금 더 가독성이 좋아짐을 확인할 수 있다.\n\n\n\n\n2.5 테마\n디폴트인 회색빛 배경이 마음에 들지 않았다면 Figure 25 처럼 흑백 테마(theme_bw())를 적용할 수도 있다. 다른 테마도 적용해 보고 그 차이를 알아본다.\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = class)) +\n  geom_smooth(se = FALSE) +\n  theme_bw()\n\n\n\n\n\n\nFigure 25: theme_bw() 함수\n\n\n\n\n이렇게 한꺼번에 그래프의 외관을 바꿀 수도 있지만 theme() 함수를 통해 그래프의 개별 요소 하나씩을 모두 수정할 수 있다. 어떤 요소를 바꿀 수 있는지 다음을 참고한다.\n\nhttps://ggplot2.tidyverse.org/reference/theme.html\n\nFigure 26 는 몇 가지 요소를 수정한 사례이다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  labs(\n    title = \"Larger engine sizes tend to have lower fuel economy\",\n    caption = \"Source: https://fueleconomy.gov.\"\n  ) +\n  theme(\n    legend.position = c(0.6, 0.7),\n    legend.direction = \"horizontal\",\n    plot.title = element_text(face = \"bold\"),\n    plot.title.position = \"plot\",\n    plot.caption.position = \"plot\",\n    plot.caption = element_text(hjust = 0)\n  )\n\n\n\n\n\n\nFigure 26: 개별 요소의 수정: theme() 함수",
    "crumbs": [
      "R 실습",
      "Lab05: 데이터 시각화하기"
    ]
  },
  {
    "objectID": "lab_05.html#기타-사항",
    "href": "lab_05.html#기타-사항",
    "title": "Lab05: 데이터 시각화하기",
    "section": "\n3 기타 사항",
    "text": "3 기타 사항\n\n3.1 라벨과 주석\nlab() 함수를 활용하면 그래프의 다양한 종류의 라벨을 설정할 수 있다.\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = class)) +\n  geom_smooth(se = FALSE) +\n  labs(\n    x = \"Engine displacement (L)\",\n    y = \"Highway fuel economy (mpg)\",\n    color = \"Car type\",\n    title = \"Fuel efficiency generally decreases with engine size\",\n    subtitle = \"Two seaters (sports cars) are an exception because of their light weight\",\n    caption = \"Data from fueleconomy.gov\"\n  )\n\n\n\n\n\n\nFigure 27: 라벨링\n\n\n\n\n기하 함수인 geom_text() 혹은 geom_label()를 통해 그래프 속에 텍스트를 삽입할 수 있다. 주석이 겹치는 것을 방지하기 위해 ggrepel 패키지가 유용하게 사용될 수 있다.\n\nlibrary(ggrepel)\n\n\nggplot(mpg, aes(displ, hwy)) + \n  geom_point(colour = \"red\") +\n  geom_label_repel(data = mpg |&gt; slice_sample(prop = 0.1), aes(label = class))\n\n\n\n\n\n\n\n\n3.2 레이아웃\n레이아웃(layout)은 복수의 그래프를 적절히 배치하여 하나의 그래픽으로 융합하는 과정을 의미한다. 수 많은 ggplot2의 확장 패키지(ggplot2 extensions) 중 하나이 patchwork 패키지를 활용할 수 있다.\n\np1 &lt;- ggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point() + \n  labs(title = \"Plot 1\")\np2 &lt;- ggplot(mpg, aes(x = drv, y = hwy)) + \n  geom_boxplot() + \n  labs(title = \"Plot 2\")\np1 + p2\n\n\n\n\n\n\nFigure 28: 레이아웃: patchwork 패키지\n\n\n\n\n\n\n\n\n\n\npatchwork() 더 살펴보기\n\n\n\n\n\npatchwork() 패키지는 그래프의 배치를 적용하는데 매우 유용하다. 좌우배치를 하되 자동으로 줄넘김을 원한다면 ‘A+B’, 무조건 좌우배치를 원할 때는 ‘A|B’, 상하배치를 원하다면 ’A/B’의 형식을 사용하면 된다. 매우 직관적이다. 위에서 position 아규먼트를 공부할 때 사용한 코드를 재사용해보자.\n\ng1+g2+g3+g4\n\n\n\n\n\n\n\n\n(g1+g3+g4)/g2\n\n\n\n\n\n\n\n\n\n\n\n3.3 그래프의 저장\n두 가지 방식이 있다.\n첫 번째 방식은 Output 창의 Plots 탭에 있는 Export 버을 이용하는 것이다. 다양한 그래픽 포멧 뿐만 아니라 pdf 형식으로도 저장할 수 있다.\n두 번째 방식은 ggplot2 의 ggsave() 함수를 이용하는 것이다. 결과물의 폰트 크기, 가로세로비, 해상도 등을 종합적으로 고려하여 최적의 세팅값을 찾아야 한다. 자신의 디바이스에 따라 동일한 세팅값이 다른 결과를 산출할 수도 있다.\n\nmy_plot &lt;- ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  labs(\n    title = \"Larger engine sizes tend to have lower fuel economy\",\n    caption = \"Source: https://fueleconomy.gov.\"\n  ) +\n  theme(\n    legend.position = c(0.6, 0.7),\n    legend.direction = \"horizontal\",\n    plot.title = element_text(face = \"bold\"),\n    plot.title.position = \"plot\",\n    plot.caption.position = \"plot\",\n    plot.caption = element_text(hjust = 0)\n  )\nggsave(filename = \"my_plot.png\", plot = my_plot, width = 8, height = 8 * 0.618, dpi = 600)",
    "crumbs": [
      "R 실습",
      "Lab05: 데이터 시각화하기"
    ]
  },
  {
    "objectID": "lab_03.html",
    "href": "lab_03.html",
    "title": "Lab03: 데이터 불러오기와 정리하기",
    "section": "",
    "text": "티블(tibble)에 대해 이해할 수 있다.\n다양한 형식의 데이터를 원하는 형태로 불러올 수 있다. (데이터 불러오기)\n데이터를 늘이고, 넓히고, 서로 결합할 수 있다. (데이터 정리하기)",
    "crumbs": [
      "R 실습",
      "Lab03: 데이터 불러오기와 정리하기"
    ]
  },
  {
    "objectID": "lab_03.html#실습의-목표",
    "href": "lab_03.html#실습의-목표",
    "title": "Lab03: 데이터 불러오기와 정리하기",
    "section": "",
    "text": "티블(tibble)에 대해 이해할 수 있다.\n다양한 형식의 데이터를 원하는 형태로 불러올 수 있다. (데이터 불러오기)\n데이터를 늘이고, 넓히고, 서로 결합할 수 있다. (데이터 정리하기)",
    "crumbs": [
      "R 실습",
      "Lab03: 데이터 불러오기와 정리하기"
    ]
  },
  {
    "objectID": "lab_03.html#티블tibble",
    "href": "lab_03.html#티블tibble",
    "title": "Lab03: 데이터 불러오기와 정리하기",
    "section": "\n1 티블(tibble)",
    "text": "1 티블(tibble)\n실습을 시작하기에 앞서 tidyverse 패키지를 불러오자. 설치는 이미 지난 시간에 했기 때문에 오늘은 library()함수를 통해 패키지를 불러오기만 하면 된다.\n\nlibrary(tidyverse)\n\n\n\n\n\n\n\nImportant\n\n\n\n왼쪽 위 Editor 창에서 코드를 실행하기 위해서는 그냥 enter가 아니라 ctrl+enter(Mac은 cmd+enter)를 눌러야 한다.\n\n\n\n1.1 티블 생성하기\n\n1.1.1 기존 데이터를 티블 포맷으로 변환하기\nBase R에 포함되어 있는 iris라는 데이터 프레임을 사용한다. 우선 지난 시간에 배운 파이프 연산자(pipe operator)를 가지고 iris 데이터를 살펴보자.\n\niris |&gt; \n  glimpse()  \n\nRows: 150\nColumns: 5\n$ Sepal.Length &lt;dbl&gt; 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.…\n$ Sepal.Width  &lt;dbl&gt; 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.…\n$ Petal.Length &lt;dbl&gt; 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.…\n$ Petal.Width  &lt;dbl&gt; 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.…\n$ Species      &lt;fct&gt; setosa, setosa, setosa, setosa, setosa, setosa, setosa, s…\n\n\nclass() 함수를 통해 iris 데이터의 형식이 data.frame인 것을 확인할 수 있다.\n\nclass(iris)\n\n[1] \"data.frame\"\n\n\nas_tibble() 함수를 이용하여 tibble 객체로 전환한다. 그러면 data.frame 객체가 tibble 객체로 전환된 것을 알 수 있다.\n\niris_tbl &lt;- iris |&gt; \n  as_tibble() \nclass(iris_tbl)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n1.1.2 티블 객체를 직접 생성하기\ntibble 객체를 직접 생성하는 방식은 두 가지로 나뉜다.\n\n열-단위 방식(보다 일반적): 우선 열-벡터를 만들고 그것을 결합해 최종적인 tibble 객체를 만든다. tibble() 함수를 이용한다.\n\n\n# 열-벡터를 만들고 이들을 결합하여 최종적인 tibble 객체 생성\ntibble(\n  x = c(1, 2, 5), \n  y = c(\"h\", \"m\", \"g\"),\n  z = c(0.08, 0.83, 0.60)\n)\n\n# A tibble: 3 × 3\n      x y         z\n  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;\n1     1 h      0.08\n2     2 m      0.83\n3     5 g      0.6 \n\n\n\n# 수식 등을 활용해서도 tibble 객체를 생성할 수 있다.\ntibble(\n  x = 1:5, \n  y = 1, \n  z = x ^ 2 + y\n)\n\n# A tibble: 5 × 3\n      x     y     z\n  &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     1     2\n2     2     1     5\n3     3     1    10\n4     4     1    17\n5     5     1    26\n\n\n\n행-단위 방식: 우선 행-벡터를 만들고 그것을 결합해 최종적인 tibble 객체를 만든다. tribble() 함수를 이용한다. tribble은 전치티블(transposed tibble)의 약자이다.\n\n\n# 행-벡터를 만들고 이들을 결합하여 최종적인 tibble 객체 생성\ntribble(\n  ~x, ~y, ~z,\n  1, \"h\", 0.08,\n  2, \"m\", 0.83,\n  5, \"g\", 0.60\n)\n\n# A tibble: 3 × 3\n      x y         z\n  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;\n1     1 h      0.08\n2     2 m      0.83\n3     5 g      0.6",
    "crumbs": [
      "R 실습",
      "Lab03: 데이터 불러오기와 정리하기"
    ]
  },
  {
    "objectID": "lab_03.html#데이터-불러오기",
    "href": "lab_03.html#데이터-불러오기",
    "title": "Lab03: 데이터 불러오기와 정리하기",
    "section": "\n2 데이터 불러오기",
    "text": "2 데이터 불러오기\n\n2.1 readr 패키지\n\n2.1.1 파일 형식\nreadr 패키지는 다양한 함수를 이용해 다양한 형식의 데이터를 불러올 수 있게 도와준다.\n\nread_csv(): 콤마분리(comma-separated values, CSV) 형식의 파일\nread_csv2(): 세미콜론분리(semicolon-separated) 형식의 파일\nread_tsv(): 탭구분(tab-delimited) 형식의 파일\nread_delim(): 여타의 구분 형식의 파일\nread_fwf(): 고정폭(fixed-width) 형식의 파일\nread_table(): 공백구분 형식의 파일\nread_log(): 아파치 형식(Apache-style)의 로그 파일\n\n2.1.2 read_csv() 함수의 활용\n지난번 실습에서 사용한 데이터를 면밀히 살펴본다.\n\nstudents &lt;- read_csv(\"https://pos.it/r4ds-students-csv\")\nstudents\n\n# A tibble: 6 × 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\n다음의 몇 가지 점이 불만족스럽다.\n\n변수명: 특히 Student ID와 Full Name 변수명은 규칙에 어긋난다. 변수명 속에 공란이 있으면 좋지 않다. 이런 이름을 비구문명(non-syntactic name)이라고 하고, ``로 둘러싸여 표시된다. 나중에 다른 분석을 할 때 문제를 일으킬 수 있기 때문에 바꿔주는 것이 좋다.\n변수 형식: mealPlan은 문자형(chr)이 아니라 팩트형(fct)이, AGE는 문자형(chr)이 아니라 수치형(dbl)이 적절하다.\n결측치(NA): favourite.food의 ’N/A’는 형식에 맞지 않아 결측치가 아니라 문자로 취급된다. 따라서 ’N/A’가 결측치임을 알려주어야 한다.\n\n\nstudents &lt;- read_csv(\n  \"https://pos.it/r4ds-students-csv\", \n  skip = 1, # 첫 행을 건너뛰기\n  col_names = c(\"student_id\", \"full_name\", \"favorite_food\", \"meal_plan\", \"age\"), # 새로운 변수명 지정\n  col_types = cols( \n    meal_plan = col_factor(),\n    age = col_number()), # 변수별 타입 지정\n  na = \"N/A\" # 문자 \"N/A\"를 결측치 NA로 수정\n  )\nstudents\n\n# A tibble: 6 × 5\n  student_id full_name        favorite_food      meal_plan             age\n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;fct&gt;               &lt;dbl&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only              4\n2          2 Barclay Lynn     French fries       Lunch only              5\n3          3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch     7\n4          4 Leon Rossini     Anchovies          Lunch only             NA\n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch    NA\n6          6 Güvenç Attila    Ice cream          Lunch only              6\n\n\n\n2.2 엑셀 파일\n\n2.2.1 readxl 패키지\n가장 널리 사용되는 스프레드시트(spreadsheet) 형식인 엑셀 파일을 불러들이기 위해서는 readxl이라는 패키지가 필요하다. tidyverse의 핵심 패키지는 아니지만 일종의 친척 패키지라 할 수는 있다. tidyverse에 포함되어 있지 않기 때문에 따로 인스톨하고 library() 함수를 통해 불러와야 한다.\n\nlibrary(readxl)\n\n가장 널리 사용되는 명령어는 다음의 세 가지이다.\n\nread_xls(): xls 포맷의 엑셀 파일 불러오기\nread_xlsx(): xlsx 포맷의 엑셀 파일 불러오기\nread_excel(): xls, xlsx 포맷의 엑셀 파일 불러오기\n\n2.2.2 read_excel() 함수의 활용\nWorld Population Prospects 2022 데이터를 직접 다운받아 실습을 진행하고자 한다. 이 데이터셋은 매우 중요하다. 다음의 절차에 따라 해당 엑셀 파일을 다운로드한다.\n\nWPP 웹사이트(https://population.un.org/wpp/)에 접속한다.\nDownload Data Files를 클릭한다.\n\n\n\n다음의 파일을 클릭한다: Compact (most used: estimates and medium projections) (XLSX, 24.07 MB)\n\n\n\n엑셀 파일(WPP2022_GEN_F01_DEMOGRAPHIC_INDICATORS_COMPACT_REV1)을 다운로드하여 자신의 프로젝트 폴더에 저장한다. 프로젝트 폴더에 저장하지 않으면 따로 경로를 설정해주어야 한다.\n\nR 바깥에서 다운로드한 파일을 열어 어떠한 정보가 어떠한 방식으로 수록되어 있는지 살펴본다. 데이터 불러오기를 위해 다음의 네 가지 사항에 유의해야 함을 이해한다.\n\n16번 행까지는 불필요한 영역이다.\n17번 행을 변수명으로 사용할 경우 많은 문제점이 발생한다.\n결측치는 공란이거나 ‘…’ 기호로 표시되어 있다.\n첫 번째 워킹시트(Estimates)에는 1950~2021의 데이터가, 두 번째 워킹시트(Medium variant)에는 2022~2100년의 데이터가 수록되어 있다. 나중에 결합해야한다.\n\n우선 엑셀 파일을 그대로 불러와 본다.\n\nread_excel(\n  \"WPP2022_GEN_F01_DEMOGRAPHIC_INDICATORS_COMPACT_REV1.xlsx\", \n  sheet = \"Estimates\" \n  )\n\n# A tibble: 20,608 × 65\n   ...1  ...2  ...3  ...4  `United Nations`  ...6  ...7  ...8  ...9  ...10 ...11\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  Population Divis… &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 2 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  Department of Ec… &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 3 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;              &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 4 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  World Population… &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 5 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  File GEN/01/REV1… &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 6 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  Estimates, 1950 … &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 7 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  POP/DB/WPP/Rev.2… &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 8 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  © July 2022 by U… &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 9 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  Suggested citati… &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n10 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;              &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n# ℹ 20,598 more rows\n# ℹ 54 more variables: ...12 &lt;chr&gt;, ...13 &lt;chr&gt;, ...14 &lt;chr&gt;, ...15 &lt;chr&gt;,\n#   ...16 &lt;chr&gt;, ...17 &lt;chr&gt;, ...18 &lt;chr&gt;, ...19 &lt;chr&gt;, ...20 &lt;chr&gt;,\n#   ...21 &lt;chr&gt;, ...22 &lt;chr&gt;, ...23 &lt;chr&gt;, ...24 &lt;chr&gt;, ...25 &lt;chr&gt;,\n#   ...26 &lt;chr&gt;, ...27 &lt;chr&gt;, ...28 &lt;chr&gt;, ...29 &lt;chr&gt;, ...30 &lt;chr&gt;,\n#   ...31 &lt;chr&gt;, ...32 &lt;chr&gt;, ...33 &lt;chr&gt;, ...34 &lt;chr&gt;, ...35 &lt;chr&gt;,\n#   ...36 &lt;chr&gt;, ...37 &lt;chr&gt;, ...38 &lt;chr&gt;, ...39 &lt;chr&gt;, ...40 &lt;chr&gt;, …\n\n\n끔찍할 것이다. 아래의 과정을 거쳐 사용할 수 있는 데이터로 바꾸어 불러온다.\n우선 새로운 변수명들을 하나의 벡터로 만든다.\n\n# 새롭게 사용될 변수명 지정\nnew_names &lt;- c(\"index\", \"variant\", \"region_name\", \"notes\", \"location_code\", \n                \"ISO3\", \"ISO2\", \"SDMX\", \"type\", \"parent_code\", \"year\", \"pop_jan_total\", \n                \"pop_jul_total\", \"pop_jul_male\", \"pop_jul_female\", \"pop_den\", \"sex_ratio\", \n                \"median_age\", \"natural_change\", \"RNC\", \"pop_change\", \"PGR\", \n                \"dubling_time\", \"births\", \"births_by_f1519\", \"CBR\", \"TFR\", \"NRR\", \n                \"mean_age_childbearing\", \"sex_ratio_birth\", \"deaths_total\", \n                \"deaths_male\", \"deaths_female\", \"CDR\", \"life_exp_total\", \n                \"life_exp_male\", \"life_exp_female\", \"life_exp_15_total\", \n                \"life_exp_15_male\", \"life_exp_15_female\", \"life_exp_65_total\", \n                \"life_exp_65_male\", \"life_exp_65_female\", \"life_exp_80_total\", \n                \"life_exp_80_male\", \"life_exp_80_female\", \"infant_deaths\", \n                \"IMR\", \"live_births\", \"under_five_deaths\", \"mort_under_five\", \n                \"mort_bf_40_total\", \"mort_bf_40_male\", \"mort_bf_40_female\", \"mort_bf_60_total\", \n                \"mort_bf_60_male\", \"mort_bf_60_female\", \"mort_bt_1550_total\", \n                \"mort_bt_1550_male\", \"mort_bt_1550_female\", \"mort_bt_1560_total\", \n                \"mort_bt_1560_male\", \"mort_bt_1560_female\", \"net_migrants\", \"NMR\")\n\n앞에서 했던 과정과 유사하게 필요한 내용들을 수정하여 엑셀 파일을 불러온다.\n\n# Estimates 시트 정리\nwpp_2022_estimates &lt;- read_excel(\n  \"WPP2022_GEN_F01_DEMOGRAPHIC_INDICATORS_COMPACT_REV1.xlsx\",\n  sheet = \"Estimates\",\n  skip = 17, \n  col_names = new_names,\n  col_types = c(rep(\"guess\", 3), \"text\", \"guess\", rep(\"text\", 2), rep(\"guess\", 58)),\n  na = c(\"...\", \"\")\n  )\n\n# Medium variant 시트 정리\nwpp_2022_future &lt;- read_excel(\n  \"WPP2022_GEN_F01_DEMOGRAPHIC_INDICATORS_COMPACT_REV1.xlsx\",\n  sheet = \"Medium variant\",\n  skip = 17, \n  col_names = new_names,\n  col_types = c(rep(\"guess\", 3), \"text\", \"guess\", rep(\"text\", 2), rep(\"guess\", 58)),\n  na = c(\"...\", \"\")\n)\n\n# 행 단위로 결합\nwpp_2022 &lt;- bind_rows(wpp_2022_estimates, wpp_2022_future)\n\n# 새 창에서 보기\nView(wpp_2022)\n\n\n\n\n\n\n\nrep() 함수\n\n\n\n\n\nrep()함수는 Basic R 함수로 값들을 반복하는 데 사용된다.\n\n# 벡터 전체를 반복\nrep(c(\"A\", \"B\", \"C\"), 3)\n\n[1] \"A\" \"B\" \"C\" \"A\" \"B\" \"C\" \"A\" \"B\" \"C\"\n\nrep(c(\"A\", \"B\", \"C\"), times = 3)\n\n[1] \"A\" \"B\" \"C\" \"A\" \"B\" \"C\" \"A\" \"B\" \"C\"\n\n\n\n# 벡터의 각 요소들을 반복\nrep(c(\"A\", \"B\", \"C\"), each = 2)\n\n[1] \"A\" \"A\" \"B\" \"B\" \"C\" \"C\"\n\n\n\n# 벡터의 각 요소들을 반복하고 그 전체를 다시 반복\nrep(c(\"A\", \"B\", \"C\"), each = 2, times = 2)\n\n [1] \"A\" \"A\" \"B\" \"B\" \"C\" \"C\" \"A\" \"A\" \"B\" \"B\" \"C\" \"C\"\n\n\n\n\n\n해야 할 일이 한가지 더 남아있다. 많은 변수 중에 데이터 탐색이라는 측면에서 가장 중요한 것은 type 변수이다. 다음을 통해 distinct()함수를 통해 type 변수에 어떤 내용이 담겨 있는지 확인한다.\n\nwpp_2022 |&gt; \n  distinct(type) # type 변수에 어떤 값들이 들어가 있는지 확인\n\n# A tibble: 9 × 1\n  type             \n  &lt;chr&gt;            \n1 World            \n2 Label/Separator  \n3 SDG region       \n4 Development Group\n5 Special other    \n6 Income Group     \n7 Region           \n8 Subregion        \n9 Country/Area     \n\n\ndistinct() 함수의 결과를 통해 세계 전체(World), 국가군(SDG region, Region 등), 국가(Country/Area) 등으로 데이터를 활용할 수 있다는 것을 인지한다. 그런데, “Label/Separator”는 엑셀 내에서 분할선의 역할만 하는 것으로, 무의미한 값이다. 따라서 이를 제거한다.\n\nwpp_2022 &lt;- wpp_2022 |&gt; \n  filter(type != \"Label/Separator\") # type 변수의 값이 \"Label/Separator\"가 아닌 행만 추출\n\n나중에 사용하기 위해, writexl 패키지의 write_xlsx() 함수를 이용하여 엑셀 파일로 저장한다.\n\nlibrary(writexl)\nwrite_xlsx(wpp_2022, \"wpp_2022.xlsx\")\n\n그런데, 저장된 파일을 read_excel() 함수로 다시 불러 들이면 컬럼 형식에 대한 정보가 사라져 버리는 등의 에러가 발생한다. 이런 점 때문에 다음과 같은 대안이 존재한다. readr 패키지의 write_rds() 함수로 저장하고, 다시 read_rds() 함수로 불러들이면 정확히 동일한 것을 얻을 수 있다.\n\nwrite_rds(wpp_2022, \"wpp_2022.rds\")\nread_rds(\"wpp_2022.rds\")\n\n# A tibble: 43,186 × 65\n   index variant   region_name notes location_code ISO3  ISO2   SDMX type \n   &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;       &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;\n 1     1 Estimates WORLD       &lt;NA&gt;            900 &lt;NA&gt;  &lt;NA&gt;      1 World\n 2     2 Estimates WORLD       &lt;NA&gt;            900 &lt;NA&gt;  &lt;NA&gt;      1 World\n 3     3 Estimates WORLD       &lt;NA&gt;            900 &lt;NA&gt;  &lt;NA&gt;      1 World\n 4     4 Estimates WORLD       &lt;NA&gt;            900 &lt;NA&gt;  &lt;NA&gt;      1 World\n 5     5 Estimates WORLD       &lt;NA&gt;            900 &lt;NA&gt;  &lt;NA&gt;      1 World\n 6     6 Estimates WORLD       &lt;NA&gt;            900 &lt;NA&gt;  &lt;NA&gt;      1 World\n 7     7 Estimates WORLD       &lt;NA&gt;            900 &lt;NA&gt;  &lt;NA&gt;      1 World\n 8     8 Estimates WORLD       &lt;NA&gt;            900 &lt;NA&gt;  &lt;NA&gt;      1 World\n 9     9 Estimates WORLD       &lt;NA&gt;            900 &lt;NA&gt;  &lt;NA&gt;      1 World\n10    10 Estimates WORLD       &lt;NA&gt;            900 &lt;NA&gt;  &lt;NA&gt;      1 World\n# ℹ 43,176 more rows\n# ℹ 56 more variables: parent_code &lt;dbl&gt;, year &lt;dbl&gt;, pop_jan_total &lt;dbl&gt;,\n#   pop_jul_total &lt;dbl&gt;, pop_jul_male &lt;dbl&gt;, pop_jul_female &lt;dbl&gt;,\n#   pop_den &lt;dbl&gt;, sex_ratio &lt;dbl&gt;, median_age &lt;dbl&gt;, natural_change &lt;dbl&gt;,\n#   RNC &lt;dbl&gt;, pop_change &lt;dbl&gt;, PGR &lt;dbl&gt;, dubling_time &lt;dbl&gt;, births &lt;dbl&gt;,\n#   births_by_f1519 &lt;dbl&gt;, CBR &lt;dbl&gt;, TFR &lt;dbl&gt;, NRR &lt;dbl&gt;,\n#   mean_age_childbearing &lt;dbl&gt;, sex_ratio_birth &lt;dbl&gt;, deaths_total &lt;dbl&gt;, …\n\n\n\n\n\n\n\n\nTip\n\n\n\n.rds 파일은 R 전용 특수한 형태의 파일로, R에서 사용하기 편리한 구조를 가지고 있다. R에서 작업을 할 경우에는 .rds 파일을 이용하고 R을 사용하지 않는 사람과 파일을 주고 받을 때에는 .csv파일을 이용하면 좋다.",
    "crumbs": [
      "R 실습",
      "Lab03: 데이터 불러오기와 정리하기"
    ]
  },
  {
    "objectID": "lab_03.html#데이터-정리하기",
    "href": "lab_03.html#데이터-정리하기",
    "title": "Lab03: 데이터 불러오기와 정리하기",
    "section": "\n3 데이터 정리하기",
    "text": "3 데이터 정리하기\n여기서는 데이터 늘이기(lengthening data), 데이터 넓히기(widening data), 데이터 결합하기(joining data)를 다룬다.\n\n3.1 데이터 늘이기\n실습을 위해 tidyverse 패키지에 포함되어 있는 who2 데이터를 사용한다. 이것은 WHO(world Health Organization, 세계보건기구)에서 제공한 데이터로서 1980~2013년 전세계 209개국의 결핵 환자수에 대한 데이터이다.\n\nglimpse(who2)\n\nRows: 7,240\nColumns: 58\n$ country    &lt;chr&gt; \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Afghanistan\",…\n$ year       &lt;dbl&gt; 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989,…\n$ sp_m_014   &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_m_1524  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_m_2534  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_m_3544  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_m_4554  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_m_5564  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_m_65    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_f_014   &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_f_1524  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_f_2534  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_f_3544  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_f_4554  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_f_5564  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_f_65    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_m_014   &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_m_1524  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_m_2534  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_m_3544  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_m_4554  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_m_5564  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_m_65    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_f_014   &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_f_1524  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_f_2534  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_f_3544  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_f_4554  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_f_5564  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_f_65    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_m_014   &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_m_1524  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_m_2534  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_m_3544  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_m_4554  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_m_5564  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_m_65    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_f_014   &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_f_1524  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_f_2534  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_f_3544  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_f_4554  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_f_5564  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_f_65    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_m_014  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_m_1524 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_m_2534 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_m_3544 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_m_4554 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_m_5564 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_m_65   &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_f_014  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_f_1524 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_f_2534 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_f_3544 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_f_4554 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_f_5564 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_f_65   &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n\n\ncountry와 year은 분명한 변수이지만 나머지 56개 변수는 무엇인지 알 수 없다. 그런데 잘 살펴보면, 변수명에 어떤 패턴이 있다는 것을 알 수 있다. 모두 세 부분으로 나뉘어져 있는데, 첫 번째 부분은 진단법(sp, rel, ep)과 관련되어 있고, 두 번째 부분은 성(m, f)과 관련되어 있고, 세 번째 부분은 연령(014, 1524, 2534, 3544, 4554, 5564, 65)과 관련되어 있다. 56개 변수의 셀 값은 모두 케이스(환자수)를 의미한다. 이 지저분한 데이터를 pivot_longer() 함수를 이용해 정돈된 데이터로 만들어 본다.\n\nwho2 |&gt; \n  pivot_longer(\n    cols = !c(country, year), # country와 year을 제외한 나머지 변수들을 바꾼다.\n    names_to = c(\"diagnosis\", \"gender\", \"age\"), # 원래 데이터의 변수명들이 들어갈 새로운 변수명 지정\n    names_sep = \"_\", # \"_\"를 기준으로 원래의 변수명을 분할\n    values_to = \"count\" # 원래 데이터의 값들이 들어갈 새로운 변수명 지정\n  )\n\n# A tibble: 405,440 × 6\n   country      year diagnosis gender age   count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt;\n 1 Afghanistan  1980 sp        m      014      NA\n 2 Afghanistan  1980 sp        m      1524     NA\n 3 Afghanistan  1980 sp        m      2534     NA\n 4 Afghanistan  1980 sp        m      3544     NA\n 5 Afghanistan  1980 sp        m      4554     NA\n 6 Afghanistan  1980 sp        m      5564     NA\n 7 Afghanistan  1980 sp        m      65       NA\n 8 Afghanistan  1980 sp        f      014      NA\n 9 Afghanistan  1980 sp        f      1524     NA\n10 Afghanistan  1980 sp        f      2534     NA\n# ℹ 405,430 more rows\n\n\n정돈된 데이터를 만들기 위해 왜 데이터 ’늘이기’를 해야하는지 생각해 보라.\n\n3.2 데이터 넓히기\n실습을 위해 tidyverse 패키지에 포함되어 있는 cms_patient_experience 데이터를 사용한다. 이것은 미국의 Centers of Medicare and Meicaid Services가 제공한 데이터이다.\n\nView(cms_patient_experience)\n\n이 데이터도 정돈된 데이터가 아니다. 자세히 살펴보면 다음과 같은 사실을 알 수 있다.\n\norg_pac_id와 org_nm 변수는 의료조직의 식별자와 이름이다.\n의료조직별로 6개씩의 열을 차지하고 있는데, 6개의 열은 measure_cd와 measure_title에 나타나 있는 것과 같은 6개의 서로 다른 조사 항목을 나타낸다.\n마지막의 prf_rate는 조사 항목별 점수이다.\n\npivot_wider() 함수를 이용하여, 행에는 개별 의료조직이, 열에는 개별 조사 항목이 나타나는 정돈된 데이터를 만들어 본다.\n\ncms_patient_experience |&gt; \n  pivot_wider(\n    names_from = measure_cd, # 원래 데이터의 measure_cd 값들을 변수로 변환\n    values_from = prf_rate # 원래 데이터의 prf_rate 값들을 변수의 값으로 변환\n  )\n\n# A tibble: 500 × 9\n   org_pac_id org_nm           measure_title CAHPS_GRP_1 CAHPS_GRP_2 CAHPS_GRP_3\n   &lt;chr&gt;      &lt;chr&gt;            &lt;chr&gt;               &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 0446157747 USC CARE MEDICA… CAHPS for MI…          63          NA          NA\n 2 0446157747 USC CARE MEDICA… CAHPS for MI…          NA          87          NA\n 3 0446157747 USC CARE MEDICA… CAHPS for MI…          NA          NA          86\n 4 0446157747 USC CARE MEDICA… CAHPS for MI…          NA          NA          NA\n 5 0446157747 USC CARE MEDICA… CAHPS for MI…          NA          NA          NA\n 6 0446157747 USC CARE MEDICA… CAHPS for MI…          NA          NA          NA\n 7 0446162697 ASSOCIATION OF … CAHPS for MI…          59          NA          NA\n 8 0446162697 ASSOCIATION OF … CAHPS for MI…          NA          85          NA\n 9 0446162697 ASSOCIATION OF … CAHPS for MI…          NA          NA          83\n10 0446162697 ASSOCIATION OF … CAHPS for MI…          NA          NA          NA\n# ℹ 490 more rows\n# ℹ 3 more variables: CAHPS_GRP_5 &lt;dbl&gt;, CAHPS_GRP_8 &lt;dbl&gt;, CAHPS_GRP_12 &lt;dbl&gt;\n\n\n지난 시간과 같은 방식으로 데이터 늘이기를 수행했으나 여전히 하나의 의료 조직이 여러 행에 걸쳐 나타나고 있음을 확인할 수 있다. 이를 해결하기 위해 각 행을 고유하게 식별하는 변수를 선택한다. 이 데이터에서는 “org”로 시작하는 변수들이 이에 해당한다.\n\ncms_patient_experience |&gt; \n  pivot_wider(\n    id_cols = starts_with(\"org\"), # 각 행을 고유하게 식별하는 변수 선택\n    names_from = measure_cd,\n    values_from = prf_rate\n  )\n\n# A tibble: 95 × 8\n   org_pac_id org_nm CAHPS_GRP_1 CAHPS_GRP_2 CAHPS_GRP_3 CAHPS_GRP_5 CAHPS_GRP_8\n   &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 0446157747 USC C…          63          87          86          57          85\n 2 0446162697 ASSOC…          59          85          83          63          88\n 3 0547164295 BEAVE…          49          NA          75          44          73\n 4 0749333730 CAPE …          67          84          85          65          82\n 5 0840104360 ALLIA…          66          87          87          64          87\n 6 0840109864 REX H…          73          87          84          67          91\n 7 0840513552 SCL H…          58          83          76          58          78\n 8 0941545784 GRITM…          46          86          81          54          NA\n 9 1052612785 COMMU…          65          84          80          58          87\n10 1254237779 OUR L…          61          NA          NA          65          NA\n# ℹ 85 more rows\n# ℹ 1 more variable: CAHPS_GRP_12 &lt;dbl&gt;\n\n\n이제 어떤 의료조직이 어떤 항목에서 얼마의 점수를 받았는지를 일목요연하게 알아 볼 수 있다. 정돈된 데이터를 만들기 위해 이번에는 왜 데이터 ’넓히기’를 해야하는지 생각해 보라.\n\n3.3 데이터 결합하기\n\n3.3.1 조인(join)의 종류\n여기서는 데이터 프레임을 결합하여 새로운 데이터 프레임을 생성하는 과정에 대해 살펴본다. tidyverse 패키지에 포함되어 있는 dplyr 패키지는 다양한 종류의 조인(join) 함수를 제공한다.\n\nleft_join(): 첫 번째 변수는 그대로 둔 상태에서 두 번째 변수를 결합함으로써 두 번째 변수의 열을 가져옴\ninner_join(): 두 번째 변수는 그대로 둔 상태에서 첫 번째 변수를 결합함으로써 첫 번째 변수의 열을 가져옴\nright_join(): 두 변수 모두에 존재하는 열을 취함\nfull_join(): 최소한 한 변수에 존재하는 열을 모두 취함\nsemi_join(): 첫 번째 변수의 행 중 두 번째 변수에 대응하는 행이 있는 것만 취함\nanti_join(): 첫 번째 변수의 행 중 두 번째 변수에 대응하는 행이 없는 것만 취함\n\n이들 중 left_join()이 가장 많이 사용되기 때문에 그것에 집중한다.\n\n3.3.2 left_join() 함수의 활용\n실습을 위해 nycflights13 패키지의 데이터를 사용한다. 이 패키지에는 다섯 개의 데이터 프레임이 포함되어 있다. 지난 번에는 첫 번째 데이터만 사용했다.\n\nflights: 2013년 NYC를 출발한 모든 항공기\nweather: 공항별 시간별 기상 상황\nplanes: 항공기별 건조 정보\nairports: 공항명과 위치\nairlines: 항공사\n\n그리고 이 6개의 데이터 프레임은 Figure 1 처럼 공통키(common key)를 통해 서로 연결되어 있다.\n\n\n\n\n\nFigure 1: nycflights13 데이터(https://github.com/tidyverse/nycflights13)\n\n\nflights 데이터의 변수가 너무 많기 때문에 조인을 위한 공통키를 중심으로 변수를 줄인다.\n\nlibrary(nycflights13)\n\n\nflights2 &lt;- flights |&gt; \n  select(year, time_hour, origin, dest, tailnum, carrier)\nflights2\n\n# A tibble: 336,776 × 6\n    year time_hour           origin dest  tailnum carrier\n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;  \n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA     \n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA     \n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA     \n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6     \n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL     \n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA     \n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6     \n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV     \n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6     \n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA     \n# ℹ 336,766 more rows\n\n\nflights2 데이터를 중심으로 나머지 4개의 데이터와 조인한다.\n\nairlines\n\n# A tibble: 16 × 2\n   carrier name                       \n   &lt;chr&gt;   &lt;chr&gt;                      \n 1 9E      Endeavor Air Inc.          \n 2 AA      American Airlines Inc.     \n 3 AS      Alaska Airlines Inc.       \n 4 B6      JetBlue Airways            \n 5 DL      Delta Air Lines Inc.       \n 6 EV      ExpressJet Airlines Inc.   \n 7 F9      Frontier Airlines Inc.     \n 8 FL      AirTran Airways Corporation\n 9 HA      Hawaiian Airlines Inc.     \n10 MQ      Envoy Air                  \n11 OO      SkyWest Airlines Inc.      \n12 UA      United Air Lines Inc.      \n13 US      US Airways Inc.            \n14 VX      Virgin America             \n15 WN      Southwest Airlines Co.     \n16 YV      Mesa Airlines Inc.         \n\nflights2 |&gt;\n  left_join(airlines)\n\n# A tibble: 336,776 × 7\n    year time_hour           origin dest  tailnum carrier name                  \n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;                 \n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      United Air Lines Inc. \n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      United Air Lines Inc. \n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      American Airlines Inc.\n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      JetBlue Airways       \n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      Delta Air Lines Inc.  \n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      United Air Lines Inc. \n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6      JetBlue Airways       \n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV      ExpressJet Airlines I…\n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6      JetBlue Airways       \n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA      American Airlines Inc.\n# ℹ 336,766 more rows\n\n\n\nweather\n\n# A tibble: 26,115 × 15\n   origin  year month   day  hour  temp  dewp humid wind_dir wind_speed\n   &lt;chr&gt;  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;\n 1 EWR     2013     1     1     1  39.0  26.1  59.4      270      10.4 \n 2 EWR     2013     1     1     2  39.0  27.0  61.6      250       8.06\n 3 EWR     2013     1     1     3  39.0  28.0  64.4      240      11.5 \n 4 EWR     2013     1     1     4  39.9  28.0  62.2      250      12.7 \n 5 EWR     2013     1     1     5  39.0  28.0  64.4      260      12.7 \n 6 EWR     2013     1     1     6  37.9  28.0  67.2      240      11.5 \n 7 EWR     2013     1     1     7  39.0  28.0  64.4      240      15.0 \n 8 EWR     2013     1     1     8  39.9  28.0  62.2      250      10.4 \n 9 EWR     2013     1     1     9  39.9  28.0  62.2      260      15.0 \n10 EWR     2013     1     1    10  41    28.0  59.6      260      13.8 \n# ℹ 26,105 more rows\n# ℹ 5 more variables: wind_gust &lt;dbl&gt;, precip &lt;dbl&gt;, pressure &lt;dbl&gt;,\n#   visib &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nflights2 |&gt; \n  left_join(weather |&gt; select(origin, time_hour, temp, wind_speed))\n\n# A tibble: 336,776 × 8\n    year time_hour           origin dest  tailnum carrier  temp wind_speed\n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt;\n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA       39.0       12.7\n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA       39.9       15.0\n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA       39.0       15.0\n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6       39.0       15.0\n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL       39.9       16.1\n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA       39.0       12.7\n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6       37.9       11.5\n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV       39.9       16.1\n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6       37.9       13.8\n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA       39.9       16.1\n# ℹ 336,766 more rows\n\n\n\nplanes\n\n# A tibble: 3,322 × 9\n   tailnum  year type              manufacturer model engines seats speed engine\n   &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;             &lt;chr&gt;        &lt;chr&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; \n 1 N10156   2004 Fixed wing multi… EMBRAER      EMB-…       2    55    NA Turbo…\n 2 N102UW   1998 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 3 N103US   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 4 N104UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 5 N10575   2002 Fixed wing multi… EMBRAER      EMB-…       2    55    NA Turbo…\n 6 N105UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 7 N107US   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 8 N108UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 9 N109UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n10 N110UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n# ℹ 3,312 more rows\n\nflights2 |&gt; \n  left_join(planes |&gt; select(tailnum, type, engines, seats))\n\n# A tibble: 336,776 × 9\n    year time_hour           origin dest  tailnum carrier type     engines seats\n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;      &lt;int&gt; &lt;int&gt;\n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      Fixed w…       2   149\n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      Fixed w…       2   149\n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      Fixed w…       2   178\n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      Fixed w…       2   200\n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      Fixed w…       2   178\n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      Fixed w…       2   191\n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6      Fixed w…       2   200\n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV      Fixed w…       2    55\n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6      Fixed w…       2   200\n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA      &lt;NA&gt;          NA    NA\n# ℹ 336,766 more rows\n\n\n\nairports\n\n# A tibble: 1,458 × 8\n   faa   name                             lat    lon   alt    tz dst   tzone    \n   &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    \n 1 04G   Lansdowne Airport               41.1  -80.6  1044    -5 A     America/…\n 2 06A   Moton Field Municipal Airport   32.5  -85.7   264    -6 A     America/…\n 3 06C   Schaumburg Regional             42.0  -88.1   801    -6 A     America/…\n 4 06N   Randall Airport                 41.4  -74.4   523    -5 A     America/…\n 5 09J   Jekyll Island Airport           31.1  -81.4    11    -5 A     America/…\n 6 0A9   Elizabethton Municipal Airport  36.4  -82.2  1593    -5 A     America/…\n 7 0G6   Williams County Airport         41.5  -84.5   730    -5 A     America/…\n 8 0G7   Finger Lakes Regional Airport   42.9  -76.8   492    -5 A     America/…\n 9 0P2   Shoestring Aviation Airfield    39.8  -76.6  1000    -5 U     America/…\n10 0S9   Jefferson County Intl           48.1 -123.    108    -8 A     America/…\n# ℹ 1,448 more rows\n\nflights2 |&gt; \n  left_join(airports, join_by(origin == faa))\n\n# A tibble: 336,776 × 13\n    year time_hour           origin dest  tailnum carrier name         lat   lon\n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;\n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      Newark Li…  40.7 -74.2\n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      La Guardia  40.8 -73.9\n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      John F Ke…  40.6 -73.8\n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      John F Ke…  40.6 -73.8\n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      La Guardia  40.8 -73.9\n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      Newark Li…  40.7 -74.2\n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6      Newark Li…  40.7 -74.2\n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV      La Guardia  40.8 -73.9\n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6      John F Ke…  40.6 -73.8\n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA      La Guardia  40.8 -73.9\n# ℹ 336,766 more rows\n# ℹ 4 more variables: alt &lt;dbl&gt;, tz &lt;dbl&gt;, dst &lt;chr&gt;, tzone &lt;chr&gt;\n\n\nairports의 경우만 왜 join_by()라는 아규먼트가 필요한지 생각해 본다.",
    "crumbs": [
      "R 실습",
      "Lab03: 데이터 불러오기와 정리하기"
    ]
  },
  {
    "objectID": "lab_01.html",
    "href": "lab_01.html",
    "title": "Lab01: R과 RStudio",
    "section": "",
    "text": "R과 R Studio를 설치할 수 있다.\nR Studio의 구조 및 기본 사용법을 이해할 수 있다.\n프로젝트와 스크립트에 대해 이해하고 이를 생성할 수 있다.\n\n\n\n\n\n\n\nR을 시작하기 전 반드시 확인해야 하는 사항\n\n\n\nR은 실행과정에서 폴더 경로에 한글이 포함된 경우 오류가 자주 발생한다. 따라서 사용자 계정 이름이 한국어로 설정되어 있지 않은지 반드시 확인해야 하며, 앞으로 만들 프로젝트 폴더 등도 이름을 모두 영어로 설정하는 것이 좋다.\nWindows: [설정] -&gt; [계정] -&gt; [사용자 정보]로 들어가 볼드체로 된 사용자 계정 이름이 영어인지 확인하기. 사용자 계정이 한국어로 설정되어 있다면 영어로 된 새로운 윈도우 사용자 계정을 만들어야 한다.\nMac: 프로젝트 폴더 이름 설정만 잘 신경쓰면 된다.",
    "crumbs": [
      "R 실습",
      "Lab01: R과 RStudio"
    ]
  },
  {
    "objectID": "lab_01.html#실습의-목표",
    "href": "lab_01.html#실습의-목표",
    "title": "Lab01: R과 RStudio",
    "section": "",
    "text": "R과 R Studio를 설치할 수 있다.\nR Studio의 구조 및 기본 사용법을 이해할 수 있다.\n프로젝트와 스크립트에 대해 이해하고 이를 생성할 수 있다.\n\n\n\n\n\n\n\nR을 시작하기 전 반드시 확인해야 하는 사항\n\n\n\nR은 실행과정에서 폴더 경로에 한글이 포함된 경우 오류가 자주 발생한다. 따라서 사용자 계정 이름이 한국어로 설정되어 있지 않은지 반드시 확인해야 하며, 앞으로 만들 프로젝트 폴더 등도 이름을 모두 영어로 설정하는 것이 좋다.\nWindows: [설정] -&gt; [계정] -&gt; [사용자 정보]로 들어가 볼드체로 된 사용자 계정 이름이 영어인지 확인하기. 사용자 계정이 한국어로 설정되어 있다면 영어로 된 새로운 윈도우 사용자 계정을 만들어야 한다.\nMac: 프로젝트 폴더 이름 설정만 잘 신경쓰면 된다.",
    "crumbs": [
      "R 실습",
      "Lab01: R과 RStudio"
    ]
  },
  {
    "objectID": "lab_01.html#r과-r-studio-설치",
    "href": "lab_01.html#r과-r-studio-설치",
    "title": "Lab01: R과 RStudio",
    "section": "\n1 R과 R Studio 설치",
    "text": "1 R과 R Studio 설치\nR과 R Studio 설치를 위해서 아래의 링크로 이동한다. 해당 사이트는 R Studio를 만든 posit이라는 회사가 관리하는 R Studio Desktop의 다운로드 페이지이다.\n다운로드 링크: https://posit.co/download/rstudio-desktop/\n\n\n\n\n\n\n참고: 회사 이름에 대한 이야기\n\n\n\n\n\n원래는 회사 이름 자체가 R Studio였는데, 2022년에 사명을 posit으로 변경했다. 수석 과학자의 설명에 따르면 R Studio는 R과 파이썬 모두를 지원하는 IDE(Integrated Development Environment, 통합 개발 환경)인데, 이름 때문에 R에만 제한된다는 느낌을 받았다고 한다. 자세한 내용은 링크 참고.\n\n\n\n링크에 접속하면 아래의 Figure 1 과 같이 R과 R studio를 설치할 수 있는 화면이 나타난다.\n\n\n\n\n\nFigure 1: R과 R Studio 다운로드 화면\n\n\n\n1.1 R 설치\n위의 링크를 눌러 들어간 웹사이트에서 왼쪽의 “DOWNLOAD AND INSTALL R”을 클릭하게 되면 CRAN(The Comprehensive R Archive Network) 사이트에 접속할 수 있다. 상단의 다운로드 목록 중 본인의 운영체제에 맞는 R의 최신 버전을 다운로드 받으면 된다. 현재 문서 작성 시점에서 R의 최신 버전은 2024년 2월 29에 배포된 4.3.3이다.\n\n\n\n\n\n\nMac 사용자의 경우\n\n\n\n\n\n\n\n위는 애플 실리콘 Mac(M1~M3), 아래는 Intel Mac 전용\n\n\n\n\n\n\n\n\n\n\nWindows 사용자의 경우\n\n\n\n\n\n\n\nInstall R for the first time 클릭 후 R 다운로드\n\n\n\n\n\n1.2 R Studio 설치\nR Studio를 설치하기 위해 다시 원래의 다운로드 페이지로 돌아와 오른쪽의 “DOWNLOAD R DESKTOP FOR WINDOWS”를 눌러 R Studio를 다운받는다. Mac등 다른 운영체제를 사용하는 사람들은 아래로 스크롤하여 설치 파일을 다운로드 받을 수 있다. 현재 문서 작성 시점 기준 R Studio의 최신 버전은 2024년 1월 29일에 배포된 2023.12.1+402이다.",
    "crumbs": [
      "R 실습",
      "Lab01: R과 RStudio"
    ]
  },
  {
    "objectID": "lab_01.html#r의-구조-및-기본-사용법",
    "href": "lab_01.html#r의-구조-및-기본-사용법",
    "title": "Lab01: R과 RStudio",
    "section": "\n2 R의 구조 및 기본 사용법",
    "text": "2 R의 구조 및 기본 사용법\n\n2.1 창(pane, 패인)\nR Studio를 실행하면 Figure 2 와 같은 화면이 나온다. 화면이 크게 3개의 창으로 구성되어 있음을 알 수 있다.\n\n\n\n\n\nFigure 2: R Studio를 열면 나오는 3개의 창\n\n\n왼편에 가장 크게 나타나 있는 창을 Console 창(pane), 오른쪽 아래의 창을 보통 Output 또는 File 창이라고 부른다. 그리고 오른쪽 위의 창을 보통 Environment 창이라고 부른다.\n\n\n\n\n\n\nNote\n\n\n\n개별 창은 여러 개의 탭(tab)으로 구성되어 있는데, 탭의 기능이 매우 다양하기 때문에 소속 탭의 모든 기능을 포괄하는 일관성 있는 창 이름을 붙이는 것이 매우 어렵다. 예를 들어 Output 창의 경우 Plots와 Viewer 탭은 결과물을 보여주는 것이라 할 수 있지만 나머지 탭은 꼭 그렇지도 않다.\n\n\n\n\n\n\n\n\n참고: Base R의 화면\n\n\n\n\n\n\n\nBase R의 화면. 좌측에 콘솔 창이 있고, 그래프 등을 생성하면 우측에 따로 창이 하나 생성된다. 콘솔 창만을 가지고 R 프로젝트를 수행하는 것은 어려움이 많다.\n\n\n\n\n\n2.2 Console 창에서 놀아보기\n\n2.2.1 프롬프트, 할당, 객체\n콘솔 창에 R 프롬프트인 &gt;가 나타나 있을 것이다. 아래와 같이 숫자 1을 타이핑하고 실행을 위해 [enter] 키를 누른다.\n\n1\n\n[1] 1\n\n\n간단한 연산을 해본다. 사실 R은 기본적으로 계산기이다.\n\n1 + 2\n\n[1] 3\n\n\n이제 할당 연산자(&lt;-)를 활용하여 할당을 해보자.\n\na &lt;- 1\n\n우상의 환경 창을 보면 뭔가 생성된 것을 확인할 수 있을 것이다. a라는 객체가 생성되었으며 그것은 1이라는 값을 품고 있다는 의미이다. 이제 a는 알파벳 소문자가 아니라 1이라는 숫자와 필연적으로 결합해 있는 객체이다. 다음과 같이 하면 이러한 사실을 명확히 확인할 수 있다.\n\na\n\n[1] 1\n\n\n아래와 같이 하면 객체끼리의 연산이 가능하다.\n\nb &lt;- 2\nc &lt;- a + b\nc\n\n[1] 3\n\n\n\n\n\n\n\n\n참고: 할당 연산자로 &lt;-를 사용해야 하는 이유\n\n\n\n\n\n&lt;-를 할당 연산자로 사용하는 데에는 다양한 이유가 있다. 그 중 하나는 =을 사용했을 때 발생할 수 있는 혼란을 방지하기 위함인데, =은 변수 할당 기능 외에도 다른 기능들을 할 수 있기 때문에다. =를 함수 인자 전달에 사용한 아래의 예시를 보자.\n\n# 할당 연산자와 함수 인자 전달에 모두 =를 사용했을 때\nmy_data = c(1, 2, 3, NA, 5)\n\naverage = mean(x = my_data, na.rm = TRUE)\n\naverage\n\n[1] 2.75\n\n\n\n# 할당 연산자에는 &lt;-, 인자 전달에는 =를 사용했을 때\nmy_data &lt;- c(1, 2, 3, NA, 5)\n\naverage &lt;- mean(x = my_data, na.rm = TRUE)\n\naverage\n\n[1] 2.75\n\n\n아래의 예시와 같이 &lt;-와 =를 구분했을 경우에 코드의 가독성이 좋아짐을 확인할 수 있다.\n\n\n\n\n2.2.2 함수\nsum() 함수를 사용하여 동일한 연산을 할 수 있다. sum() 은 R에 기본적으로 내장되어 있는 Base R 함수 중 하나이다.\n\nsum(a, b)\n\n[1] 3\n\n\n\n\n\n\n\n\nImportant\n\n\n\n지금부터 모든 함수명에는 항상 ()를 연결하여 나타낼 것이다. 다른 객체명과의 혼동을 방지하기 위한 것도 있지만, 모든 함수는 () 속에 인풋(이것을 아규먼트(argument, 인자)라고 부른다)을 받아들이기 때문이다.\n\n\nR에는 수많은 내장 함수가 있다. 그 중 몇가지만 실행하면 다음과 같다. sqrt()는 제곱근을, abs()는 절대값을, log10()는 로그값을 산출해준다.\n\nsqrt(2)\n\n[1] 1.414214\n\nabs(-3)\n\n[1] 3\n\nlog10(100)\n\n[1] 2\n\n\n\n2.2.3 벡터와 데이터 프레임\n직접 벡터를 만들어보자.\n\na &lt;- c(58, 26, 24)\nb &lt;- c(\"이상일\", \"김세창\", \"김우형\")\nc &lt;- c(TRUE, TRUE, FALSE)\n\n벡터 a는 숫자형(numeric), b는 문자형(character), c는 논리형(logical)으로, 세 개의 벡터가 서로 다른 유형을 가지고 있음을 Environment 창에서 확인할 수 있다.\n\n\n\n\n\n\nNote\n\n\n\nR에서 사용되는 데이터 유형에 대해서는 다음의 웹사이트를 참고할 수 있다. https://tibble.tidyverse.org/articles/types.html\n\n\n벡터를 data.frame()이라는 함수를 통해 결합하면 데이터 프레임을 만들 수 있다.\n\ndf &lt;- data.frame(a, b, c)\ndf\n\n   a      b     c\n1 58 이상일  TRUE\n2 26 김세창  TRUE\n3 24 김우형 FALSE\n\n\n우상의 Environment 창을 보면 뭔가 변화가 있음을 확인할 수 있을 것이다. Data가 생겼고 그 아래에 df가 생성되어 있다. “3 obs. of 3 variables”라는 말이 굉장히 중요하다. 이것은 df라는 데이터 프레임 객체가 3개의 관측개체(observations)와 3개의 변수(variables)로 구성되어 있다는 것을 의미한다. 데이터 프레임, 관측개체, 변수에 대해서는 강의에서 상세하게 다룬다.\nEnvironment 창에서 df를 클릭해보라. 그러면 왼편에 또 하나의 창이 생기면서 마치 엑셀과 같은 형식으로 데이터가 나타날 것이다. View() 함수를 실행해도 동일한 결과를 얻을 수 있다.\n\nView(df)\n\n여기서 중요한 것은 새로 생긴 창이다. 이것을 보통 Editor 창이라고 부른다. 이제부터 Console은 부차적인 목적으로만 사용할 것이고 Editor 창이 주인공이 된다.\n\n\n\n\n\n\n참고: R의 다양한 내장 함수\n\n\n\n\n\n\n통계 함수\n\n\nmean(c(1, 2, 3, 4)) # 벡터의 평균 계산\n\n[1] 2.5\n\nmedian(1:10) # 벡터의 중앙값 계산\n\n[1] 5.5\n\nvar(rep(c(1:5), times = 2)) # 벡터의 분산 계산\n\n[1] 2.222222\n\nsd(seq(1, 10, 2)) # 벡터의 표준편차 계산\n\n[1] 3.162278\n\nquantile(0:100) # 벡터의 사분위수 계산\n\n  0%  25%  50%  75% 100% \n   0   25   50   75  100 \n\n\n\n데이터 탐색\n\n\nstr(cars) # cars 데이터의 구조를 보여준다.\n\n'data.frame':   50 obs. of  2 variables:\n $ speed: num  4 4 7 7 8 9 10 10 10 11 ...\n $ dist : num  2 10 4 22 16 10 18 26 34 17 ...\n\nsummary(cars) # cars 데이터를 요약해준다.\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\nhead(cars) # cars 데이터의 처음 6개 값을 보여준다.(세부 설정이 가능하다.)\n\n  speed dist\n1     4    2\n2     4   10\n3     7    4\n4     7   22\n5     8   16\n6     9   10\n\ntail(cars, 10) # cars 데이터의 마지막 10개 값을 보여준다.\n\n   speed dist\n41    20   52\n42    20   56\n43    20   64\n44    22   66\n45    23   54\n46    24   70\n47    24   92\n48    24   93\n49    24  120\n50    25   85\n\n\n\n데이터 시각화\n\n\nplot(cars) # 데이터 프레임을 가지고 그래프를 그려준다.\n\n\n\n\n\n\nplot(cars, type=\"l\", main=\"cars\") # 그래프의 형태와 제목을 지정할 수 있다.\n\n\n\n\n\n\n\n이 외에도 다른 수많은 내장 함수들이 존재한다.\n\n\n\n\n\n\n\n\n\n참고: 궁금한 함수가 있다면?\n\n\n\n\n\n함수에 대해 궁금한 점이 있다면 알아볼 수 있는 방법들이 많이 있다. Editor나 Console에 아래의 둘 중 하나를 아무거나 입력후 실행하면 함수에 대한 정보를 확인할 수 있다.\n\n?sum # sum이라는 함수가 궁금할 때\nhelp(sum)\n\n또 이미 발견한 사람도 있겠지만, 이 문서의 본문에 있는 함수들을 클릭하면 함수에 대한 정보가 담긴 페이지로 이동할 수 있다.",
    "crumbs": [
      "R 실습",
      "Lab01: R과 RStudio"
    ]
  },
  {
    "objectID": "lab_01.html#프로젝트project와-스크립트script",
    "href": "lab_01.html#프로젝트project와-스크립트script",
    "title": "Lab01: R과 RStudio",
    "section": "\n3 프로젝트(project)와 스크립트(script)",
    "text": "3 프로젝트(project)와 스크립트(script)\n\n3.1 프로젝트 만들기\n\n3.1.1 R 프로젝트 만들기\n두 가지 방법이 있다.\n\n최상단 메뉴를 이용: File &gt; New Project\n상단 메뉴바 오른쪽 끝의 화살표 아이콘: New Project\n\nFigure 3 에 나타나 있는 절차를 통해 프로젝트를 생성한다. 각각 다음의 단계를 거친다.\n\n1단계: 과제 폴더(디렉토리)를 미리 만들어 두지 않았다면, New Directory를 선택한다(추천). 그렇지 않았다면 Existing Directory를 선택한다.\n2단계: New Project를 선택한다.\n3단계: ’Directory name:’에 과제를 위한 폴더명을 타이핑한다(예: AI_Class_2024). ’Create project as subdirectory of:’에 최상위 폴더(예: R_Projects)를 선택한다.\n\n\n\n\n\n\nFigure 3: R 프로젝트의 생성 절차\n\n\nOutput 창의 Files 탭을 누르면, 다양한 기본 파일들이 해당 폴더에 생성되었음을 확인할 수 있다. 가장 중요한 파일은 .RProj라는 확장자를 가진 파일이다. 나중에 R 외부에서 이 파일을 더블클릭하면 R 프로젝트를 열 수 있다.\n\n\n\n\n\n\nTip\n\n\n\nR 외부의 파일 관리 시스템(윈도우즈의 경우 파일 탐색기)를 사용하지 말고, Output 창의 Files 탭을 사용하는 것이 훨씬 유용하다. 파일 탐색기에서 제공하는 거의 대부분의 기능을 제공한다.\n\n\n\n3.1.2 옵션의 변경\nRstudio의 기본 세팅값을 바꿀 수 있는 다양한 옵션이 존재한다. Tools &gt; Global Options를 선택하면 Figure 4 과 같은 화면을 볼 수 있을 것이다.\n\n왼쪽에서 Apearance를 선택한 후, ’Editor font size:’나 ’Editor theme’을 변경하여 자신의 선호를 반영하라. 특히 많은 데이터 사이언티스트들이 다크 모드를 선호하기 때문에 다크 모드 테마 중 하나로 변경하는 것을 추천한다.\n\n\n\n\n\n\nFigure 4: 옵션의 변경\n\n\n\n3.2 스크립트 만들기\n\n3.2.1 스크립트 파일 생성하고 저장하기\n스크립트 파일을 생성하는 세 가지 정도의 방법이 있다.\n\nFile &gt; New File &gt; R Script 선택\nFile 메뉴 바로 아래의 New File 아이콘을 누른 후 R Script 선택\n단축키(Ctrl + Shift + N) 실행 (Mac의 경우 Command + Shift + N)\n\n이렇게 하면 Figure 5 과 같이 좌상에 Editor 창이 생성된다. 그 안에서 그림에서 보는 바와 같이 코드를 작성하게 된다.\n\n\n\n\n\nFigure 5: 네 개의 창 (https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html)\n\n\n스크립트 파일에 이름을 부여하고 저장한다.\n\nFile &gt; Save 선택\nSave current document 아이콘 클릭\n단축키(Ctrl + S) 실행 (Mac의 경우 Command + S)\n\n3.2.2 스크립트 파일에서의 실행\n앞에서 Console에서 했던 모든 일을 동일하게 할 수 있다. 단 실행 방식이 조금 다르다. 앞에서 생성한 df 데이터 프레임의 a 벡터(변수)의 평균값을 구하기 위해 이전과 동일하게 입력한다. 그런데 프롬프트가 없고, [enter]를 눌러도 실행되지 않는다.\n\nmean(df$a)\n\n우선 실행할 코드 라인 혹은 코드의 영역을 지정해야 한다. 두 가지 방법이 있다.\n\n실행할 코드 라인 혹은 코드 블록에 커서를 위치시킨다.\n왼쪽 마우스 버튼을 누른 상태에서 커서를 이동시켜 실행할 영역 전체를 선택한다.\n\n영역이 지정되면 실행하면 되는데, 여기에도 두 가지 방법이 있다.\n\n단축키(Ctrl + Enter) 실행 (Mac의 경우 Command + Enter)\nEditor 창의 우상에 있는 ‘Run the current line or selection’ 아이콘을 클릭(Figure 6 참조)\n\n\n\n\n\n\nFigure 6: 스크립트 파일에서의 실행(https://docs.posit.co/ide/user/ide/guide/code/execution.html)\n\n\n이전의 실행을 반복하고자 할 때는 다음과 같이 하면 된다.\n\n단축키(Ctrl + Alt +P) 실행 (Mac의 경우 Option + Command + P)\nEditor 창의 우상에 있는 ‘Re-run the previous code region’ 아이콘을 클릭(Figure 6 참조)\n\n3.2.3 코멘트\n코드에 대한 코멘트를 스크립트 파일 곳곳에 남겨두면 나중에 코드 작성의 의도를 보다 쉽게 파악할 수 있다. 이와 관련하여 두 가지 사항을 알아두면 유용하다.\n첫째, # 표시 뒤의 것은 R이 실행하지 않기 때문에 중간중간에 # 표시를 하고 그 뒤에 자신의 코멘트를 남겨두는 것을 권한다.\n\nmean(df$a) # 세 사람의 나이 평균을 구함. 첫 번째 사람 나이가 엄청나게 많음.\n\n둘째, 코드가 길어지면, 그것을 몇 개의 섹션으로 나누고 그것에 코멘트를 달아 줄 수 있다. 단축키(Crtl + Shift + R, Mac은 Command + Shift + R)를 실행하여 섹션 라벨(Section label)을 달 수 있고, Editor 창의 왼쪽 하단에 있는 작은 아이콘을 이용해 섹션을 빠르게 이동할 수 있다.\n\n\n\n\n\n\nNote\n\n\n\n\n작성한 코드 등 작업물들을 온라인 상에서 관리하고 다른 사람들과 공유하기 위해 Github 사용을 추천한다. 컴퓨터에 Git을 설치하고 Github에 접속하여 회원가입을 하면 Github를 사용할 수 있다. Github의 간단한 기능만을 익혀두어도 나중에 Quarto를 통하여 자신만의 웹사이트를 간단하게 제작할 수 있다.",
    "crumbs": [
      "R 실습",
      "Lab01: R과 RStudio"
    ]
  },
  {
    "objectID": "exec_08.html",
    "href": "exec_08.html",
    "title": "데이터로 소통하기: Quarto 입문",
    "section": "",
    "text": "이 실습은 데이터사이언스 과정의 마지막 단계로 제시되고 있는 ‘소통(communication)’ 혹은 ’데이터로 소통하기’를 위한 핵심 도구로서의 Quarto를 다룬다. 본 실습에서는 Quarto 다큐먼트의 기본 기능에 대해 다룬다.",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터로 소통하기: Quarto 입문"
    ]
  },
  {
    "objectID": "exec_08.html#실습-개요",
    "href": "exec_08.html#실습-개요",
    "title": "데이터로 소통하기: Quarto 입문",
    "section": "",
    "text": "이 실습은 데이터사이언스 과정의 마지막 단계로 제시되고 있는 ‘소통(communication)’ 혹은 ’데이터로 소통하기’를 위한 핵심 도구로서의 Quarto를 다룬다. 본 실습에서는 Quarto 다큐먼트의 기본 기능에 대해 다룬다.",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터로 소통하기: Quarto 입문"
    ]
  },
  {
    "objectID": "exec_08.html#quarto란",
    "href": "exec_08.html#quarto란",
    "title": "데이터로 소통하기: Quarto 입문",
    "section": "\n1 Quarto란?",
    "text": "1 Quarto란?\nQuarto는 “과학적, 기술적 출판을 위한 오픈소스 시스템(an open-source scientific and technical publishing system)”으로 정의되는데, 다양한 형식의 저작물(연구 논문, 프레젠테이션, 대시보드, 웹사이트, 블로그, 서적 등)을 다양한 디지털 포맷(HTML, PDF, MS Word, ePub 등)으로 출판할 수 있게 해준다.\nQuarto는 연구 노트, 레포트, 블로그 등을 작성할 수 있게 해준다는 측면에서 ‘개인적’ 도구이지만, 다양한 규모의 프로젝트의 원할한 진행을 도와준다는 측면에서 ‘협업’ 도구이며, 더 나아가 과학 커뮤니티 전체의 재현성(reproducibility) 고양에 도움을 줄 수 있다는 측면에서 ‘사회적’ 도구이기도 하다.\n원래 R 커뮤니티에는 유사한 기능을 수행하는 RMarkdown이라는 도구가 존재했고 여전히 많은 사람들이 사용하고 있다. Quarto는 기존의 RMarkdown에 ’통합’이라는 키워드를 적용시켜 보다 발전된 형태의 저작 시스템으로 거듭난 것이다. 우선 Quarto는 다양한 오픈소스 프로그래밍 언어에서 사용될 수 있다(R, Python, Julia, Observable). 둘째, Quarto는 출판물의 다양한 형식에 구애되지 않는 일관성있는 저작 시스템을 제공한다.\n\nQuarto 다큐먼트의 기본 구문은 마크다운(markdown), 혹은 마크다운의 보다 특수한 형태로서의 팬독(pandoc) 마크다운이다. 마크다운 언어는 마크업(markup) 언어의 일종인데, 마크업 언어는 다큐먼트의 구조와 포맷을 관장하는 텍스트-엔코딩 시스템이다. 그런데 마크업 언어는 배우기 어렵다. 예를 들어, 대표적인 마크업 언어인 HTML은 수많은 태그의 복잡한 위계 구조를 가지고 있어 사용자 입장에서는 읽기도 어렵고, 쓰기도 어렵다. 마크다운 언어는 사용자가 보다 사용하기 쉬운 구문 구조를 제공함으로써 동일한 웹 결과물을 보다 용이하게 제작할 수 있게 도와준다. Quarto는 이러한 마크다운 언어에 기반하고 있다.\n프로그래밍 언어와의 관련성이라는 측면에서 보면, Quarto 다큐먼트는 기본적으로 워드프로세서에 프로그래밍 언어가 부가된 것으로 이해할 수 있다. 워드프로세서가 기본적으로 제공하는 텍스트 작성, 테이블 작성, 그래픽 삽입 등의 기능 외에 코드 편집, 코드 실행, 실행 결과 삽입 등의 기능이 함께 포함되어 있다. 이렇게 작성된 Quarto 다큐먼트는 .qmd라는 확장자를 갖는다. Quarto 다큐먼트를 렌더링하면 knitr 패키지가 마크다운 파일(.md)을 생성하고, pandoc이 그것들을 다양한 포맷의 산출물로 변환한다.\n\n\nhttps://quarto.org/docs/get-started/hello/rstudio.html",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터로 소통하기: Quarto 입문"
    ]
  },
  {
    "objectID": "exec_08.html#quarto-다큐먼트의-기본-구조",
    "href": "exec_08.html#quarto-다큐먼트의-기본-구조",
    "title": "데이터로 소통하기: Quarto 입문",
    "section": "\n2 Quarto 다큐먼트의 기본 구조",
    "text": "2 Quarto 다큐먼트의 기본 구조\nFigure 1 을 바탕으로 Quarto 다큐먼트의 기본 구조를 설명하고자 한다. 왼쪽은 비주얼 에디터(visual editor)를 사용한 것이고, 오른쪽은 소스 에디터(source editor)를 사용한 것이다. 소스 에디터는 마크다운 구문을 그대로 사용하는 것이므로 마크다운의 기본 형식(https://quarto.org/docs/authoring/markdown-basics.html)에 대한 이해가 선행되어야 한다. 이에 반해 비주얼 에디터는 마치 워드프로세서를 다루듯 메뉴 형식으로 Quarto 다큐먼트를 작성할 수 있다. 비주얼 에디터에 대해서는 뒤에서 상세히 다루기로 한다.\n\n\n\n\n\nFigure 1: Quarto의 기본 구조와 비주얼 에디터\n\n\nFigure 1 의 왼쪽 그림에서 보다 잘 드러나는 것처럼, Quarto 다큐먼트는 크게 세 부분으로 나뉘어진다.\n\nYAML 해더(header)\n코드 청크(code chunk)\n마크다운 텍스트\n\n\n2.1 YAML 해더\nYAML 해더는 Quarto 다큐먼트의 최상단에 위치하는 것으로, 일종의 메터데이터로 다큐먼트의 전반적인 사항을 관장한다. YAML 해더 부분은 세개의 대시 부호(—)를 통해 다른 부분과 구분된다.\nYAML 해더의 모든 요소는 기본적으로 key: value의 행태를 띤다. key는 항목이고, value는 해당 항목에 대한 옵션값이다. 위의 예에는 title, format, editor의 세 key가 사용되었는데, 제목은 “Hello, Quarto”이며, 산출 포맷은 HTML이며, quarto 다큐먼트 작성을 비주얼 에디터를 통해 할 것이라는 점을 명시하고 있다.\n다양한 key를 설정할 수 있으며(https://quarto.org/docs/reference/formats/html.html), 다음의 것들이 중요하다.\n\n\n\n\n\n\nkey\n설명\n\n\n\ntitle\n다큐먼트의 제목\n\n\ndate\n다큐먼트 작성 날짜\n\n\nauthor\n다큐먼트 저자 이름\n\n\nformat\n다양한 포맷 관련 사항의 지정\n\n\ntoc\n목차 삽입\n\n\nnumber-section\n섹션 제목에 자동 번호 부여 여부\n\n\nexecute: echo\n소스 코드의 포함 여부를 글로벌하게 설정, 보통 visual\n\n\nexecute: warning\n경고 메시지를 산출물에 나타나게 할지를 글로벌하게 설정, 보통 false\n\n\neditor\n비주얼 에디터와 소스 에디터 중 선택, 보통 visual\n\n\n\n2.2 코드 정크\n프로그래밍 언어의 코드가 들어가는 부분이다. R를 사용하는 경우 {r}로 시작한다. 데이터 불러오기, 정리하기, 변형하기, 시각화하기, 탐색하기, 수집하기와 관련된 모든 종류의 코드가 여기에 들어갈 수 있다. 보통 하나의 Quarto 다큐먼트에 다수의 코드 정크가 포함된다.\n각 코드 정크의 앞 부분에 해당 코드 정크와 관련된 다양한 옵션을 #| 형태로 삽입할 수 있다. YAML 해더에서처럼, key: value의 행태를 띤다. 가장 중요한 옵션은 코드 청크의 내용이나 실행 결과 등이 산출물에 어떻게 표현되는지를 결정하는 것들이다. 다음의 표는 코드를 실행할지의 여부, 코드를 보여줄지의 여부, 코드의 결과를 보여줄지의 여부, 생성되는 플롯을 보여줄지의 여부, 메시지나 경고문을 보여줄지의 여부 등을 관장하는 다양한 옵션을 정리한 것이다.\n\n\n\n\n\n\n\n\n\n\n\nOption\nRun code\nShow code\nOutput\nPlots\nMessages\nWarnings\n\n\n\neval: false\nX\n\nX\nX\nX\nX\n\n\ninclude: false\n\nX\nX\nX\nX\nX\n\n\necho: false\n\nX\n\n\n\n\n\n\nresults: hide\n\n\nX\n\n\n\n\n\nfig-show: hide\n\n\n\nX\n\n\n\n\nmessage: false\n\n\n\n\nX\n\n\n\nwarning: false\n\n\n\n\n\nX\n\n\n\n2.3 마크다운 텍스트\n워드프로세서처럼 텍스트를 작성한다. 섹션 헤더, 하이퍼링크(hyperlink), 이미지 등을 지정할 수 있고, 인라인 코드 청크(inline code chunk)도 삽입할 수 있다. 마크다운 텍스트의 작성에 비주얼 에디터는 큰 역할을 한다. 비주얼 에디터는 마크다운 언어의 사용자 편이성을 한번 더 강화한 것으로 볼 수 있다.\n비주얼 에디터는 다음의 메뉴로 구성된다. 워드프로세서와 비슷한 형태를 가지고 있음을 알 수 있다. 많이 사용되는 기능은 아이콘의 형태로 전면에 배치되어 있다.\n\n포맷(Format), 삽입(Insert), 테이블(Table) 속에 다양한 하위 기능들이 포함되어 있다. Quarto를 마스트하는데 비주얼 에디터의 기능을 숙달하는 것이 필수적이다.",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터로 소통하기: Quarto 입문"
    ]
  },
  {
    "objectID": "exec_08.html#실습-1-기본-quarto-다큐먼트의-작성",
    "href": "exec_08.html#실습-1-기본-quarto-다큐먼트의-작성",
    "title": "데이터로 소통하기: Quarto 입문",
    "section": "\n3 실습 1: 기본 Quarto 다큐먼트의 작성",
    "text": "3 실습 1: 기본 Quarto 다큐먼트의 작성\n\n3.1 새 Quarto 다큐먼트 열기\nFile &gt; New File &gt; Quarto Document를 실행한다. Title과 Author란에 적절한 텍스트를 기입하고 아래에 위치한 Create 버튼을 클릭한다.\n\n\n\n\n\n3.2 Quarto 다큐먼트의 작성\n아래와 같은 결과물이 나오도록 Quarto 다큐먼트를 작성한다. 조교의 도움을 받아 다른 것들도 실험해 본다.\n\n\n\n\n\nFigure 2: 렌더링 결과\n\n\n\n3.3 Quarto 다큐먼트의 렌더링\n아래의 그림에 나타나 있는 Render 버튼을 클릭해 다큐먼트를 렌더링한다. 결과는 오른편 하단의 Viewer 탭에 나타난다. 결과를 Figure 2 과 비교한다. 최종적인 html은 프로젝트 파일이 들어있는 폴더에 저장되어 있다.",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터로 소통하기: Quarto 입문"
    ]
  },
  {
    "objectID": "exec_08.html#실습-2-개인-블로그-만들기",
    "href": "exec_08.html#실습-2-개인-블로그-만들기",
    "title": "데이터로 소통하기: Quarto 입문",
    "section": "\n4 실습 2: 개인 블로그 만들기",
    "text": "4 실습 2: 개인 블로그 만들기\n\n4.1 새로운 Quarto Blog 프로젝트 시작하기\nFile &gt; New Project &gt; Create Project &gt; Quarto Blog를 선택한다.\n\n\n\n\n\n\n\n\n\n\n\n\n\n디렉토리 이름과 경로를 설정하고, 아래에 위치한 Create Project 버튼을 클릭한다.\n\n\n4.2 렌더링하여 결과를 살펴보기\nRender 버튼을 클릭하여 결과를 확인한다. 결과는 오른쪽 패널의 Viewer 탭에 나타난다. Viewer 탭의 Show in new window 아이콘을 클릭하면 웹브라우저 상에 결과를 나타낼 수 있다.\n\nFiles 탭을 클릭하면 프로젝트 폴더에 다음과 같은 파일들이 생성되어 있음을 확인할 수 있다. 조교의 도움을 받아 각각의 파일이 어떠한 역할을 하는지 파악한다.\n\n\nFile\nDescription\n\n\n\n_quarto.yml\nQuarto 프로젝트 파일\n\n\nindex.qmd\n블로그의 홈페이지\n\n\nabout.qmd\n블로그의 어바우트 페이지\n\n\nposts/\n포스트를 포함하고 있는 폴더\n\n\nposts/_metadata.yml\n포스트가 공유하고 있는 옵션들\n\n\nstyles.css\n웹사이트의 CSS\n\n\n\n4.3 구성 요소 수정하기\n구성 요소를 수정하여 자신의 개인 블로그를 만들어 나간다.\n\n4.3.1 메타데이터\n블로그의 전체적인 모습은 _quarto.yml 파일에 의해 규정된다. _quarto.yml 파일의 내용을 살펴보고 조교의 도움을 받아 필요한 부분을 수정한다.\n다음의 웹사이트를 참조한다. https://quarto.org/docs/output-formats/html-themes.html. 특히, 25개의 테마를 살펴보고, 그 중 하나를 선택한다.\n\n4.3.2 홈페이지(home page)\n블로그의 홈페이지는 포스트 디렉토리에 포함되는 모든 포스트의 리스트를 제공하는 것으로 index.qmd 파일에 의해 규정된다. index.qmd 파일의 내용을 살펴보고 조교의 도움을 받아 필요한 부분을 수정한다.\n다음의 웹사이트를 참조한다. https://quarto.org/docs/websites/website-listings.html. 특히 리스팅 유형(listing types) 옵션 세개(default, table, grid)를 살펴보고, 그 중 하나를 선택한다.\n\n4.3.3 어바우트 페이지(about page)\n어바우트 페이지는 블로그와 블로그의 저작자에 대한 부가 정보를 제공하는 것으로 about.qmd 파일에 의해 규정된다. about.qmd 파일의 내용을 살펴보고 조교의 도움을 받아 필요한 부분을 수정한다.\n다음의 웹사이트를 참조한다. https://quarto.org/docs/websites/website-about.html. 특히 템플릿(template) 옵션 다섯개(jolla, trestles, solana, marquee, broadside)를 살펴보고, 그 중 하나를 선택한다.\n\n4.3.4 포스트 디렉토리(posts directory)\n블로그의 콘텐츠는 포스트 디렉토리 속에 포함되어 있다. 기본적으로 하나의 포스트는 하나의 폴드인데, 개별 폴드 속에는 index.qmd라는 이름의 Quarto 파일이 들어 있다. 그리고 Quarto 다큐먼트에 포함되어 있는 이미지는 images라는 서브 폴드에 저장되어 있다.\n다음의 절차에 따라 새로운 포스트를 생성해 본다.\n\nposts 디렉토리 아래에 새로운 디렉토리를 생성한다. 이름은 날짜와 주제가 결합된 형태로 하면 좋다.\n새로운 디렉토리에 index.qmd 파일을 생성한다. 아래와 같이 YAML 해더를 수정하고, 실습 1에서처럼 새로운 포스트를 작성한다.\n\n\n---\ntitle: \"I hate May\"\nauthor: \"Your Name Here\"\ndate: \"05/07/2024\"\ndate-modified: last-modified\n---\n\n\n4.4 블로그를 웹 상에 출판하기\n완성된 개인 블로그를 다음의 절차에 따라 웹에 출판한다. 여기서는 Posit에서 제공하는 무료 출판 사이트인 Quarto Pub을 활용한다.\n\nQuarto Pub에 접속하여 계정을 만든다.\nRStudio에서, 왼쪽 하단부의 Terminal 탭을 누른다.\n프롬프트에 다음과 같이 입력하고 실행한다: quarto publish quarto-pub\n\n조교의 도움을 받고, 다음을 웹사이트를 참고한다. https://quarto.org/docs/publishing/quarto-pub.html",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터로 소통하기: Quarto 입문"
    ]
  },
  {
    "objectID": "exec_06.html",
    "href": "exec_06.html",
    "title": "데이터 탐색하기",
    "section": "",
    "text": "이 실습은 데이터사이언스의 꽃이라고 할 수 있는 데이터 탐색(exploration)을 다룬다. 데이터 탐색하기는 데이터 변형하기와 데이터 시각화하기를 합친 것으로 이해할 수 있다. 다음의 사항을 이해하고 있는 것이 매우 중요하다.\n\n데이터 탐색은 데이터와의 끝임없는 상호작용을 의미한다. 데이터 과학이 데이터로부터 이해, 지식, 통찰력을 획득하는 과정이라고 했을 때, 데이터 탐색은 데이터사이언스의 심장이라 해도 과언이 아니다. 상호작용은 데이터와의 질의응답의 연쇄과정을 의미한다. 의미있는 질문에 답을 얻기 위해서는 거의 반드시 데이터를 변형하거나 시각화해야만 한다.\n데이터 변형과 데이터 시각화는 개별적으로 데이터 탐색을 가능케 한다. 데이터 변형은 데이터를 다른 각도로 바라볼 수 있게 해주고 다양한 요약 통계값을 산출해 준다. 데이터 시각화는 데이터에 차원을 부가함으로써 시각화 되지 않았다면 발견할 수 없었던 것을 발견하게 해준다.\n데이터 변형에서 데이터 시각화로 이어지는 시퀀스가 데이터 탐색의 핵심적인 방법론이다. 데이터 변형의 궁극적인 목적은 바로 데이터 시각화를 위한 준비이다. 특정한 형태의 시각화를 이해서는 특정한 형태의 데이터가 필수적이고, 그것이 이해, 지식, 통찰력의 획득으로 나아가게 해주는 주된 경로이다.\n데이터 시각화의 두 가지 목적은 탐색과 커뮤니케이션이다. 우리가 데이터 시각화를 하는 첫번째 목적은 데이터에 대한 질문에 답을 찾기 위해서이다. 우리가 데이터를 시각화하는 두 번째 목적은 우리가 발견한 것을 다른 사람들과 ‘잘’ 커뮤니케이션하기 위해서 이다.\n\n이번 실습에서는 데이터 변형하기에서 사용한 gapmider 데이터를 활용하여 데이터 변형과 데이터 시각화가 어떻게 데이터 탐색에 기여하는지를 알아볼 것이다. tidyverse 패키지와 gapmider 패키지를 불러온다. gapmider 데이터를 다시 한번 살펴본다.\n\nlibrary(tidyverse)\nlibrary(gapminder)\nView(gapminder)",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 탐색하기"
    ]
  },
  {
    "objectID": "exec_06.html#실습-개요",
    "href": "exec_06.html#실습-개요",
    "title": "데이터 탐색하기",
    "section": "",
    "text": "이 실습은 데이터사이언스의 꽃이라고 할 수 있는 데이터 탐색(exploration)을 다룬다. 데이터 탐색하기는 데이터 변형하기와 데이터 시각화하기를 합친 것으로 이해할 수 있다. 다음의 사항을 이해하고 있는 것이 매우 중요하다.\n\n데이터 탐색은 데이터와의 끝임없는 상호작용을 의미한다. 데이터 과학이 데이터로부터 이해, 지식, 통찰력을 획득하는 과정이라고 했을 때, 데이터 탐색은 데이터사이언스의 심장이라 해도 과언이 아니다. 상호작용은 데이터와의 질의응답의 연쇄과정을 의미한다. 의미있는 질문에 답을 얻기 위해서는 거의 반드시 데이터를 변형하거나 시각화해야만 한다.\n데이터 변형과 데이터 시각화는 개별적으로 데이터 탐색을 가능케 한다. 데이터 변형은 데이터를 다른 각도로 바라볼 수 있게 해주고 다양한 요약 통계값을 산출해 준다. 데이터 시각화는 데이터에 차원을 부가함으로써 시각화 되지 않았다면 발견할 수 없었던 것을 발견하게 해준다.\n데이터 변형에서 데이터 시각화로 이어지는 시퀀스가 데이터 탐색의 핵심적인 방법론이다. 데이터 변형의 궁극적인 목적은 바로 데이터 시각화를 위한 준비이다. 특정한 형태의 시각화를 이해서는 특정한 형태의 데이터가 필수적이고, 그것이 이해, 지식, 통찰력의 획득으로 나아가게 해주는 주된 경로이다.\n데이터 시각화의 두 가지 목적은 탐색과 커뮤니케이션이다. 우리가 데이터 시각화를 하는 첫번째 목적은 데이터에 대한 질문에 답을 찾기 위해서이다. 우리가 데이터를 시각화하는 두 번째 목적은 우리가 발견한 것을 다른 사람들과 ‘잘’ 커뮤니케이션하기 위해서 이다.\n\n이번 실습에서는 데이터 변형하기에서 사용한 gapmider 데이터를 활용하여 데이터 변형과 데이터 시각화가 어떻게 데이터 탐색에 기여하는지를 알아볼 것이다. tidyverse 패키지와 gapmider 패키지를 불러온다. gapmider 데이터를 다시 한번 살펴본다.\n\nlibrary(tidyverse)\nlibrary(gapminder)\nView(gapminder)",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 탐색하기"
    ]
  },
  {
    "objectID": "exec_06.html#탐색-질문에-답을-찾아가는-과정",
    "href": "exec_06.html#탐색-질문에-답을-찾아가는-과정",
    "title": "데이터 탐색하기",
    "section": "\n1 탐색: 질문에 답을 찾아가는 과정",
    "text": "1 탐색: 질문에 답을 찾아가는 과정\n탐색을 데이터 변형과 시각화의 연쇄 과정으로 보는 관점의 유용성을 매우 간단한 예를 통해 살펴보도록 한다.\n나의 질문은 이것이다.\n\n대륙별 최대국(인구가 가장 많은 나라)이 소속 대륙 전체에서 차지하는 비중이 어느 정도이고 대륙별로 어느 정도의 차이가 있는지, 그리고 대륙별 최대국의 비중이 시간이 지남에 따라 어떠한 변화 양상을 보여주고 있고, 그러한 양상에 대륙별 차이가 있는지의 여부이다.\n\ngapminder 데이터를 살펴보라. 아무리 훑어 보아도 곧바로 이 질문에 답할 수는 없을 것이다. 이 질문에 답하기 위해 우리는 두 가지의 연쇄적인 과제를 수행해야 한다.\n\n질문에 답할 수 있는 형태로 데이터를 변형한다.\n변형한 데이터를 간명한 형태의 그래프로 시각화한다.\n이 두 가지 과제를 잘 연결한다.\n\n지금까지 배운 것을 총동원해, 코드를 어떻게 작성할 수 있을지 궁리해 본다.\n아래에 질문에 답이 될 수 있는 그래프가 있다. Code 탭을 누르면 정답이 보인다. 누르지 말고 최대한 이와 비슷한 그래프가 만들어 지는 코드를 한번 작성해 보라.\n\n\nGraph\nCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngapminder |&gt; \n  group_by(year, continent) |&gt; \n  mutate(\n    sum_cont = sum(pop),\n    country_prop = pop * 100 / sum_cont\n  ) |&gt; \n  slice_max(country_prop) |&gt; \n  ggplot() +\n  geom_line(aes(x = year, y = country_prop, color = continent), size = 1) +\n  labs(x = \"Year\", y = \"% of Population\", color = \"Continents\") \n\n\n\n\n코드를 확인하고 자신의 코드와 비교해보라. 동일한 그래프에 이르는 조금 더 긴, 혹은 조금 더 짧은 코드가 가능할 것이다. 짧다고 좋은 것이 아니다. 자신이 이해하기 쉽고, 타인이 이해하기 쉬운 코드가 가장 좋은 코드이다. 중요한 것은, 데이터 탐색의 핵심이 데이터 변형과 데이터 시각화의 적절한 시퀀스라는 점을 이해하는 것이다. 위 코드는 dplyr 패키지와 ggplot2 패키지를 연결하여 이 과업을 수행하는 과정을 잘 보여준다.",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 탐색하기"
    ]
  },
  {
    "objectID": "exec_06.html#탐색의-유형",
    "href": "exec_06.html#탐색의-유형",
    "title": "데이터 탐색하기",
    "section": "\n2 탐색의 유형",
    "text": "2 탐색의 유형\n\n2.1 한 변수의 변동\n변동(variation)이란 한 변수값이 보여주는 다양성의 양태이다. 개별 변수에 대해 변동이 보여주는 특성을 파악하는 것은 데이터 탐색의 가장 초보적인 단계이다.\n\ngapminder |&gt; \n  filter(year == 2007) |&gt;\n  ggplot(aes(x = gdpPercap)) +\n  geom_histogram()\n\n\n\n\n\n\nFigure 1: 히스토그램\n\n\n\n\n아주 높은 값을 보이는 국가들을 확인하기 위해 데이터 변형을 한다.\n\ngapminder |&gt; \n  filter(year == 2007) |&gt; \n  arrange(desc(gdpPercap))\n\n# A tibble: 142 × 6\n   country          continent  year lifeExp       pop gdpPercap\n   &lt;fct&gt;            &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 Norway           Europe     2007    80.2   4627926    49357.\n 2 Kuwait           Asia       2007    77.6   2505559    47307.\n 3 Singapore        Asia       2007    80.0   4553009    47143.\n 4 United States    Americas   2007    78.2 301139947    42952.\n 5 Ireland          Europe     2007    78.9   4109086    40676.\n 6 Hong Kong, China Asia       2007    82.2   6980412    39725.\n 7 Switzerland      Europe     2007    81.7   7554661    37506.\n 8 Netherlands      Europe     2007    79.8  16570613    36798.\n 9 Canada           Americas   2007    80.7  33390141    36319.\n10 Iceland          Europe     2007    81.8    301931    36181.\n# ℹ 132 more rows\n\n\n\n2.2 두 변수 간의 공변동\n공변동(covariation)은 두 변수간의 관련성을 포괄적으로 부르는 통계학적인 용어이다. 어떤 두 변수가 개입되는냐에 따라 몇 가지 종류로 나누어 살펴본다.\n\n한 범주형 변수와 한 수치형 변수\n두 범주형 변수\n두 수치형 변수\n\n\n2.2.1 한 범주형 변수와 한 수치형 변수\n범주형 변수인 대륙에 의거해 수치형 변수인 일인당 GDP의 변동을 탐색한다.\n\ngapminder |&gt; \n  filter(year == 2007) |&gt; \n  ggplot(aes(x = gdpPercap)) +\n  geom_density(aes(color = continent, fill = continent), alpha = 0.25)\n\n\n\n\n\n\nFigure 2: 한 범주형 변수와 한 수치형 변수: 밀도 분포\n\n\n\n\n일인당 GDP의 대륙간 차이를 박스플롯을 통해 탐색할 수도 있다. 여기서 fct_reorder() 는 데이터 시각화에서 매우 중요하다. 이것은 범주 변수의 범주 순서를 바꾸어 주는데, tidyverse의 핵심 패키지인 forcats의 한 함수이다. 이것을 적용하지 않으면 원래 지정된 순서인 알파벳 순서에 따라 박스플롯이 배열된다. 이것을 일인당 GDP의 중위수의 순서로 배열하게 한 것이다.\n\ngapminder |&gt; \n  filter(year == 2007) |&gt; \n  ggplot(aes(x = gdpPercap, y = fct_reorder(continent, gdpPercap, median))) +\n  geom_boxplot(aes(color = continent))\n\n\n\n\n\n\nFigure 3: 한 범주형 변수와 한 수치형 변수: 박스틀롯\n\n\n\n\n\n2.2.2 두 범주형 변수\n수치형 변수인 일인당 GDP를 동일 간격의 5개 그룹으로 나눈 새로운 범주형 변수를 생성하고, 그것과 또 다른 범주 변수인 대륙과의 관련성을 탐색한다. geom_count() 기하 함수가 역할을 한다.\n\ngapminder |&gt; \n  filter(year == 2007) |&gt; \n  mutate(\n    gdp_class = cut_interval(gdpPercap, n =5, labels = c(\"very low\", \"low\", \"middle\", \"high\", \"very high\"))\n  ) |&gt; \n  ggplot(aes(x = continent, y = gdp_class)) +\n  geom_count()\n\n\n\n\n\n\nFigure 4: 두 범주형 변수: 카운트플롯\n\n\n\n\n또 다른 방법은 데이터 변형을 위한 count() 함수와 시각화 함수인 geom_title() 기하 함수를 결합하는 것이다.\n\ngapminder |&gt; \n  filter(year == 2007) |&gt; \n  mutate(\n    gdp_class = cut_interval(gdpPercap, n =5, labels = c(\"very low\", \"low\", \"middle\", \"high\", \"very high\"))\n  ) |&gt; \n  count(continent, gdp_class) |&gt; \n  ggplot(aes(x = continent, y = gdp_class)) +\n  geom_tile(aes(fill = n))\n\n\n\n\n\n\nFigure 5: 두 범주형 변수: 타일플롯\n\n\n\n\n\n2.2.3 두 수치형 변수\n두 수치형 변수인 일인당 GDP와 기대수명의 공변동을 탐색하는 가장 기본적이고도 가장 좋은 방법은 산포도를 그리는 것이다.\n\ngapminder |&gt; \n  filter(year == 2007) |&gt; \n  ggplot(aes(x = gdpPercap, y = lifeExp)) +\n  geom_point(aes()) +\n  geom_smooth()\n\n\n\n\n\n\nFigure 6: 두 수치형 변수: 산포도\n\n\n\n\n일인당 GDP를 여러 급간으로 쪼개서 박스플롯을 적용하는 것도 하나의 대안일 수 있다.\n\ngapminder |&gt; \n  filter(year == 2007) |&gt; \n  ggplot(aes(x = gdpPercap, y = lifeExp)) +\n  geom_boxplot(aes(group = cut_width(gdpPercap, 5000)))\n\n\n\n\n\n\nFigure 7: 두 수치형 변수: 박스플롯\n\n\n\n\n\n2.2.4 세 변수 이상\nFigure 6 에 또 하나의 수치형 변수(인구 규모)를 결합할 수 있다. 두 축에 로그를 적용하니 두 변수의 관련성이 선형에 가까워 졌다.\n\ngapminder |&gt; \n  filter(year == 2007) |&gt; \n  ggplot(aes(x = log(gdpPercap), y = log(lifeExp))) +\n  geom_point(aes(size = pop)) +\n  geom_smooth()\n\n\n\n\n\n\n\nFigure 6 에 또 하나의 범주형 변수(대륙)를 결합할 수 있다.\n\ngapminder |&gt; \n  filter(year == 2007) |&gt; \n  ggplot(aes(x = log(gdpPercap), y = log(lifeExp))) +\n  geom_point(aes(size = pop)) +\n  geom_smooth() +\n  facet_wrap(~continent)\n\n\n\n\n\n\n\n전세계 인구의 변화 양상과 대륙별 구성을 함께 탐색할 수 있게 해주는 그래프를 제작해 본다. fct_reorder2() 함수와 세개의 scale_ () 함수의 기능을 확인한다.\n\ngapminder |&gt; \n  group_by(year, continent) |&gt; \n  mutate(\n    sum_pop = sum(pop)\n  ) |&gt; \n  ggplot(aes(x = year, y = sum_pop)) +\n  geom_area(aes(fill = fct_reorder2(continent, year, sum_pop))) +\n  scale_x_continuous(breaks = seq(1952, 2007, 5), labels = seq(1952, 2007, 5)) +\n  scale_y_continuous(breaks = seq(0, 7000000000, 1000000000), \n                     labels = format(seq(0, 7000000000, 1000000000), big.mark = \",\", scientific = FALSE)) +\n  scale_fill_brewer(palette = \"Set3\") + \n  labs(x = \"Year\", y = \"Population\", fill = \"Continent\")",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 탐색하기"
    ]
  },
  {
    "objectID": "exec_04.html",
    "href": "exec_04.html",
    "title": "데이터 변형하기",
    "section": "",
    "text": "이 실습은 R로 데이터사이언스를 하는 과정 중 데이터 변형하기(transforming)를 다룬다. 데이터 변형하기와 관련된 대부분의 함수는 tidyverse의 핵심 패키지 중의 하나인 dplyr 에서 제공된다. 데이터 변형하기와 관련된 함수는 크게 네 개로 범주화된다.\n\n행 함수: 행(관측개체)에 작동하는 함수, 즉 행의 변화를 야기하는 함수\n열 함수: 열(변수)에 작동하는 함수, 즉 열의 변화를 야기하는 함수\n그룹 함수: 그룹에 작동하는 함수\n데이터 프레임 함수: 데이터 프레임에 작동하는 함수\n\n이번 실습에서는 행 함수, 열 함수, 그룹 함수에 집중한다. 모든 실습의 시작은 tidyverse 패키지를 불러오는 것이다.\n\nlibrary(tidyverse)\n\n사용할 데이터는 World Bank가 gapmider.org를 통해 무료로 배포하는 것으로 gapmider 패키지에 포함되어 있다. gapmider 패키지를 인스톨하고 불러온다. 데이터가 어떻게 구성되어 있는지 살펴본다.\n\nlibrary(gapminder)\nView(gapminder)",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 변형하기"
    ]
  },
  {
    "objectID": "exec_04.html#실습-개요",
    "href": "exec_04.html#실습-개요",
    "title": "데이터 변형하기",
    "section": "",
    "text": "이 실습은 R로 데이터사이언스를 하는 과정 중 데이터 변형하기(transforming)를 다룬다. 데이터 변형하기와 관련된 대부분의 함수는 tidyverse의 핵심 패키지 중의 하나인 dplyr 에서 제공된다. 데이터 변형하기와 관련된 함수는 크게 네 개로 범주화된다.\n\n행 함수: 행(관측개체)에 작동하는 함수, 즉 행의 변화를 야기하는 함수\n열 함수: 열(변수)에 작동하는 함수, 즉 열의 변화를 야기하는 함수\n그룹 함수: 그룹에 작동하는 함수\n데이터 프레임 함수: 데이터 프레임에 작동하는 함수\n\n이번 실습에서는 행 함수, 열 함수, 그룹 함수에 집중한다. 모든 실습의 시작은 tidyverse 패키지를 불러오는 것이다.\n\nlibrary(tidyverse)\n\n사용할 데이터는 World Bank가 gapmider.org를 통해 무료로 배포하는 것으로 gapmider 패키지에 포함되어 있다. gapmider 패키지를 인스톨하고 불러온다. 데이터가 어떻게 구성되어 있는지 살펴본다.\n\nlibrary(gapminder)\nView(gapminder)",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 변형하기"
    ]
  },
  {
    "objectID": "exec_04.html#행-함수",
    "href": "exec_04.html#행-함수",
    "title": "데이터 변형하기",
    "section": "\n1 행 함수",
    "text": "1 행 함수\n\n1.1 filter() 함수\n특정 열(변수)과 관련된 조건을 만족하는 행을 선정한다. 행의 길이가 준다.\n\ngapminder |&gt; \n  filter(continent == \"Europe\")\n\n# A tibble: 360 × 6\n   country continent  year lifeExp     pop gdpPercap\n   &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt;     &lt;dbl&gt;\n 1 Albania Europe     1952    55.2 1282697     1601.\n 2 Albania Europe     1957    59.3 1476505     1942.\n 3 Albania Europe     1962    64.8 1728137     2313.\n 4 Albania Europe     1967    66.2 1984060     2760.\n 5 Albania Europe     1972    67.7 2263554     3313.\n 6 Albania Europe     1977    68.9 2509048     3533.\n 7 Albania Europe     1982    70.4 2780097     3631.\n 8 Albania Europe     1987    72   3075321     3739.\n 9 Albania Europe     1992    71.6 3326498     2497.\n10 Albania Europe     1997    73.0 3428038     3193.\n# ℹ 350 more rows\n\n\n\ngapminder |&gt; \n  filter(pop &gt; 50000000 & gdpPercap &gt; 30000)\n\n# A tibble: 9 × 6\n  country        continent  year lifeExp       pop gdpPercap\n  &lt;fct&gt;          &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n1 France         Europe     2007    80.7  61083916    30470.\n2 Germany        Europe     2002    78.7  82350671    30036.\n3 Germany        Europe     2007    79.4  82400996    32170.\n4 Japan          Asia       2007    82.6 127467972    31656.\n5 United Kingdom Europe     2007    79.4  60776238    33203.\n6 United States  Americas   1992    76.1 256894189    32004.\n7 United States  Americas   1997    76.8 272911760    35767.\n8 United States  Americas   2002    77.3 287675526    39097.\n9 United States  Americas   2007    78.2 301139947    42952.\n\n\n\ngapminder |&gt; \n  filter(year == 2007 & (lifeExp &gt; 82 | gdpPercap &gt; 40000))\n\n# A tibble: 7 × 6\n  country          continent  year lifeExp       pop gdpPercap\n  &lt;fct&gt;            &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n1 Hong Kong, China Asia       2007    82.2   6980412    39725.\n2 Ireland          Europe     2007    78.9   4109086    40676.\n3 Japan            Asia       2007    82.6 127467972    31656.\n4 Kuwait           Asia       2007    77.6   2505559    47307.\n5 Norway           Europe     2007    80.2   4627926    49357.\n6 Singapore        Asia       2007    80.0   4553009    47143.\n7 United States    Americas   2007    78.2 301139947    42952.\n\n\n\n1.2 slice() 함수\nfilter() 함수와 마찬가지로 행의 숫자를 줄인다. slice() 함수는 slice_head(), slice_tail(), slice_max(), slice_min()과 같은 패밀리 함수가 더 널리 사용된다. 그런데 이 함수들은 작동 방식에 따라 두 가지로 구분된다.\n\n특정 열(변수)과 관계 없이, 행의 위치에 의거해 행을 선정: slice(), slice_head(), slice_tail()\n특정 열(변수)에 따른, 행의 위치에 의거해 행을 선정: slice_max(), slice_min()\n\n몇 번째에서 몇 번째 사이의 행만을 골라낸다.\n\ngapminder |&gt; \n  slice(1:5)\n\n# A tibble: 5 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n\n\n가장 앞에 위치한 몇 개(n)의 행만을 골라낸다. 실질적으로 위와 동일하다.\n\ngapminder |&gt; \n  slice_head(n = 5)\n\n# A tibble: 5 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n\n\n가장 뒤에 위치한 몇 개(n)의 행만을 골라낸다.\n\ngapminder |&gt; \n  slice_tail(n = 5)\n\n# A tibble: 5 × 6\n  country  continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;    &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Zimbabwe Africa     1987    62.4  9216418      706.\n2 Zimbabwe Africa     1992    60.4 10704340      693.\n3 Zimbabwe Africa     1997    46.8 11404948      792.\n4 Zimbabwe Africa     2002    40.0 11926563      672.\n5 Zimbabwe Africa     2007    43.5 12311143      470.\n\n\n특정 열(변수)에 따라 값이 가장 큰 몇 개(n)의 행만을 골라낸다.\n\ngapminder |&gt; \n  filter(year == 2007) |&gt; \n  slice_max(gdpPercap, n = 5)\n\n# A tibble: 5 × 6\n  country       continent  year lifeExp       pop gdpPercap\n  &lt;fct&gt;         &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n1 Norway        Europe     2007    80.2   4627926    49357.\n2 Kuwait        Asia       2007    77.6   2505559    47307.\n3 Singapore     Asia       2007    80.0   4553009    47143.\n4 United States Americas   2007    78.2 301139947    42952.\n5 Ireland       Europe     2007    78.9   4109086    40676.\n\n\n특정 열(변수)에 따라 값이 가장 작은 것들 중 주어진 비중(prop)에 해당하는 행만을 골라낸다.\n\ngapminder |&gt; \n  filter(year == 2007 & continent == \"Asia\") |&gt; \n  slice_min(lifeExp, prop = 0.1)\n\n# A tibble: 3 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       2007    43.8 31889923      975.\n2 Iraq        Asia       2007    59.5 27499638     4471.\n3 Cambodia    Asia       2007    59.7 14131858     1714.\n\n\n\n1.3 arrange() 함수\n특정 열(변수)과 관련된 조건에 의거해 행의 순서를 바꾼다. 행의 길이에는 변화가 없다.\n\ngapminder |&gt; \n  arrange(lifeExp)\n\n# A tibble: 1,704 × 6\n   country      continent  year lifeExp     pop gdpPercap\n   &lt;fct&gt;        &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt;     &lt;dbl&gt;\n 1 Rwanda       Africa     1992    23.6 7290203      737.\n 2 Afghanistan  Asia       1952    28.8 8425333      779.\n 3 Gambia       Africa     1952    30    284320      485.\n 4 Angola       Africa     1952    30.0 4232095     3521.\n 5 Sierra Leone Africa     1952    30.3 2143249      880.\n 6 Afghanistan  Asia       1957    30.3 9240934      821.\n 7 Cambodia     Asia       1977    31.2 6978607      525.\n 8 Mozambique   Africa     1952    31.3 6446316      469.\n 9 Sierra Leone Africa     1957    31.6 2295678     1004.\n10 Burkina Faso Africa     1952    32.0 4469979      543.\n# ℹ 1,694 more rows\n\n\ndesc() 도우미 함수(helper function)는 내림차순으로 행을 배열한다.\n\ngapminder |&gt; \n  arrange(lifeExp, desc(year))\n\n# A tibble: 1,704 × 6\n   country      continent  year lifeExp     pop gdpPercap\n   &lt;fct&gt;        &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt;     &lt;dbl&gt;\n 1 Rwanda       Africa     1992    23.6 7290203      737.\n 2 Afghanistan  Asia       1952    28.8 8425333      779.\n 3 Gambia       Africa     1952    30    284320      485.\n 4 Angola       Africa     1952    30.0 4232095     3521.\n 5 Sierra Leone Africa     1952    30.3 2143249      880.\n 6 Afghanistan  Asia       1957    30.3 9240934      821.\n 7 Cambodia     Asia       1977    31.2 6978607      525.\n 8 Mozambique   Africa     1952    31.3 6446316      469.\n 9 Sierra Leone Africa     1957    31.6 2295678     1004.\n10 Burkina Faso Africa     1952    32.0 4469979      543.\n# ℹ 1,694 more rows\n\n\n\n1.4 distinct() 함수\n특정 열(변수)에 의거해 중복이 없이 고유한 행만을 골라낸다. 행의 길이가 준다.\ngapminder 데이터와 관련하여 다음의 코드는 어떤 정보를 우리에게 주는지 생각해 본다.\n\ngapminder |&gt; \n  distinct(country)\n\n# A tibble: 142 × 1\n   country    \n   &lt;fct&gt;      \n 1 Afghanistan\n 2 Albania    \n 3 Algeria    \n 4 Angola     \n 5 Argentina  \n 6 Australia  \n 7 Austria    \n 8 Bahrain    \n 9 Bangladesh \n10 Belgium    \n# ℹ 132 more rows\n\n\n.keep_all 아규먼트를 이용하면 나머지 열도 함께 나타낼 수 있다. 나머지 열의 값이 무엇인지 생각해 본다.\n\ngapminder |&gt; \n  distinct(continent, .keep_all = TRUE)\n\n# A tibble: 5 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Albania     Europe     1952    55.2  1282697     1601.\n3 Algeria     Africa     1952    43.1  9279525     2449.\n4 Argentina   Americas   1952    62.5 17876956     5911.\n5 Australia   Oceania    1952    69.1  8691212    10040.",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 변형하기"
    ]
  },
  {
    "objectID": "exec_04.html#열-함수",
    "href": "exec_04.html#열-함수",
    "title": "데이터 변형하기",
    "section": "\n2 열 함수",
    "text": "2 열 함수\n\n2.1 select() 함수\n열(변수)의 일부를 선택한다. 열의 길이가 준다.\n\ngapminder |&gt; \n  select(year, country, gdpPercap)\n\n# A tibble: 1,704 × 3\n    year country     gdpPercap\n   &lt;int&gt; &lt;fct&gt;           &lt;dbl&gt;\n 1  1952 Afghanistan      779.\n 2  1957 Afghanistan      821.\n 3  1962 Afghanistan      853.\n 4  1967 Afghanistan      836.\n 5  1972 Afghanistan      740.\n 6  1977 Afghanistan      786.\n 7  1982 Afghanistan      978.\n 8  1987 Afghanistan      852.\n 9  1992 Afghanistan      649.\n10  1997 Afghanistan      635.\n# ℹ 1,694 more rows\n\n\n열(변수)의 일부를 선택하지 않는다. 역시 열의 길이가 준다. 실질적으로 위와 동일하다.\n\ngapminder |&gt; \n  select(-c(lifeExp, continent, pop))\n\n# A tibble: 1,704 × 3\n   country      year gdpPercap\n   &lt;fct&gt;       &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan  1952      779.\n 2 Afghanistan  1957      821.\n 3 Afghanistan  1962      853.\n 4 Afghanistan  1967      836.\n 5 Afghanistan  1972      740.\n 6 Afghanistan  1977      786.\n 7 Afghanistan  1982      978.\n 8 Afghanistan  1987      852.\n 9 Afghanistan  1992      649.\n10 Afghanistan  1997      635.\n# ℹ 1,694 more rows\n\n\nstarts_with(), ends_with(), contains()와 같은 도우미 함수를 잘 활용하면 효율적으로 필요한 변수만을 선정할 수 있다.\n\ngapminder |&gt; \n  select(starts_with(\"c\"))\n\n# A tibble: 1,704 × 2\n   country     continent\n   &lt;fct&gt;       &lt;fct&gt;    \n 1 Afghanistan Asia     \n 2 Afghanistan Asia     \n 3 Afghanistan Asia     \n 4 Afghanistan Asia     \n 5 Afghanistan Asia     \n 6 Afghanistan Asia     \n 7 Afghanistan Asia     \n 8 Afghanistan Asia     \n 9 Afghanistan Asia     \n10 Afghanistan Asia     \n# ℹ 1,694 more rows\n\n\n\n2.2 mutate() 함수\n기존의 열(변수)에 기반하여 새로운 변수를 생성한다. 열의 길이가 는다.\n\ngapminder |&gt; \n  mutate(\n    gdp_billion = gdpPercap * pop / 10^9\n  )\n\n# A tibble: 1,704 × 7\n   country     continent  year lifeExp      pop gdpPercap gdp_billion\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.        6.57\n 2 Afghanistan Asia       1957    30.3  9240934      821.        7.59\n 3 Afghanistan Asia       1962    32.0 10267083      853.        8.76\n 4 Afghanistan Asia       1967    34.0 11537966      836.        9.65\n 5 Afghanistan Asia       1972    36.1 13079460      740.        9.68\n 6 Afghanistan Asia       1977    38.4 14880372      786.       11.7 \n 7 Afghanistan Asia       1982    39.9 12881816      978.       12.6 \n 8 Afghanistan Asia       1987    40.8 13867957      852.       11.8 \n 9 Afghanistan Asia       1992    41.7 16317921      649.       10.6 \n10 Afghanistan Asia       1997    41.8 22227415      635.       14.1 \n# ℹ 1,694 more rows\n\n\n여러개의 변수를 동시에 생성할 수 있다. row_number() 도우미 함수는 값에 순위를 부여하는 것이고, .keep = \"used\"는 결과에 변수 생성에 동원된 변수만을 포함시키게 해 준다.\n\ngapminder |&gt; \n  filter(year == 2007) |&gt; \n  mutate(\n    gdpPercap_rank = row_number(gdpPercap),\n    lifeExp_highlow = lifeExp &gt; 30000,\n    .keep = \"used\"\n  )\n\n# A tibble: 142 × 4\n   lifeExp gdpPercap gdpPercap_rank lifeExp_highlow\n     &lt;dbl&gt;     &lt;dbl&gt;          &lt;int&gt; &lt;lgl&gt;          \n 1    43.8      975.             19 FALSE          \n 2    76.4     5937.             70 FALSE          \n 3    72.3     6223.             72 FALSE          \n 4    42.7     4797.             64 FALSE          \n 5    75.3    12779.            101 FALSE          \n 6    81.2    34435.            130 FALSE          \n 7    79.8    36126.            132 FALSE          \n 8    75.6    29796.            122 FALSE          \n 9    64.1     1391.             30 FALSE          \n10    79.4    33693.            128 FALSE          \n# ℹ 132 more rows\n\n\n\n2.3 rename() 함수\n변수의 이름을 바꾼다. 열의 길이에는 변화가 없다.\n\ngapminder |&gt; \n  rename(\n    gdp_percap = gdpPercap,\n    left_exp = lifeExp\n  )\n\n# A tibble: 1,704 × 6\n   country     continent  year left_exp      pop gdp_percap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;    &lt;dbl&gt;    &lt;int&gt;      &lt;dbl&gt;\n 1 Afghanistan Asia       1952     28.8  8425333       779.\n 2 Afghanistan Asia       1957     30.3  9240934       821.\n 3 Afghanistan Asia       1962     32.0 10267083       853.\n 4 Afghanistan Asia       1967     34.0 11537966       836.\n 5 Afghanistan Asia       1972     36.1 13079460       740.\n 6 Afghanistan Asia       1977     38.4 14880372       786.\n 7 Afghanistan Asia       1982     39.9 12881816       978.\n 8 Afghanistan Asia       1987     40.8 13867957       852.\n 9 Afghanistan Asia       1992     41.7 16317921       649.\n10 Afghanistan Asia       1997     41.8 22227415       635.\n# ℹ 1,694 more rows\n\n\n패밀리 함수인 rename_with()를 이용하면 다른 것도 가능하다.\n\ngapminder |&gt; \n  rename_with(\n    tolower, starts_with(\"l\")\n  )\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeexp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\n\n2.4 relocate() 함수\n변수의 위치를 바꾼다. 열의 길이에는 변화가 없다.\n\ngapminder |&gt; \n  relocate(year, continent)\n\n# A tibble: 1,704 × 6\n    year continent country     lifeExp      pop gdpPercap\n   &lt;int&gt; &lt;fct&gt;     &lt;fct&gt;         &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1  1952 Asia      Afghanistan    28.8  8425333      779.\n 2  1957 Asia      Afghanistan    30.3  9240934      821.\n 3  1962 Asia      Afghanistan    32.0 10267083      853.\n 4  1967 Asia      Afghanistan    34.0 11537966      836.\n 5  1972 Asia      Afghanistan    36.1 13079460      740.\n 6  1977 Asia      Afghanistan    38.4 14880372      786.\n 7  1982 Asia      Afghanistan    39.9 12881816      978.\n 8  1987 Asia      Afghanistan    40.8 13867957      852.\n 9  1992 Asia      Afghanistan    41.7 16317921      649.\n10  1997 Asia      Afghanistan    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\n.before나 .after 아규먼트를 사용하여 해당 변수를 어떤 변수의 앞이나 뒤로 보낼 수 있다.\n\ngapminder |&gt; \n  relocate(pop, .before = lifeExp )\n\n# A tibble: 1,704 × 6\n   country     continent  year      pop lifeExp gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;    &lt;int&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952  8425333    28.8      779.\n 2 Afghanistan Asia       1957  9240934    30.3      821.\n 3 Afghanistan Asia       1962 10267083    32.0      853.\n 4 Afghanistan Asia       1967 11537966    34.0      836.\n 5 Afghanistan Asia       1972 13079460    36.1      740.\n 6 Afghanistan Asia       1977 14880372    38.4      786.\n 7 Afghanistan Asia       1982 12881816    39.9      978.\n 8 Afghanistan Asia       1987 13867957    40.8      852.\n 9 Afghanistan Asia       1992 16317921    41.7      649.\n10 Afghanistan Asia       1997 22227415    41.8      635.\n# ℹ 1,694 more rows",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 변형하기"
    ]
  },
  {
    "objectID": "exec_04.html#그룹-함수",
    "href": "exec_04.html#그룹-함수",
    "title": "데이터 변형하기",
    "section": "\n3 그룹 함수",
    "text": "3 그룹 함수\n\n3.1 group_by() 함수\n특정 범주 열(변수)에 의거해 행을 분할한다. 행의 길이는 변하지 않는다.\n하나의 범주 변수에 의거해 그룹화한다. 산출물을 보면 year에 의거해 행이 12개의 그룹으로 나누어졌음이 나타나 있다(두 번째 줄: Group: year [12]).\n\ngapminder |&gt; \n  group_by(year)\n\n# A tibble: 1,704 × 6\n# Groups:   year [12]\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\n두 개 이상의 범주 변수에 의거해 그룹화할 수도 있다.\n\ngapminder |&gt; \n  group_by(year, continent)\n\n# A tibble: 1,704 × 6\n# Groups:   year, continent [60]\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\n\n3.2 summarize() 함수\n주어진 열(변수)에 대한 통계 요약값을 계산하고 그것으로 이루어진 새로운 데이터 프레임을 생성한다. 엄밀히 말해 기존 열(변수)을 변형한다기 보다는 기존 데이터 프레임으로부터 새로운 데이터 프레임을 생성한다고 볼 수 있다. summarize() 함수는 대부분의 경우 group_by() 함수와 함께 사용된다. 다음의 둘을 비교해 보라.\n\ngapminder |&gt; \n  filter(year == 2007) |&gt; \n  summarize(mean_gdpPercap = mean(gdpPercap))\n\n# A tibble: 1 × 1\n  mean_gdpPercap\n           &lt;dbl&gt;\n1         11680.\n\n\n\ngapminder |&gt; \n  filter(year == 2007) |&gt; \n  group_by(continent) |&gt; \n  summarize(mean_gdpPercap = mean(gdpPercap))\n\n# A tibble: 5 × 2\n  continent mean_gdpPercap\n  &lt;fct&gt;              &lt;dbl&gt;\n1 Africa             3089.\n2 Americas          11003.\n3 Asia              12473.\n4 Europe            25054.\n5 Oceania           29810.\n\n\n좀 더 복잡한 확장이 가능하다. 마지막의 n()은 자동으로 생성되는 그룹별 빈도값이다.\n\ngapminder |&gt; \n    group_by(continent, year) |&gt; \n    summarize(\n      mean_gdpPercap = mean(gdpPercap),\n      sd_gdpPercap = sd(gdpPercap),\n      mean_pop = mean(pop),\n      sd_pop = sd(pop),\n      n = n()\n      )\n\n# A tibble: 60 × 7\n# Groups:   continent [5]\n   continent  year mean_gdpPercap sd_gdpPercap  mean_pop    sd_pop     n\n   &lt;fct&gt;     &lt;int&gt;          &lt;dbl&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;int&gt;\n 1 Africa     1952          1253.         983.  4570010.  6317450.    52\n 2 Africa     1957          1385.        1135.  5093033.  7076042.    52\n 3 Africa     1962          1598.        1462.  5702247.  7957545.    52\n 4 Africa     1967          2050.        2848.  6447875.  8985505.    52\n 5 Africa     1972          2340.        3287.  7305376. 10130833.    52\n 6 Africa     1977          2586.        4142.  8328097. 11585184.    52\n 7 Africa     1982          2482.        3243.  9602857. 13456243.    52\n 8 Africa     1987          2283.        2567. 11054502. 15277484.    52\n 9 Africa     1992          2282.        2644. 12674645. 17562719.    52\n10 Africa     1997          2379.        2821. 14304480. 19873013.    52\n# ℹ 50 more rows\n\n\ngroup_by()와 arrange()를 결합하는 경우, .by_group = TRUE를 하면 그룹별로 행을 배열할 수 있다(그렇지 않으면 그룹 설정을 무시한 채 행을 배열한다.)\n\ngapminder |&gt; \n  group_by(year, continent) |&gt; \n  arrange(desc(gdpPercap), .by_group = TRUE)\n\n# A tibble: 1,704 × 6\n# Groups:   year, continent [60]\n   country      continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;        &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 South Africa Africa     1952    45.0 14264935     4725.\n 2 Gabon        Africa     1952    37.0   420702     4293.\n 3 Angola       Africa     1952    30.0  4232095     3521.\n 4 Reunion      Africa     1952    52.7   257700     2719.\n 5 Djibouti     Africa     1952    34.8    63149     2670.\n 6 Algeria      Africa     1952    43.1  9279525     2449.\n 7 Namibia      Africa     1952    41.7   485831     2424.\n 8 Libya        Africa     1952    42.7  1019729     2388.\n 9 Congo, Rep.  Africa     1952    42.1   854885     2126.\n10 Mauritius    Africa     1952    51.0   516556     1968.\n# ℹ 1,694 more rows\n\n\n아래는 연도별/대륙별로 일인당 GDP가 가장 높은 국가를 추출한 것이다. 코드를 생각해 보라.\n\n\n# A tibble: 60 × 6\n# Groups:   year, continent [60]\n   country       continent  year lifeExp       pop gdpPercap\n   &lt;fct&gt;         &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 South Africa  Africa     1952    45.0  14264935     4725.\n 2 United States Americas   1952    68.4 157553000    13990.\n 3 Kuwait        Asia       1952    55.6    160000   108382.\n 4 Switzerland   Europe     1952    69.6   4815000    14734.\n 5 New Zealand   Oceania    1952    69.4   1994794    10557.\n 6 South Africa  Africa     1957    48.0  16151549     5487.\n 7 United States Americas   1957    69.5 171984000    14847.\n 8 Kuwait        Asia       1957    58.0    212846   113523.\n 9 Switzerland   Europe     1957    70.6   5126000    17909.\n10 New Zealand   Oceania    1957    70.3   2229407    12247.\n# ℹ 50 more rows\n\n\ngroup_by() 함수가 한 번 적용되면, 그 뒤의 모든 오퍼레이션에 그룹 분할이 적용되기 때문에 예기치 못한 일이 발생할 수 있다. 이것을 회피하기 위해 두 가지 옵션이 있다. 첫번째 방법은 마지막에 upgroup() 함수를 첨가하는 것이다. 아래에 위 질문에 대한 정답이 나타나 있다.\n\ngapminder |&gt; \n  group_by(year, continent) |&gt; \n  slice_max(gdpPercap) |&gt; \n  ungroup()\n\n# A tibble: 60 × 6\n   country       continent  year lifeExp       pop gdpPercap\n   &lt;fct&gt;         &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 South Africa  Africa     1952    45.0  14264935     4725.\n 2 United States Americas   1952    68.4 157553000    13990.\n 3 Kuwait        Asia       1952    55.6    160000   108382.\n 4 Switzerland   Europe     1952    69.6   4815000    14734.\n 5 New Zealand   Oceania    1952    69.4   1994794    10557.\n 6 South Africa  Africa     1957    48.0  16151549     5487.\n 7 United States Americas   1957    69.5 171984000    14847.\n 8 Kuwait        Asia       1957    58.0    212846   113523.\n 9 Switzerland   Europe     1957    70.6   5126000    17909.\n10 New Zealand   Oceania    1957    70.3   2229407    12247.\n# ℹ 50 more rows\n\n\n두 번째 방법은 group_by() 함수 대신 by 아규먼트를 사용하는 것이다. 결과가 달라보이겠지만 정렬의 차이일 뿐 동일하다.\n\ngapminder |&gt; \n  slice_max(gdpPercap, by = c(year, continent))\n\n# A tibble: 60 × 6\n   country      continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;        &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Kuwait       Asia       1952    55.6   160000   108382.\n 2 Kuwait       Asia       1957    58.0   212846   113523.\n 3 Kuwait       Asia       1962    60.5   358266    95458.\n 4 Kuwait       Asia       1967    64.6   575003    80895.\n 5 Kuwait       Asia       1972    67.7   841934   109348.\n 6 Kuwait       Asia       1977    69.3  1140357    59265.\n 7 Saudi Arabia Asia       1982    63.0 11254672    33693.\n 8 Kuwait       Asia       1987    74.2  1891487    28118.\n 9 Kuwait       Asia       1992    75.2  1418095    34933.\n10 Kuwait       Asia       1997    76.2  1765345    40301.\n# ℹ 50 more rows\n\n\n\n3.3 count() 함수\n특정 범주 열(변수)에 의거한 빈도를 빠르게 계산해 준다.\n\ngapminder |&gt; \n  count(year, continent)\n\n# A tibble: 60 × 3\n    year continent     n\n   &lt;int&gt; &lt;fct&gt;     &lt;int&gt;\n 1  1952 Africa       52\n 2  1952 Americas     25\n 3  1952 Asia         33\n 4  1952 Europe       30\n 5  1952 Oceania       2\n 6  1957 Africa       52\n 7  1957 Americas     25\n 8  1957 Asia         33\n 9  1957 Europe       30\n10  1957 Oceania       2\n# ℹ 50 more rows\n\n\nwt 아규먼트를 사용하면 빈도가 아니라 범주별 특정 변수의 합산값을 구할 수 있다.\n\ngapminder |&gt; \n  count(year, continent, wt = pop)\n\n# A tibble: 60 × 3\n    year continent          n\n   &lt;int&gt; &lt;fct&gt;          &lt;dbl&gt;\n 1  1952 Africa     237640501\n 2  1952 Americas   345152446\n 3  1952 Asia      1395357351\n 4  1952 Europe     418120846\n 5  1952 Oceania     10686006\n 6  1957 Africa     264837738\n 7  1957 Americas   386953916\n 8  1957 Asia      1562780599\n 9  1957 Europe     437890351\n10  1957 Oceania     11941976\n# ℹ 50 more rows\n\n\n위의 두 개는 사실 아래와 동일하다.\n\ngapminder |&gt; \n  group_by(year, continent) |&gt; \n  summarize(\n    n = n(),\n    sum_pop = sum(pop)\n  )\n\n# A tibble: 60 × 4\n# Groups:   year [12]\n    year continent     n    sum_pop\n   &lt;int&gt; &lt;fct&gt;     &lt;int&gt;      &lt;dbl&gt;\n 1  1952 Africa       52  237640501\n 2  1952 Americas     25  345152446\n 3  1952 Asia         33 1395357351\n 4  1952 Europe       30  418120846\n 5  1952 Oceania       2   10686006\n 6  1957 Africa       52  264837738\n 7  1957 Americas     25  386953916\n 8  1957 Asia         33 1562780599\n 9  1957 Europe       30  437890351\n10  1957 Oceania       2   11941976\n# ℹ 50 more rows\n\n\n\n3.4 across() 함수\n다수의 열(변수)에 동일한 함수를 적용할 수 있다.\n\ngapminder |&gt; \n  mutate(\n    across(c(lifeExp, gdpPercap), round)\n  )\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952      29  8425333       779\n 2 Afghanistan Asia       1957      30  9240934       821\n 3 Afghanistan Asia       1962      32 10267083       853\n 4 Afghanistan Asia       1967      34 11537966       836\n 5 Afghanistan Asia       1972      36 13079460       740\n 6 Afghanistan Asia       1977      38 14880372       786\n 7 Afghanistan Asia       1982      40 12881816       978\n 8 Afghanistan Asia       1987      41 13867957       852\n 9 Afghanistan Asia       1992      42 16317921       649\n10 Afghanistan Asia       1997      42 22227415       635\n# ℹ 1,694 more rows\n\n\n이것은 다음과 동일하다.\n\ngapminder |&gt; \n  mutate(\n    lifeExp = round(lifeExp),\n    gdpPercap = round(gdpPercap)\n  )\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952      29  8425333       779\n 2 Afghanistan Asia       1957      30  9240934       821\n 3 Afghanistan Asia       1962      32 10267083       853\n 4 Afghanistan Asia       1967      34 11537966       836\n 5 Afghanistan Asia       1972      36 13079460       740\n 6 Afghanistan Asia       1977      38 14880372       786\n 7 Afghanistan Asia       1982      40 12881816       978\n 8 Afghanistan Asia       1987      41 13867957       852\n 9 Afghanistan Asia       1992      42 16317921       649\n10 Afghanistan Asia       1997      42 22227415       635\n# ℹ 1,694 more rows\n\n\nsummarize() 함수와 결합하여 선택된 변수에 특정 함수를 적용하고 그 결과의 이름을 변수명과 함수명을 사용하여 부여할 수 있다.\n\ngapminder |&gt; \n  group_by(year, continent) |&gt; \n  summarize(across(c(lifeExp, gdpPercap), mean, .names = \"mean_{.col}\"))\n\n# A tibble: 60 × 4\n# Groups:   year [12]\n    year continent mean_lifeExp mean_gdpPercap\n   &lt;int&gt; &lt;fct&gt;            &lt;dbl&gt;          &lt;dbl&gt;\n 1  1952 Africa            39.1          1253.\n 2  1952 Americas          53.3          4079.\n 3  1952 Asia              46.3          5195.\n 4  1952 Europe            64.4          5661.\n 5  1952 Oceania           69.3         10298.\n 6  1957 Africa            41.3          1385.\n 7  1957 Americas          56.0          4616.\n 8  1957 Asia              49.3          5788.\n 9  1957 Europe            66.7          6963.\n10  1957 Oceania           70.3         11599.\n# ℹ 50 more rows\n\n\n\n3.5 c_across() 함수\ngroup_by() 함수와 across() 함수가 결합하는 것과 정반대로, rowwise() 함수와 c_across() 함수를 결합하며, 행별 통계값을 산출할 수 있다. 물론 여기서 sd 값은 아무런 의미가 없다.\n\ngapminder |&gt; \n  rowwise() |&gt; \n  mutate(\n    sd = sd(c_across(where(is.numeric)))\n  )\n\n# A tibble: 1,704 × 7\n# Rowwise: \n   country     continent  year lifeExp      pop gdpPercap        sd\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.  4212207.\n 2 Afghanistan Asia       1957    30.3  9240934      821.  4619999.\n 3 Afghanistan Asia       1962    32.0 10267083      853.  5133067.\n 4 Afghanistan Asia       1967    34.0 11537966      836.  5768510.\n 5 Afghanistan Asia       1972    36.1 13079460      740.  6539272.\n 6 Afghanistan Asia       1977    38.4 14880372      786.  7439719.\n 7 Afghanistan Asia       1982    39.9 12881816      978.  6440408.\n 8 Afghanistan Asia       1987    40.8 13867957      852.  6933499.\n 9 Afghanistan Asia       1992    41.7 16317921      649.  8158513.\n10 Afghanistan Asia       1997    41.8 22227415      635. 11113262.\n# ℹ 1,694 more rows",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 변형하기"
    ]
  },
  {
    "objectID": "exec_02.html",
    "href": "exec_02.html",
    "title": "R과 데이터사이언스: 개요",
    "section": "",
    "text": "이 실습은 R로 데이터사이언스를 하는 과정을 개괄적으로 이해하기 위한 것이다. 특히 Figure 1 에 나타나 있는 데이터사이언스 과정 중 특히 네 부분, 데이터 불러오기(importing), 정리하기(tidying), 변형하기(transforming), 시각화하기(visualizing)에 초첨을 맞춘다. 보통 데이터 정리하기와 변형하기를 합쳐 데이터와 씨름하기(wrangling)이라고 부르고, 정리하기와 시각화하기를 합쳐 탐색하기(exploring)라고 한다. 데이터를 살펴보기 위해 모델링을 사용하는 경우, 일부 모델링하기도 탐색하기에 포함되는 것으로 볼 수도 있다.\n\n\n\n\n\nFigure 1: 데이터사이언스의 과정(https://r4ds.hadley.nz/whole-game)\n\n\n데이터사이언스의 다양한 과업을 수행하기 위해 Base R의 함수들이 사용되고 있지만, 보통은 이와 함께 다양한 패키지(package)들이 널리 사용되고 있다. 따라서 본 실습에서는 우선 패키지의 사용과 관련된 부분을 다루고 뒤를 이어 데이터사이언스의 네 과제가 어떻게 이루어지는지 대략적으로 다룰 것이다.\n\n패키지와 tidyverse\n데이터 시각화하기\n데이터 변형하기\n데이터 정리하기\n데이터 불러오기",
    "crumbs": [
      "R과 데이터사이언스",
      "R과 데이터사이언스: 개요"
    ]
  },
  {
    "objectID": "exec_02.html#실습-개요",
    "href": "exec_02.html#실습-개요",
    "title": "R과 데이터사이언스: 개요",
    "section": "",
    "text": "이 실습은 R로 데이터사이언스를 하는 과정을 개괄적으로 이해하기 위한 것이다. 특히 Figure 1 에 나타나 있는 데이터사이언스 과정 중 특히 네 부분, 데이터 불러오기(importing), 정리하기(tidying), 변형하기(transforming), 시각화하기(visualizing)에 초첨을 맞춘다. 보통 데이터 정리하기와 변형하기를 합쳐 데이터와 씨름하기(wrangling)이라고 부르고, 정리하기와 시각화하기를 합쳐 탐색하기(exploring)라고 한다. 데이터를 살펴보기 위해 모델링을 사용하는 경우, 일부 모델링하기도 탐색하기에 포함되는 것으로 볼 수도 있다.\n\n\n\n\n\nFigure 1: 데이터사이언스의 과정(https://r4ds.hadley.nz/whole-game)\n\n\n데이터사이언스의 다양한 과업을 수행하기 위해 Base R의 함수들이 사용되고 있지만, 보통은 이와 함께 다양한 패키지(package)들이 널리 사용되고 있다. 따라서 본 실습에서는 우선 패키지의 사용과 관련된 부분을 다루고 뒤를 이어 데이터사이언스의 네 과제가 어떻게 이루어지는지 대략적으로 다룰 것이다.\n\n패키지와 tidyverse\n데이터 시각화하기\n데이터 변형하기\n데이터 정리하기\n데이터 불러오기",
    "crumbs": [
      "R과 데이터사이언스",
      "R과 데이터사이언스: 개요"
    ]
  },
  {
    "objectID": "exec_02.html#패키지와-tidyverse-패키지",
    "href": "exec_02.html#패키지와-tidyverse-패키지",
    "title": "R과 데이터사이언스: 개요",
    "section": "\n1 패키지와 tidyverse 패키지",
    "text": "1 패키지와 tidyverse 패키지\n\n1.1 패키지\n패키지는 유사한 과업을 수행하는데 도움을 주는 함수들의 묶음 정도로 정의할 수 있다. 현재 CRAN(The Comprehensive R Archive Network)에는 20,000개 정도의 패키지가 등록되어 있다고 한다. CRAN에 패키지를 등록하는게 쉽지 않은 일이기 때문에 GitHub과 같은 곳을 통해 접근 가능한 패키지까지 합치면 도채체 몇 개의 R 패키지가 세상에 존재하는지 알기 어렵다.\n패키지를 사용하기 우선 패키지가 사용자의 디바이스에 물리적으로 인스톨되어 있어야 하고, R 세션에서 패키지를 불러와야 한다. 패키지를 인스톨하는 방법은 두 가지 이다. 스크립트 내에서 패키지를 반복해서 인스톨하는 것은 합리적이지 않기 때문에 전자의 관행을 추천한다.\n\nOutput 창의 Packages 탭 선택: Install 아이콘 클릭하고 패키지 이름 입력\n스크립트 내에서 인스톨하기: install.packages(\"패키지명\")\n\n쌍따옴표 속에 패키지 이름을 타이핑해야 한다. 한번 인스톨이 되면 업데이트하지 않는 한 새롭게 패키지를 인스톨할 필요가 없다. 인스톨된 패키지를 사용하려면 스크립트 내에서 다음과 같이 타이핑하고 실행한다.\n\nlibrary(패키지명)\n\n괄호 속에 패키지명을 기입해야 한다.\n\n\n\n\n\n\nImportant\n\n\n\ninstall.packages()함수에서는 반드시 패키지명을 쌍따옴표로 싸야하지만, library()함수에서는 그렇지 않다. 불러온 패키지는 R 세션이 유지되는 동안 내내 사용할 수 있지만, R 세션을 끝내고 다시 시작하면 다시 library()함수를 이용해 다시 불러와야 한다. 그래서 R 스크립트 파일의 시작 부분에는 패키지를 불러오는 코드를 위치시키고, 다시 스크립트 파일을 열 때마다 그 부분을 재실행하는 것이 좋은 습관이다.\n\n\n\n1.2 tidyverse 패키지\n데이터사이언스 과정의 각 단계는 특징적인 과업으로 구성되어 있고, 거기에 맞춰 특징적인 함수들을 장착한 패키지들이 개발되어 왔다. 그런데 최근 RStudio는 데이터사이언스와 밀접히 관련된 패키지들을 모아 일종의 엄브렐러 패키지인 tidyverse를 만들어 제공하고 있다. tidyverse 패키지는 패키지의 패키지인데, 핵심적인 구성 패키지에 다음과 같은 것들이 있다.\n\nggplot2: 시각화하기\ndplyr: 변형하기\ntidyr:정리하기\nreadr: 불러오기\ntibble: 데이터 프레임 관련\nstringr: 문자열 처리 관련\nforcats: 범주 변수(팩터) 처리 관련\nlubracate: 시간 변수 처리 관련\npurrr: 함수형 프로그래밍(functional programming) 관련\n\ntidyverse 패키지를 사용하는 것의 장점은 이 패키지만 불러오면 구성 패키지까지 한꺼번에 사용할 수 있게 된다는 점이다. 스크립트 내에서 다음과 같은 코드를 실행한다.\n\nlibrary(tidyverse)",
    "crumbs": [
      "R과 데이터사이언스",
      "R과 데이터사이언스: 개요"
    ]
  },
  {
    "objectID": "exec_02.html#시각화하기",
    "href": "exec_02.html#시각화하기",
    "title": "R과 데이터사이언스: 개요",
    "section": "\n2 시각화하기",
    "text": "2 시각화하기\n\n2.1 데이터 살펴보기\n이 실습을 위해 남극 파머군도(Palmer Archipelago)에 서식하는 펭귄 성체의 신체 계측 데이터를 사용한다. 이 데이터는 palmerpenguins라는 패키지에 포함되어 있으므로 해당 패키지를 불러온다.\n\nlibrary(palmerpenguins)\n\n이제 이 페키지에 포함되어 있는 penguins라는 이름의 데이터를 불러온다.\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n데이터를 자세히 살펴보면 몇 가지를 알 수 있다.\n\n티블(tibble)이라는 형식의 데이터 프레임이다. 티블은 tidyverse의 공식 데이터 프레임 포맷이다.\n관측개체는 344개, 변수는 8개이다.\nspecies, island, sex 변수의 유형은 팩트형(fctr)이고, bill_length_mm, bill_depth_mm은 실수형(dbl)이고, 나머지는 정수형(int)이다.\n\n변수가 많아지면 전체 데이터를 조망하기 어렵기 때문에, 최초의 tidyverse 함수인 glimpse()를 사용하여 데이터의 행과 열을 바꾸어 보자.\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n2.2 그래프 만들기\n이 penguins 데이터와 ggplot2() 패키지를 이용하여 “펭귄의 날개 길이와 몸무게의 관계”를 표현하는 그래프를 작성해 보자. ggplot2()의 문법에 대한 사항은 따로 공부할 기회가 있으므로 여기서는 제작 과정을 한 번 따라가 본다.\n\n2.2.1 플롯 객체의 지정\nggplot()이라는 함수를 통해 플롯 제작을 개시하는 단계이며, 어떤 데이터를 사용할지를 지정한다.\n\nggplot(data = penguins)\n\n\n\n\n\n\n\n\n2.2.2 플롯의 심미성 지정\n데이터가 어떤 시각적 속성으로 표현될 것인가를 지정한다. 여기서는 간단히 어떤 변수들이 x-축과 y-축에 나타나는지만 지정한다. mapping = aes() 아규먼트가 핵심이다.\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n)\n\n\n\n\n\n\n\n\n2.2.3 플롯의 기하 속성 지정\n데이터가 어떤 기하학적 속성으로 표현될 것인가를 지정한다. geom 아규먼트가 핵심인데, geom_point()는 데이터를 포인트라고 하는 기하학적 속성으로 표현한다는 것을 지정한 것으로 결국 산포도(scatterplot)을 산출하게 된다.\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point()\n\n\n\n\n\n\n\n\n2.2.4 심미성의 첨가\n이러한 관련성이 펭귄의 종족에 따라 다르게 나타나는지를 탐색하기 위해 color 라는 심미성을 species라는 변수에 적용한다.\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)\n) +\n  geom_point()\n\n\n\n\n\n\n\n\n2.2.5 기하 레이어의 첨가\n두 변수의 관련성을 보여주는 선형 기하를 첨가한다. 여기서는 geom_smooth()를 이용하여 OLS 회귀선을 첨가한다.\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point(mapping = aes(color = species)) +\n  geom_smooth(method = \"lm\")\n\n\n\n\n\n\n\n\n2.2.6 라벨링 등 마무리 작업\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point(mapping = aes(color = species)) +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = \"Body mass and flipper length\",\n    subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n    x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n    color = \"Species\", shape = \"Species\"\n  )",
    "crumbs": [
      "R과 데이터사이언스",
      "R과 데이터사이언스: 개요"
    ]
  },
  {
    "objectID": "exec_02.html#변형하기",
    "href": "exec_02.html#변형하기",
    "title": "R과 데이터사이언스: 개요",
    "section": "\n3 변형하기",
    "text": "3 변형하기\n변형하기와 관련된 함수들은 대부분 dplyr 패키지에 포함되어 있다.\n\n3.1 데이터 살펴보기\n이 실습을 위해 미국 교통통계국(U.S. Bureau of Transportation)이 제공하는 데이터를 사용하는데, 이것은 2013년 한 해 동안 미국 뉴욕시를 출발한 336,776대의 항공기에 대한 정보를 담고 있다. 이 데이터는 nycflights13 이라는 패키지에 포함되어 있으므로 해당 패키지를 불러온다. 그리고 나서 패키지에 포함되어 있는 flights라는 이름의 데이터를 불러온다.\n\nlibrary(nycflights13)\nglimpse(flights)\n\nRows: 336,776\nColumns: 19\n$ year           &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        &lt;chr&gt; \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        &lt;chr&gt; \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         &lt;chr&gt; \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           &lt;chr&gt; \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n\n\n\n3.2 주요 함수\n여기서는 가장 널리 사용되는 6개 함수에 대해서만 개략적으로 다룬다. 그 6개 함수는 select(), filter(), arrange(), mutate(), group_by(), summerize()이다. 조교의 도움을 받아 각 함수가 무슨 일을 한 것인지 이해한다.\n\n3.2.1 select() 함수\n열(변수) 중 일부를 솎아낸다. 즉, 변수의 갯수를 줄인다.\n\nselect(flights, year, month, day)\n\n# A tibble: 336,776 × 3\n    year month   day\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# ℹ 336,766 more rows\n\n\n\n3.2.2 filter() 함수\n특정 열(변수)에 의거해 조건을 만족하는 행을 솎아낸다. 즉 관측개체의 갯수를 줄인다.\n\nfilter(flights, month == 1 & day == 1)\n\n# A tibble: 842 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 832 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n3.2.3 arrange() 함수\n특정 열(변수)에 의거해 행의 순서를 바꾼다.\n\narrange(flights, year, month, day)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n3.2.4 mutate() 함수\n기존의 열(변수)을 변형하여 새로운 열(변수)을 생성한다.\n\nmutate(flights,\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60\n  )\n\n# A tibble: 336,776 × 21\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 13 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;, gain &lt;dbl&gt;, speed &lt;dbl&gt;\n\n\n\n3.2.5 group_by() 함수\n열(변수)(범주형 변수, categorical variables)에 의거해 전체 행을 그룹으로 분할한다.\n\ngroup_by(flights, month)\n\n# A tibble: 336,776 × 19\n# Groups:   month [12]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n3.2.6 summerize() 함수\n열(변수)의 통계량을 산출하여 새로운 열(변수)에 저장한다.\n\nsummarize(flights, delay = mean(dep_delay, na.rm = TRUE))\n\n# A tibble: 1 × 1\n  delay\n  &lt;dbl&gt;\n1  12.6\n\n\n위의 group_by() 함수와 결합하면, 그룹별로 열(변수)의 통계량을 산출하여 새로운 열(변수)에 저장할 수 있다.\n\nby_day &lt;- group_by(flights, year, month, day)\nsummarize(by_day, delay = mean(dep_delay, na.rm = TRUE))\n\n# A tibble: 365 × 4\n# Groups:   year, month [12]\n    year month   day delay\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;\n 1  2013     1     1 11.5 \n 2  2013     1     2 13.9 \n 3  2013     1     3 11.0 \n 4  2013     1     4  8.95\n 5  2013     1     5  5.73\n 6  2013     1     6  7.15\n 7  2013     1     7  5.42\n 8  2013     1     8  2.55\n 9  2013     1     9  2.28\n10  2013     1    10  2.84\n# ℹ 355 more rows",
    "crumbs": [
      "R과 데이터사이언스",
      "R과 데이터사이언스: 개요"
    ]
  },
  {
    "objectID": "exec_02.html#정리하기",
    "href": "exec_02.html#정리하기",
    "title": "R과 데이터사이언스: 개요",
    "section": "\n4 정리하기",
    "text": "4 정리하기\n정리하기와 관련된 함수들은 대부분 tidyr 패키지에 포함되어 있다. 많은 함수가 있지만 가장 중요한 두 개의 함수에만 집중한다.\n\n4.1 데이터 살펴보기\n이 실습에서는 tidyverse에 포함되어 있는 매우 단순한 데이터를 사용한다.\n\ntable4a\n\n# A tibble: 3 × 3\n  country     `1999` `2000`\n  &lt;chr&gt;        &lt;dbl&gt;  &lt;dbl&gt;\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n\n\n\ntable2\n\n# A tibble: 12 × 4\n   country      year type            count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n\n\n\n4.2 주요 함수\n\n4.2.1 pivot_longer() 함수\ntable4a에서 1999과 2000은 변수명일 수 없다. year라는 변수의 속성이어야 한다.\n\npivot_longer(\n  table4a, \n  cols = c(`1999`, `2000`),\n  names_to = \"year\",\n  values_to = \"cases\"\n)\n\n# A tibble: 6 × 3\n  country     year   cases\n  &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt;\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766\n\n\n\n4.2.2 pivot_wider() 함수\ntable2에서 type 변수는 두 개의 변수명을 포함하고 있다. 즉, cases와 population은 속성값이라기 보다는 변수명이다.\n\npivot_wider(\n  table2, \n  names_from = \"type\",\n  values_from = \"count\"\n)\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583",
    "crumbs": [
      "R과 데이터사이언스",
      "R과 데이터사이언스: 개요"
    ]
  },
  {
    "objectID": "exec_02.html#불러오기",
    "href": "exec_02.html#불러오기",
    "title": "R과 데이터사이언스: 개요",
    "section": "\n5 불러오기",
    "text": "5 불러오기\n불러오기와 관련된 함수들은 대부분 readr 패키지에 포함되어 있다. 여러 유형의 파일을 불러오기 위해 여러 함수가 존재하지만, 콤마분리값(comma-separated values, CSV) 형식의 데이터를 불러오는 함수(read_csv())만 실습한다.\n\nstudents &lt;- read_csv(\"https://pos.it/r4ds-students-csv\")\nglimpse(students)\n\nRows: 6\nColumns: 5\n$ `Student ID`   &lt;dbl&gt; 1, 2, 3, 4, 5, 6\n$ `Full Name`    &lt;chr&gt; \"Sunil Huffmann\", \"Barclay Lynn\", \"Jayendra Lyne\", \"Leo…\n$ favourite.food &lt;chr&gt; \"Strawberry yoghurt\", \"French fries\", \"N/A\", \"Anchovies…\n$ mealPlan       &lt;chr&gt; \"Lunch only\", \"Lunch only\", \"Breakfast and lunch\", \"Lun…\n$ AGE            &lt;chr&gt; \"4\", \"5\", \"7\", NA, \"five\", \"6\"",
    "crumbs": [
      "R과 데이터사이언스",
      "R과 데이터사이언스: 개요"
    ]
  },
  {
    "objectID": "exec_02.html#파이프-연산자pipe-operator",
    "href": "exec_02.html#파이프-연산자pipe-operator",
    "title": "R과 데이터사이언스: 개요",
    "section": "\n6 파이프 연산자(pipe operator)",
    "text": "6 파이프 연산자(pipe operator)\n우리는 이전 실습에서 할당 연산자(&lt;-)에 대해 배웠다. 오늘 살펴본 다양한 변형의 결과를 다른 데이터 프레임에 담고 싶으면 다음과 같이 할당 연산자를 사용할 수 있다.\n\nflights_day1 &lt;- filter(flights, month == 1 & day == 1)\nglimpse(flights_day1)\n\nRows: 842\nColumns: 19\n$ year           &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        &lt;chr&gt; \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        &lt;chr&gt; \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         &lt;chr&gt; \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           &lt;chr&gt; \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n\n\n앞으로 할당 연산자보다 훨씬 더 빈번하게 사용하게 될 연산자를 소개하려고 한다. 그것은 파이프 연산자(pipe operator)라는 것으로, %&gt;% 혹은 |&gt;로 표시하는 것이다. 원래 이 연산자의 원리는 magrittr 패키지에서 처음 소개되었는데, 차츰 R 커뮤니티에 파급되더니 급기야는 대세로 자리잡았다. 그래서 특정 패키지를 깔지 않아도 파이프 연산자를 사용할 수 있게 하기 위해 Base R에 도입되었고(이것을 원파이프 연산자(native pipe operator)라고 부른다), 부호로 %&gt;% 대신 |&gt;를 사용한다. 둘 사이에 차이는 거의 없지만, 후자가 점점 표준이 되고 있기 때문에 본 수업에서는 그것을 사용한다. 다음의 두 가지에 유의한다.\n\n현재 RStudio의 디폴트는 %&gt;%로 설정되어 있다. 이것을 Tools &gt; Global Options &gt; Code에 가서 ’Use native pipe operator, |&gt; (requires R 4.1+)’를 선택해 주어야 한다. 아래의 Figure 2 를 참고하라.\n\n\n\n\n\n\nFigure 2: 파이프 연산자(https://r4ds.hadley.nz/data-transform)\n\n\n\n단축키는 Crtl + Shift + M이다. 다른 건 몰라도 이 단축키만은 반드시 기억해야 한다.\n\n다음의 두 코드를 비교해 보라. 먼저 파이프 연산자를 사용하지 않은 경우이다.\n\nflights1 &lt;- filter(flights, dest == \"IAH\")\nflights2 &lt;- mutate(flights1, speed = distance / air_time * 60)\nflights3 &lt;- select(flights2, year:day, dep_time, carrier, flight, speed)\narrange(flights3, desc(speed))\n\n# A tibble: 7,198 × 7\n    year month   day dep_time carrier flight speed\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt; &lt;chr&gt;    &lt;int&gt; &lt;dbl&gt;\n 1  2013     7     9      707 UA         226  522.\n 2  2013     8    27     1850 UA        1128  521.\n 3  2013     8    28      902 UA        1711  519.\n 4  2013     8    28     2122 UA        1022  519.\n 5  2013     6    11     1628 UA        1178  515.\n 6  2013     8    27     1017 UA         333  515.\n 7  2013     8    27     1205 UA        1421  515.\n 8  2013     8    27     1758 UA         302  515.\n 9  2013     9    27      521 UA         252  515.\n10  2013     8    28      625 UA         559  515.\n# ℹ 7,188 more rows\n\n\n다음은 파이프 연산자를 사용한 경우이다. 동일한 결과를 가져다 주지만 훨신 더 간결하고 직관적이고 이해하기 쉽다. 파이프 연산자의 사용 원리는 뒤에서 자세히 배운다.\n\nflights |&gt; \n  filter(dest == \"IAH\") |&gt; \n  mutate(speed = distance / air_time * 60) |&gt; \n  select(year:day, dep_time, carrier, flight, speed) |&gt; \n  arrange(desc(speed))\n\n# A tibble: 7,198 × 7\n    year month   day dep_time carrier flight speed\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt; &lt;chr&gt;    &lt;int&gt; &lt;dbl&gt;\n 1  2013     7     9      707 UA         226  522.\n 2  2013     8    27     1850 UA        1128  521.\n 3  2013     8    28      902 UA        1711  519.\n 4  2013     8    28     2122 UA        1022  519.\n 5  2013     6    11     1628 UA        1178  515.\n 6  2013     8    27     1017 UA         333  515.\n 7  2013     8    27     1205 UA        1421  515.\n 8  2013     8    27     1758 UA         302  515.\n 9  2013     9    27      521 UA         252  515.\n10  2013     8    28      625 UA         559  515.\n# ℹ 7,188 more rows",
    "crumbs": [
      "R과 데이터사이언스",
      "R과 데이터사이언스: 개요"
    ]
  },
  {
    "objectID": "exec_02.html#section",
    "href": "exec_02.html#section",
    "title": "R과 데이터사이언스: 개요",
    "section": "\n7 ",
    "text": "7",
    "crumbs": [
      "R과 데이터사이언스",
      "R과 데이터사이언스: 개요"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "exec_01.html",
    "href": "exec_01.html",
    "title": "R과 RStudio 소개",
    "section": "",
    "text": "이 실습은 R과 RStudio의 기본기를 다지는 것이다. 이 실습을 통해 다음과 같은 과제를 수행할 것이다.\n\nR과 RStudio 설치\nRStudio 둘러보기\n프로젝트와 스크립트",
    "crumbs": [
      "R과 데이터사이언스",
      "R과 RStudio 소개"
    ]
  },
  {
    "objectID": "exec_01.html#실습-개요",
    "href": "exec_01.html#실습-개요",
    "title": "R과 RStudio 소개",
    "section": "",
    "text": "이 실습은 R과 RStudio의 기본기를 다지는 것이다. 이 실습을 통해 다음과 같은 과제를 수행할 것이다.\n\nR과 RStudio 설치\nRStudio 둘러보기\n프로젝트와 스크립트",
    "crumbs": [
      "R과 데이터사이언스",
      "R과 RStudio 소개"
    ]
  },
  {
    "objectID": "exec_01.html#r과-rstudio-설치",
    "href": "exec_01.html#r과-rstudio-설치",
    "title": "R과 RStudio 소개",
    "section": "\n1 R과 RStudio 설치",
    "text": "1 R과 RStudio 설치\n프로그램을 다운로드하기 위해 다음의 웹사이트로 이동한다. 여기는 RStudio를 만든 posit(과거에는 회사명 자체도 RStudio였음)이라는 회사가 관리하는 RStudio Desktop 다운로드 페이지이다.\nhttps://posit.co/download/rstudio-desktop/\n그러면 Figure 1 와 같이 R과 RStudio를 설치할 수 있는 화면이 나타날 것이다.\n\n\n\n\n\nFigure 1: 다운로드 화면\n\n\n\n1.1 R의 설치\n왼쪽의 다운로드 바를 클릭하면 CRAN(The Comprehensive R Archive Network)으로 이동한다. 조교의 도움을 받아 자신의 운영체계에 맞는 R의 최신 버전을 다운로드하고 자신의 디바이스에 설치한다. 이 다큐먼트 작성 시점 기준으로 R의 최신 버전은 4.3.2이다.\n\n\n\n\n\n\nNote\n\n\n\nCRAN은 R의 핵심 소프트웨어 저장소(software repository)이다. R 프로그램 자체의 과거와 현재의 버전들 뿐만 아니라 수많은 R 패키지(package)(현재 대략 20,000개)가 모여 있는 곳이다. 1997년 Kurt Hornik와 Friedrich Leisch에 의해 처음 만들어졌으며, 현재에도 Hornik와 많은 자원봉사자들에 의해 운영되고 있다. 자세한 사항은 Wikipedia를 참조할 수 있다.\n\n\n\n1.2 RStudio의 설치\nR의 지배적인 IDE(Integrated Development Environment, 통합개발환경)인 RStudio를 설치한다. 다시 원래의 다운로드 페이지로 돌아와, 오른편의 다운로드 바를 클릭하면 윈도우즈용 RStudio의 파일을 다운로드할 수 있다. 스크롤 다운하면 다른 운영체계를 위한 RStudio를 다운로드할 수 있다. 조교의 도움을 받아 자신의 디바이스에 설치한다. 이 다큐먼트 작성 시점 기준으로 RStudio의 최신 버전은 2024년 1월 29일에 발표된 2023.12.1+402이다.",
    "crumbs": [
      "R과 데이터사이언스",
      "R과 RStudio 소개"
    ]
  },
  {
    "objectID": "exec_01.html#rstudio-둘러보기",
    "href": "exec_01.html#rstudio-둘러보기",
    "title": "R과 RStudio 소개",
    "section": "\n2 RStudio 둘러보기",
    "text": "2 RStudio 둘러보기\n\n2.1 창(pane, 패인)\nStudio를 실행하면 아마도 대부분의 경우 Figure 2 와 같은 화면을 보게 될 것이다. 크게 세 개의 창으로 구성되어 있음을 알 수 있다.\n\n\n\n\n\nFigure 2: 세 개의 창\n\n\n왼편에 가장 크게 나타나 있는 것을 Console 창(pane)이라고 부르고, 우하의 창은 Output 창 혹은 File 창이라고 부른다. 우상에도 또 다른 창이 하나 보이는데 보통 Environment 창이라고 부른다.\n\n\n\n\n\n\nNote\n\n\n\n개별 창은 여러 개의 탭(tab)으로 구성되어 있는데, 탭의 기능이 매우 다양하기 때문에 소속 탭의 모든 기능을 포괄하는 일관성 있는 창 이름을 붙이는 것이 매우 어렵다. 예를 들어 Output 창의 경우 Plots와 Viewer 탭은 결과물을 보여주는 것이라 할 수 있지만 나머지 탭은 꼭 그렇지도 않다.\n\n\n\n2.2 Console 창에서 놀아보기\n여기서는 Console 창을 통해 R의 가장 기본적인 다음의 개념들에 대해 알아보고자 한다. Console 창은 R에서 CLI(command-line interface, 명령줄(어) 인터페이스) 역할을 하는 가장 핵심적인 부분이다. 사용자가 프로그램을 통해 컴퓨터와 상호작용하는 인터페이스이다.\n\n프롬프트(prompt): 명령 프롬프트(command prompt)라고도 불리는 것으로, CLI에서 명령어 대기 상태를 나타내는 일종의 부호이다. R에서는 &gt;를 사용한다.\n할당(assignment): 값을 식별자(identifier)를 가진 객체로 전환하는 과정을 의미한다. 프로그래밍 언어는 할당을 위한 고유한 연산자(operator)를 가지고 있는데, R은 &lt;-을 사용한다. =도 동일한 기능을 하는데, 권장하지는 않는다.\n객체(object): 값을 품고 있는, 식별자를 가진, 메모리 상의 기본 단위\n함수(function): 특정 동작을 수행하는 코드 블록을 의미한다. 인풋을 함수에 적용하면 함수의 고유한 동작을 통해 아웃풋이 산출된다.\n벡터(vector): 숫자의 일차원적 집합으로 보통 개별 행(row) 혹은 개별 열(column)을 의미한다.\n데이터 프레임(data frame): 하나 이상의 벡터를 모아 둔 숫자의 2차원적 집합으로, 다수의 행과 다수의 열로 이루어진 테이블을 의미한다. 이것이 보통 우리가 데이터셋이라고 부르는 것이다.\n\n\n2.2.1 프롬프트, 할당, 객체\n콘솔 창에 R 프롬프트인 &gt;가 나타나 있을 것이다. 아래와 같이 숫자 1을 타이핑하고 실행을 위해 [enter] 키를 누른다.\n\n1\n\n[1] 1\n\n\n간단한 연산을 해본다. 사실 R은 기본적으로 계산기이다.\n\n1 + 2\n\n[1] 3\n\n\n이제 할당 연산자(&lt;-)를 활용하여 할당을 해보자.\n\na &lt;- 1\n\n우상의 환경 창을 보면 뭔가 생성된 것을 확인할 수 있을 것이다. a라는 객체가 생성되었으며 그것은 1이라는 값을 품고 있다는 의미이다. 이제 a는 알파벳 소문자가 아니라 1이라는 숫자와 필연적으로 결합해 있는 객체이다. 다음과 같이 하면 이러한 사실을 명확히 확인할 수 있다.\n\na\n\n[1] 1\n\n\n아래와 같이 하면 객체끼리의 연산이 가능하다.\n\nb &lt;- 2\nc &lt;- a + b\nc\n\n[1] 3\n\n\n\n2.2.2 함수\nsum() 함수를 사용하여 동일한 연산을 할 수 있다. sum() 은 R에 기본적으로 내장되어 있는 Base R 함수 중 하나이다.\n\nsum(a, b)\n\n[1] 3\n\n\n\n\n\n\n\n\nImportant\n\n\n\n지금부터 모든 함수명에는 항상 ()를 연결하여 나타낼 것이다. 다른 객체명과의 혼동을 방지하기 위한 것도 있지만, 모든 함수는 () 속에 인풋(이것을 아규먼트(argument, 인자)라고 부른다)을 받아들이기 때문이다.\n\n\nR에는 수 많은 내장 함수가 있다. 그 중 몇가지만 실행하면 다음과 같다. sqrt()는 제곱근을, abs()는 절대값을, log10()는 로그값을 산출해준다.\n\nsqrt(2)\n\n[1] 1.414214\n\nabs(-3)\n\n[1] 3\n\nlog10(100)\n\n[1] 2\n\n\n\n2.2.3 벡터와 데이터 프레임\n위에서 살펴본 숫자 하나하나는 큰 의미가 없다. 우리는 보통 숫자의 집합(array), 즉 벡터를 다룬다.\n\na &lt;- c(58, 26, 24)\nb &lt;- c(\"이상일\", \"김세창\", \"김우형\")\nc &lt;- c(TRUE, TRUE, FALSE)\n\na, b, c는 모두 벡터이다. 우상의 Environment 창에서도 이러한 사실을 확인할 수 있다. 그런데, 이 세가지 벡터는 데이터의 유형(type)이라는 측면에서 서로 다르다. a는 숫자형(numeric), b는 문자형(character), c는 논리형(logical)이다. Environment 창을 보면, a에 대해서는 num, b에 대해서는 chr, c에 대해서는 logi라는 축약어가 붙어 있음을 알 수 있는데, 이것이 바로 벡터의 유형을 나타내고 있는 것이다. 사실 R에서 다루는 벡터의 유형은 10가지가 넘는다.\n\n\n\n\n\n\nNote\n\n\n\nR에서 사용되는 데이터 유형에 대해서는 다음의 웹사이트를 참고할 수 있다. https://tibble.tidyverse.org/articles/types.html\n\n\n벡터를 data.frame()이라는 함수를 통해 결합하면 데이터 프레임을 만들 수 있다.\n\ndf &lt;- data.frame(a, b, c)\ndf\n\n   a      b     c\n1 58 이상일  TRUE\n2 26 김세창  TRUE\n3 24 김우형 FALSE\n\n\n우상의 Environment 창을 보면 뭔가 변화가 있음을 확인할 수 있을 것이다. Data가 생겼고 그 아래에 df가 생성되어 있다. “3 obs. of 3 variables”라는 말이 굉장히 중요하다. 이것은 df라는 데이터 프레임 객체가 3개의 관측개체(observations)와 3개의 변수(variables)로 구성되어 있다는 것을 의미한다. 데이터 프레임, 관측개체, 변수에 대해서는 강의에서 상세하게 다룬다.\nEnvironment 창에서 df를 클릭해보라. 그러면 왼편에 또 하나의 창이 생기면서 마치 엑셀과 같은 형식으로 데이터가 나타날 것이다. View() 함수를 실행해도 동일한 결과를 얻을 수 있다.\n\nView(df)\n\n여기서 중요한 것은 새로 생긴 창이다. 이것을 보통 Editor 창이라고 부른다. 이제부터 Console은 부차적인 목적으로만 사용할 것이고 Editor 창이 주인공이 된다.",
    "crumbs": [
      "R과 데이터사이언스",
      "R과 RStudio 소개"
    ]
  },
  {
    "objectID": "exec_01.html#프로젝트project와-스크립트script",
    "href": "exec_01.html#프로젝트project와-스크립트script",
    "title": "R과 RStudio 소개",
    "section": "\n3 프로젝트(project)와 스크립트(script)",
    "text": "3 프로젝트(project)와 스크립트(script)\n\n3.1 프로젝트 만들기\n\n3.1.1 R 프로젝트의 개념\nRStudio에서 프로젝트란 한 단위의 R 과업을 의미한다. 매우 단순한 과업도 있겠지만, 보통 데이터를 읽고, 정돈하고, 변형하고, 시각화하고, 모델링하는 등의 다양한 활동이 개입된다. 하나의 일관된 목적을 위해 이러한 다양한 일을 한다면, 이것들을 한데 모아 함께 관리하는 것이 좋을 것이다. 프로젝트는 하나의 과업을 위해 당신이 행한 모든 것이 체계적으로 정돈되어 있는 가상의 방이다. 좀 이질적인 과업을 하게 된다면 기존의 프로젝트 속에서 하기 보다는 또 다른 프로젝트를 만들어 그 속에서 하는 것이 효과적일 것이다.\nRStudio의 프로젝트는 실질적으로 하나의 폴더를 의미한다. 하나의 폴더 속에 모든 활동과 그것의 인풋 및 아웃풋이 모두 저장되고, RStudio는 그것을 체계적으로 관리할 수 있게 해주는 툴을 제공한다.\n다음과 같은 관행을 추천한다.\n\n디바이스에 모든 R 프로젝트를 포괄하는 최상위 폴더를 만든다. 걸맞는 폴더명(예: R_Projects)을 부여한다. 이것은 R 외부에서 미리 해둔다. 물론 Output 창의 Files 탭을 이용하면 R 내부에서도 할 수 있다.\n최상위 폴더 아래에 개별 R 프로젝트를 위한 폴더를 만든다. 과업에 걸맞는 폴더명(예: AI_Class_2024)을 부여한다. 이것을 R 외부에서 미리 해둘 수도 있고, R 내부에서 프로젝트를 생성할 때 할 수도 있다. 후자를 추천한다.\n\n3.1.2 R 프로젝트 만들기\n두 가지 방법이 있다.\n\n최상단 메뉴를 이용: File &gt; New Project\n상단 메뉴바 오른쪽 끝의 화살표 아이콘: New Project\n\nFigure 3 에 나타나 있는 절차를 통해 프로젝트를 생성한다. 각각 다음의 단계를 거친다.\n\n1단계: 과제 폴더(디렉토리)를 미리 만들어 두지 않았다면, New Directory를 선택한다(추천). 그렇지 않았다면 Existing Directory를 선택한다.\n2단계: New Project를 선택한다.\n3단계: ’Directory name:’에 과제를 위한 폴더명을 타이핑한다(예: AI_Class_2024). ’Create project as subdirectory of:’에 최상위 폴더(예: R_Projects)를 선택한다.\n\n\n\n\n\n\nFigure 3: R 프로젝트의 생성 절차\n\n\nOutput 창의 Files 탭을 누르면, 다양한 기본 파일들이 해당 폴드에 생성되었음을 확인할 수 있다. 가장 중요한 파일은 .RProj라는 확장자를 가진 파일이다. 나중에 R 외부에서 이 파일을 더블클릭하면 R 프로젝트를 열 수 있다.\n\n\n\n\n\n\nTip\n\n\n\nR 외부의 파일 관리 시스템(윈도우즈의 경우 파일 탐색기)를 사용하지 말고, Output 창의 Files 탭을 사용하는 것이 훨씬 유용하다. 파일 탐색기에서 제공하는 거의 대부분의 기능을 제공한다.\n\n\n\n3.1.3 옵션의 변경\nRstudio의 기본 세팅값을 바꿀 수 있는 다양한 옵션이 존재한다. Tools &gt; Global Options를 선택하면 Figure 4 과 같은 화면을 볼 수 있을 것이다. 다음의 두 가지를 해보라.\n\n그림에서 보는 것처럼, 가운데 Workspace 부분을 그림과 동일하게 변경하라. 이유는 묻지 마세요.\n왼쪽에서 Apearance를 선택한 후, ’Editor font size:’나 ’Editor theme’을 변경하여 자신의 선호를 반영하라.\n\n\n\n\n\n\nFigure 4: 옵션의 변경\n\n\n\n3.2 스크립트 만들기\n\n3.2.1 Console에서 Script Editor로\nConsole은 명령어를 입력하고 그 결과를 볼 수 있는 곳이다. 이것은 Base R의 기본 기능을 RStudio가 충실하게 구현한 것이다. 그런데 제법 복잡한 R 프로젝트를 수행하고자 할 때 Console을 이용하는 방식은 제한점이 많다.\n\n다양하고 복잡한 R 명령어를 실행하고 그 결과를 보기에는 공간이 협소하다.\nConsole에서 행한 것은 저장되지 않는다. 보다 정확하게 말하면, 산출물은 저장될 수 있지만, 그러한 산출물을 얻는데 동원데 일련의 코드는 저장되지 않는다. RStudio를 나갔다가 다시 들어오면 객체, 플롯 등의 산출물을 그대로 남아 있지만 어떤 과정을 거쳐 그러한 결과물을 산출했는지에 대한 것을 남아 있지 않다. 이런 점은 상당한 기간이 지난 후에는 더 큰 문제로 다가온다.\n\n이러한 의미에서 R을 가지고 행한 것을 모두 저장하는, 일종의 노트북 같은 것이 필요하다. 이것을 R 스크립트(script)라고 부르는데, 좌상의 Editor 창에서 스크립트를 다루고, .R이라는 화장자를 가진 파일로 저장한다.\n\n3.2.2 스크립트 파일 생성하고 저장하기\n스크립트 파일을 생성하는 세 가지 정도의 방법이 있다.\n\nFile &gt; New File &gt; R Script 선택\nFile 메뉴 바로 아래의 New File 아이콘을 누른 후 R Script 선택\n단축키(Ctrl + Shift + N) 실행\n\n이렇게 하면 Figure 5 과 같이 좌상에 Editor 창이 생성된다. 그 안에서 그림에서 보는 바와 같이 코드를 작성하게 된다.\n\n\n\n\n\nFigure 5: 네 개의 창 (https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html)\n\n\n스크립트 파일에 이름을 부여하고 저장한다.\n\nFile &gt; Save 선택\nSave current document 아이콘 클릭\n단축키(Ctrl + S) 실행\n\n3.2.3 스크립트 파일에서의 실행\n앞에서 Console에서 했던 모든 일을 동일하게 할 수 있다. 단 실행 방식이 조금 다르다. 앞에서 생성한 df 데이터 프레임의 a 벡터(변수)의 평균값을 구하기 위해 이전과 동일하게 입력한다. 그런데 프롬프트가 없고, [enter]를 눌러도 실행되지 않는다.\n\nmean(df$a)\n\n우선 실행할 코드 라인 혹은 코드의 영역을 지정해야 한다. 두 가지 방법이 있다.\n\n실행할 코드 라인 혹은 코드 블록에 커서를 위치시킨다.\n왼쪽 마우스 버튼을 누른 상태에서 커서를 이동시켜 실행할 영역 전체를 선택한다.\n\n영역이 지정되면 실행하면 되는데, 여기에도 두 가지 방법이 있다.\n\n단축키(Ctrl + Enter) 실행\nEditor 창의 우상에 있는 ‘Run the current line or selection’ 아이콘을 클릭(Figure 6 참조)\n\n\n\n\n\n\nFigure 6: 스크립트 파일에서의 실행(https://docs.posit.co/ide/user/ide/guide/code/execution.html)\n\n\n이전의 실행을 반복하고자 할 때는 다음과 같이 하면 된다.\n\n단축키(Ctrl + Alt +P) 실행\nEditor 창의 우상에 있는 ‘Re-run the previous code region’ 아이콘을 클릭(Figure 6 참조)\n\n3.2.4 코멘트\n코드에 대한 코멘트를 스크립트 파일 곳곳에 남겨두면 나중에 코드 작성의 의도를 보다 쉽게 파악할 수 있다. 이와 관련하여 두 가지 사항을 알아두면 유용하다.\n첫째, # 표시 뒤의 것은 R이 실행하지 않기 때문에 중간중간에 # 표시를 하고 그 뒤에 자신의 코멘트를 남겨두는 것을 권한다.\n\nmean(df$a) # 세 사람의 나이 평균을 구함. 첫 번째 사람 나이가 엄청나게 많음.\n\n둘째, 코드가 길어지면, 그것을 몇 개의 섹션으로 나누고 그것에 코멘트를 달아 줄 수 있다. 단축키(Crtl + Shift + R)를 실행하여 섹션 라벨(Section label)을 달 수 있고, Editor 창의 왼쪽 하단에 있는 작은 아이콘을 이용해 섹션을 빠르게 이동할 수 있다.",
    "crumbs": [
      "R과 데이터사이언스",
      "R과 RStudio 소개"
    ]
  },
  {
    "objectID": "exec_01.html#section",
    "href": "exec_01.html#section",
    "title": "R과 RStudio 소개",
    "section": "\n4 ",
    "text": "4",
    "crumbs": [
      "R과 데이터사이언스",
      "R과 RStudio 소개"
    ]
  },
  {
    "objectID": "exec_03.html",
    "href": "exec_03.html",
    "title": "데이터 불러오기와 정리하기",
    "section": "",
    "text": "이 실습은 R로 데이터사이언스를 하는 과정 중 데이터 불러오기(importing)와 데이터 정리하기(tidying)에 집중한다. 본격적으로 해당 주제를 다루기 전에 tidyverse의 공식 데이터 프레임 형식인 티블(tibble)에 대해 간단히 배운다.\n모든 실습의 시작은 tidyverse 패키지를 불러오는 것이다.\n\nlibrary(tidyverse)",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 불러오기와 정리하기"
    ]
  },
  {
    "objectID": "exec_03.html#실습-개요",
    "href": "exec_03.html#실습-개요",
    "title": "데이터 불러오기와 정리하기",
    "section": "",
    "text": "이 실습은 R로 데이터사이언스를 하는 과정 중 데이터 불러오기(importing)와 데이터 정리하기(tidying)에 집중한다. 본격적으로 해당 주제를 다루기 전에 tidyverse의 공식 데이터 프레임 형식인 티블(tibble)에 대해 간단히 배운다.\n모든 실습의 시작은 tidyverse 패키지를 불러오는 것이다.\n\nlibrary(tidyverse)",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 불러오기와 정리하기"
    ]
  },
  {
    "objectID": "exec_03.html#티블tibble",
    "href": "exec_03.html#티블tibble",
    "title": "데이터 불러오기와 정리하기",
    "section": "\n1 티블(tibble)",
    "text": "1 티블(tibble)\n\n1.1 왜 티블인가?\n데이터 프레임은 가장 널리 사용되는 데이터 형식이고, 일반적인 상황이라면 거의 대부분 데이터 프레임을 가지고 데이터사이언스를 한다. Base R은 전통적으로 data.frame 객체를 통해 데이터 프레임을 관리해왔다. tibble은 이러한 data.frame의 현대적 개량 버전으로 이해하면 되고, 조금의 차이는 있지만 대동소이하다. 이 새로운 데이터 프레임 형식은 tidyverse 패키지의 핵심 패키지 중 하나인 tibble 패키지에서 지원된다.\n\n1.2 티블 생성하기\n\n1.2.1 기존 데이터를 티블 포맷으로 변환하기\nBase R에 포함되어 있는 iris라는 데이터 프레임을 사용한다. 아래의 코드를 실행하면 iris 데이터가 data.frame 형식으로 저장되어 있음을 알 수 있다. Base R의 class() 함수의 쓰임새를 확인하라.\n\niris |&gt; \n  glimpse()  \n\nRows: 150\nColumns: 5\n$ Sepal.Length &lt;dbl&gt; 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.…\n$ Sepal.Width  &lt;dbl&gt; 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.…\n$ Petal.Length &lt;dbl&gt; 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.…\n$ Petal.Width  &lt;dbl&gt; 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.…\n$ Species      &lt;fct&gt; setosa, setosa, setosa, setosa, setosa, setosa, setosa, s…\n\nclass(iris)\n\n[1] \"data.frame\"\n\n\nas_tibble() 함수를 이용하여 tibble 객체로 전환한다. 그러면 data.frame 객체가 tibble 객체로 전환된 것을 알 수 있다.\n\niris_tbl &lt;- iris |&gt; \n  as_tibble() \nclass(iris_tbl)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n1.2.2 티블 객체를 직접 생성하기\ntibble 객체를 직접 생성하는 방식은 두 가지로 나뉜다.\n\n열-단위 방식(보다 일반적): 우선 열-벡터를 만들고 그것을 결합해 최종적인 tibble 객체를 만든다. tibble() 함수를 이용한다.\n행-단위 방식: 우선 행-벡터를 만들고 그것을 결합해 최종적인 tibble 객체를 만든다. tribble() 함수를 이용한다. tribble은 전치티블(transposed tibble)의 약자이다.\n\n\ntibble(\n  x = c(1, 2, 5), \n  y = c(\"h\", \"m\", \"g\"),\n  z = c(0.08, 0.83, 0.60)\n)\n\n# A tibble: 3 × 3\n      x y         z\n  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;\n1     1 h      0.08\n2     2 m      0.83\n3     5 g      0.6 \n\n\n\ntribble(\n  ~x, ~y, ~z,\n  1, \"h\", 0.08,\n  2, \"m\", 0.83,\n  5, \"g\", 0.60\n)\n\n# A tibble: 3 × 3\n      x y         z\n  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;\n1     1 h      0.08\n2     2 m      0.83\n3     5 g      0.6",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 불러오기와 정리하기"
    ]
  },
  {
    "objectID": "exec_03.html#데이터-불러오기",
    "href": "exec_03.html#데이터-불러오기",
    "title": "데이터 불러오기와 정리하기",
    "section": "\n2 데이터 불러오기",
    "text": "2 데이터 불러오기\n\n2.1 readr 패키지\n\n2.1.1 파일 형식\nreadr 패키지는 다양한 함수를 이용해 다양한 형식의 데이터를 불러올 수 있게 도와준다.\n\nread_csv(): 콤마분리(comma-separated values, CSV) 형식의 파일\nread_csv2(): 세미콜론분리(semicolon-separated) 형식의 파일\nread_tsv(): 탭구분(tab-delimited) 형식의 파일\nread_delim(): 여타의 구분 형식의 파일\nread_fwf(): 고정폭(fixed-width) 형식의 파일\nread_table(): 공백구분 형식의 파일\nread_log(): 아파치 형식(Apache-style)의 로그 파일\n\n2.1.2 read_csv() 함수의 활용\n지난번 실습에서 사용한 데이터를 면밀히 살펴본다.\n\nstudents &lt;- read_csv(\"https://pos.it/r4ds-students-csv\")\nstudents\n\n# A tibble: 6 × 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\n다음의 몇 가지 점이 불만족스럽다.\n\n변수명: 특히 Student ID와 Full Name 변수명은 규칙에 어긋난다. 변수명 속에 공란이 있으면 좋지 않다. 이런 이름을 비구문명(non-syntactic name)이라고 하고, ``로 둘러싸여 표시된다. 나중에 문제를 일으킬 수 있다.\n변수 형식: mealPlan은 문자형(chr)이 아니라 팩트형(fct)이, AGE는 문자형(chr)이 아니라 수치형(dbl)이 적절하다.\n결측치(NA): favourite.food의 ’N/A’는 형식에 맞지 않아 결측치가 아니라 문자로 취급된다. 따라서 ’N/A’가 결측치임을 알려주어야 한다.\n\n아래의 코드는 이러한 점을 반영하여 csv 파일을 다시 불러오기 한 것이다. 조교의 도움을 받아 각 아규먼트(skip, col_names, col_types, na)가 어떤 역할을 했는지 생각해 본다.\n\nstudents &lt;- read_csv(\n  \"https://pos.it/r4ds-students-csv\", \n  skip = 1, \n  col_names = c(\"student_id\", \"full_name\", \"favorite_food\", \"meal_plan\", \"age\"),\n  col_types = cols(\n    meal_plan = col_factor(),\n    age = col_number()),\n  na = c(\"N/A\")\n  )\nstudents\n\n# A tibble: 6 × 5\n  student_id full_name        favorite_food      meal_plan             age\n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;fct&gt;               &lt;dbl&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only              4\n2          2 Barclay Lynn     French fries       Lunch only              5\n3          3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch     7\n4          4 Leon Rossini     Anchovies          Lunch only             NA\n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch    NA\n6          6 Güvenç Attila    Ice cream          Lunch only              6\n\n\n\n2.2 엑셀 파일\n\n2.2.1 readxl 패키지\n가장 널리 사용되는 스프레드시트(spreadsheet) 형식인 엑셀 파일을 불러들이기 위해서는 readxl이라는 패키지가 필요하다. tidyverse의 핵심 패키지는 아니지만 일종의 친척 패키지라 할 수는 있다. tidyverse에 포함되어 있지 않기 때문에 따로 인스톨하고 library() 함수를 통해 불러와야 한다.\n\nlibrary(readxl)\n\n가장 널리 사용되는 명령어는 다음의 세 가지이다.\n\nread_xls(): xls 포맷의 엑셀 파일 불러오기\nread_xlsx(): xlsx 포맷의 엑셀 파일 불러오기\nread_excel(): xls, xlsx 포맷의 엑셀 파일 불러오기\n\n2.2.2 read_excel() 함수의 활용\nWorld Population Prospects 2022 데이터를 직접 다운받아 실습을 진행하고자 한다. 이 데이터셋은 매우 중요하다. 다음의 절차에 따라 해당 엑셀 파일을 다운로드한다.\n\nWPP 웹사이트(https://population.un.org/wpp/)에 접속한다.\nDownload Data Files를 클릭한다.\n다음의 파일을 클릭한다: Compact (most used: estimates and medium projections) (XLSX, 24.07 MB)\n엑셀 파일(WPP2022_GEN_F01_DEMOGRAPHIC_INDICATORS_COMPACT_REV1)을 다운로드하여 자신의 프로젝트 폴더에 저장한다.\n\nR 바깥에서 다운로드한 파일을 열어 어떠한 정보가 어떠한 방식으로 수록되어 있는지 살펴본다. 데이터 불러오기를 위해 다음의 네 가지 사항에 유의해야 함을 이해한다.\n\n16번 행까지는 불필요한 영역이다.\n17번 행을 변수명으로 사용할 경우 많은 문제점이 발생한다.\n결측치는 공란이거나 ‘…’ 기호로 표시되어 있다.\n첫 번째 워킹시트(Estimates)에는 1950~2021의 데이터가, 두 번째 워킹시트(Medium variant)에는 2022~2100년의 데이터가 수록되어 있다. 나중에 결합해야한다.\n\n우선 엑셀 파일을 그대로 불러와 본다.\n\nread_excel(\n  \"WPP2022_GEN_F01_DEMOGRAPHIC_INDICATORS_COMPACT_REV1.xlsx\", \n  sheet = \"Estimates\" \n  )\n\n# A tibble: 20,608 × 65\n   ...1  ...2  ...3  ...4  `United Nations`  ...6  ...7  ...8  ...9  ...10 ...11\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  Population Divis… &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 2 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  Department of Ec… &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 3 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;              &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 4 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  World Population… &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 5 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  File GEN/01/REV1… &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 6 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  Estimates, 1950 … &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 7 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  POP/DB/WPP/Rev.2… &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 8 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  © July 2022 by U… &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 9 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  Suggested citati… &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n10 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;              &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n# ℹ 20,598 more rows\n# ℹ 54 more variables: ...12 &lt;chr&gt;, ...13 &lt;chr&gt;, ...14 &lt;chr&gt;, ...15 &lt;chr&gt;,\n#   ...16 &lt;chr&gt;, ...17 &lt;chr&gt;, ...18 &lt;chr&gt;, ...19 &lt;chr&gt;, ...20 &lt;chr&gt;,\n#   ...21 &lt;chr&gt;, ...22 &lt;chr&gt;, ...23 &lt;chr&gt;, ...24 &lt;chr&gt;, ...25 &lt;chr&gt;,\n#   ...26 &lt;chr&gt;, ...27 &lt;chr&gt;, ...28 &lt;chr&gt;, ...29 &lt;chr&gt;, ...30 &lt;chr&gt;,\n#   ...31 &lt;chr&gt;, ...32 &lt;chr&gt;, ...33 &lt;chr&gt;, ...34 &lt;chr&gt;, ...35 &lt;chr&gt;,\n#   ...36 &lt;chr&gt;, ...37 &lt;chr&gt;, ...38 &lt;chr&gt;, ...39 &lt;chr&gt;, ...40 &lt;chr&gt;, …\n\n\n끔찍할 것이다. 위의 네 가지 사항을 감안하여 다음과 같은 코드를 실행한다.\n\nnew_names &lt;- c(\"index\", \"variant\", \"region_name\", \"notes\", \"location_code\", \n                \"ISO3\", \"ISO2\", \"SDMX\", \"type\", \"parent_code\", \"year\", \"pop_jan_total\", \n                \"pop_jul_total\", \"pop_jul_male\", \"pop_jul_female\", \"pop_den\", \"sex_ratio\", \n                \"median_age\", \"natural_change\", \"RNC\", \"pop_change\", \"PGR\", \n                \"dubling_time\", \"births\", \"births_by_f1519\", \"CBR\", \"TFR\", \"NRR\", \n                \"mean_age_childbearing\", \"sex_ratio_birth\", \"deaths_total\", \n                \"deaths_male\", \"deaths_female\", \"CDR\", \"life_exp_total\", \n                \"life_exp_male\", \"life_exp_female\", \"life_exp_15_total\", \n                \"life_exp_15_male\", \"life_exp_15_female\", \"life_exp_65_total\", \n                \"life_exp_65_male\", \"life_exp_65_female\", \"life_exp_80_total\", \n                \"life_exp_80_male\", \"life_exp_80_female\", \"infant_deaths\", \n                \"IMR\", \"live_births\", \"under_five_deaths\", \"mort_under_five\", \n                \"mort_bf_40_total\", \"mort_bf_40_male\", \"mort_bf_40_female\", \"mort_bf_60_total\", \n                \"mort_bf_60_male\", \"mort_bf_60_female\", \"mort_bt_1550_total\", \n                \"mort_bt_1550_male\", \"mort_bt_1550_female\", \"mort_bt_1560_total\", \n                \"mort_bt_1560_male\", \"mort_bt_1560_female\", \"net_migrants\", \"NMR\")\nwpp_2022_estimates &lt;- read_excel(\n  \"WPP2022_GEN_F01_DEMOGRAPHIC_INDICATORS_COMPACT_REV1.xlsx\",\n  sheet = \"Estimates\",\n  skip = 17, \n  col_names = new_names,\n  col_types = c(rep(\"guess\", 3), \"text\", \"guess\", rep(\"text\", 2), rep(\"guess\", 58)),\n  na = c(\"...\", \"\")\n  )\nwpp_2022_future &lt;- read_excel(\n  \"WPP2022_GEN_F01_DEMOGRAPHIC_INDICATORS_COMPACT_REV1.xlsx\",\n  sheet = \"Medium variant\",\n  skip = 17, \n  col_names = new_names,\n  col_types = c(rep(\"guess\", 3), \"text\", \"guess\", rep(\"text\", 2), rep(\"guess\", 58)),\n  na = c(\"...\", \"\")\n)\nwpp_2022 &lt;- bind_rows(wpp_2022_estimates, wpp_2022_future)\nView(wpp_2022)\n\n조교의 도움을 받아 코드의 어떤 부분이 어떤 동작을 한 것인지 따져본다.\n그런데, 해야할 일이 한가지 더 남아있다. 많은 변수 중에 데이터 탐색이라는 측면에서 가장 중요한 것은 type이다. 다음을 통해 type 변수에 어떤 내용이 담겨 있는지 확인한다.\n\nwpp_2022 |&gt;    \n  distinct(type)\n\n# A tibble: 9 × 1\n  type             \n  &lt;chr&gt;            \n1 World            \n2 Label/Separator  \n3 SDG region       \n4 Development Group\n5 Special other    \n6 Income Group     \n7 Region           \n8 Subregion        \n9 Country/Area     \n\n\n이 변수를 통해 세계 전체(World), 국가군(SDG region, Region 등), 국가별(Country/Area)로 데이터를 활용할 수 있다는 것을 인지한다. 그런데, “Label/Separator”는 엑셀 내에서 분할선 역할만 하는 것으로 무의미하다. 이를 제거한다.\n\nwpp_2022 &lt;- wpp_2022 |&gt;    \n  filter(type != \"Label/Separator\")\n\n이제 모든 과정이 끝났다. 나중에 사용하기 위해, writexl 패키지의 write_xlsx() 함수를 이용하여 엑셀 파일로 저장해 본다.\n\nlibrary(writexl)\nwrite_xlsx(wpp_2022, \"wpp_2022.xlsx\")\n\n그런데, 저장된 파일을 read_excel() 함수로 다시 불러 들이면 컬럼 형식에 대한 정보가 사라져 버리는 등의 에러가 발생한다. 이런 점 때문에 다음과 같은 대안이 존재한다. readr 패키지의 write_rds() 함수로 저장하고, 다시 read_rds() 함수로 불러들이면 정확히 동일한 것을 얻을 수 있다.\n\nwrite_rds(wpp_2022, \"wpp_2022.rds\")\nread_rds(\"wpp_2022.rds\")\n\n# A tibble: 43,186 × 65\n   index variant   region_name notes location_code ISO3  ISO2   SDMX type \n   &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;       &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;\n 1     1 Estimates WORLD       &lt;NA&gt;            900 &lt;NA&gt;  &lt;NA&gt;      1 World\n 2     2 Estimates WORLD       &lt;NA&gt;            900 &lt;NA&gt;  &lt;NA&gt;      1 World\n 3     3 Estimates WORLD       &lt;NA&gt;            900 &lt;NA&gt;  &lt;NA&gt;      1 World\n 4     4 Estimates WORLD       &lt;NA&gt;            900 &lt;NA&gt;  &lt;NA&gt;      1 World\n 5     5 Estimates WORLD       &lt;NA&gt;            900 &lt;NA&gt;  &lt;NA&gt;      1 World\n 6     6 Estimates WORLD       &lt;NA&gt;            900 &lt;NA&gt;  &lt;NA&gt;      1 World\n 7     7 Estimates WORLD       &lt;NA&gt;            900 &lt;NA&gt;  &lt;NA&gt;      1 World\n 8     8 Estimates WORLD       &lt;NA&gt;            900 &lt;NA&gt;  &lt;NA&gt;      1 World\n 9     9 Estimates WORLD       &lt;NA&gt;            900 &lt;NA&gt;  &lt;NA&gt;      1 World\n10    10 Estimates WORLD       &lt;NA&gt;            900 &lt;NA&gt;  &lt;NA&gt;      1 World\n# ℹ 43,176 more rows\n# ℹ 56 more variables: parent_code &lt;dbl&gt;, year &lt;dbl&gt;, pop_jan_total &lt;dbl&gt;,\n#   pop_jul_total &lt;dbl&gt;, pop_jul_male &lt;dbl&gt;, pop_jul_female &lt;dbl&gt;,\n#   pop_den &lt;dbl&gt;, sex_ratio &lt;dbl&gt;, median_age &lt;dbl&gt;, natural_change &lt;dbl&gt;,\n#   RNC &lt;dbl&gt;, pop_change &lt;dbl&gt;, PGR &lt;dbl&gt;, dubling_time &lt;dbl&gt;, births &lt;dbl&gt;,\n#   births_by_f1519 &lt;dbl&gt;, CBR &lt;dbl&gt;, TFR &lt;dbl&gt;, NRR &lt;dbl&gt;,\n#   mean_age_childbearing &lt;dbl&gt;, sex_ratio_birth &lt;dbl&gt;, deaths_total &lt;dbl&gt;, …",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 불러오기와 정리하기"
    ]
  },
  {
    "objectID": "exec_03.html#데이터-정리하기",
    "href": "exec_03.html#데이터-정리하기",
    "title": "데이터 불러오기와 정리하기",
    "section": "\n3 데이터 정리하기",
    "text": "3 데이터 정리하기\n여기서는 데이터 늘이기(lengthening data), 데이터 넓히기(widening data), 데이터 결합하기(joining data)를 다룬다.\n\n3.1 데이터 늘이기\n실습을 위해 tidyverse 패키지에 포함되어 있는 who2 데이터를 사용한다. 이것은 WHO(world Health Organization, 세계보건기구)에서 제공한 데이터로서 1980~2013년 전세계 209개국의 결핵 환자수에 대한 데이터이다.\n\nglimpse(who2)\n\nRows: 7,240\nColumns: 58\n$ country    &lt;chr&gt; \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Afghanistan\",…\n$ year       &lt;dbl&gt; 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989,…\n$ sp_m_014   &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_m_1524  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_m_2534  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_m_3544  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_m_4554  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_m_5564  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_m_65    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_f_014   &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_f_1524  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_f_2534  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_f_3544  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_f_4554  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_f_5564  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sp_f_65    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_m_014   &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_m_1524  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_m_2534  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_m_3544  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_m_4554  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_m_5564  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_m_65    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_f_014   &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_f_1524  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_f_2534  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_f_3544  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_f_4554  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_f_5564  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sn_f_65    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_m_014   &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_m_1524  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_m_2534  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_m_3544  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_m_4554  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_m_5564  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_m_65    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_f_014   &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_f_1524  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_f_2534  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_f_3544  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_f_4554  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_f_5564  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ep_f_65    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_m_014  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_m_1524 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_m_2534 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_m_3544 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_m_4554 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_m_5564 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_m_65   &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_f_014  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_f_1524 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_f_2534 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_f_3544 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_f_4554 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_f_5564 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ rel_f_65   &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n\n\ncountry와 year은 분명한 변수이지만 나머지 56개 변수는 무엇인지 알 수 없다. 그런데 잘 살펴보면, 변수명에 어떤 패턴이 있다는 것을 알 수 있다. 모두 세 부분으로 나뉘어져 있는데, 첫 번째 부분은 진단법(sp, rel, ep)과 관련되어 있고, 두 번째 부분은 성(m, f)과 관련되어 있고, 세 번째 부분은 연령(014, 1524, 2534, 3544, 4554, 5564, 65)과 관련되어 있다. 56개 변수의 셀 값은 모두 케이스(환자수)를 의미한다. 이 지저분한 데이터를 pivot_longer() 함수를 이용해 정돈된 데이터로 만들어 본다.\n\nwho2 |&gt; \n  pivot_longer(\n    cols = !c(country, year),\n    names_to = c(\"diagnosis\", \"gender\", \"age\"), \n    names_sep = \"_\",\n    values_to = \"count\"\n  )\n\n# A tibble: 405,440 × 6\n   country      year diagnosis gender age   count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt;\n 1 Afghanistan  1980 sp        m      014      NA\n 2 Afghanistan  1980 sp        m      1524     NA\n 3 Afghanistan  1980 sp        m      2534     NA\n 4 Afghanistan  1980 sp        m      3544     NA\n 5 Afghanistan  1980 sp        m      4554     NA\n 6 Afghanistan  1980 sp        m      5564     NA\n 7 Afghanistan  1980 sp        m      65       NA\n 8 Afghanistan  1980 sp        f      014      NA\n 9 Afghanistan  1980 sp        f      1524     NA\n10 Afghanistan  1980 sp        f      2534     NA\n# ℹ 405,430 more rows\n\n\n조교의 도움을 받아 각 아규먼트가 어떤 역할을 하는지 이해한다. 그리고 정돈된 데이터를 만들기 위해 왜 데이터 ’늘이기’를 해야하는지 생각해 본라.\n\n3.2 데이터 넓히기\n실습을 위해 tidyverse 패키지에 포함되어 있는 cms_patient_experience 데이터를 사용한다. 이것은 미국의 Centers of Medicare and Meicaid Services가 제공한 데이터이다.\n\ncms_patient_experience\n\n# A tibble: 500 × 5\n   org_pac_id org_nm                           measure_cd measure_title prf_rate\n   &lt;chr&gt;      &lt;chr&gt;                            &lt;chr&gt;      &lt;chr&gt;            &lt;dbl&gt;\n 1 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       63\n 2 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       87\n 3 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       86\n 4 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       57\n 5 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       85\n 6 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       24\n 7 0446162697 ASSOCIATION OF UNIVERSITY PHYSI… CAHPS_GRP… CAHPS for MI…       59\n 8 0446162697 ASSOCIATION OF UNIVERSITY PHYSI… CAHPS_GRP… CAHPS for MI…       85\n 9 0446162697 ASSOCIATION OF UNIVERSITY PHYSI… CAHPS_GRP… CAHPS for MI…       83\n10 0446162697 ASSOCIATION OF UNIVERSITY PHYSI… CAHPS_GRP… CAHPS for MI…       63\n# ℹ 490 more rows\n\n\n이 데이터도 정돈된 데이터가 아니다. 자세히 살펴보면 다음과 같은 사실을 알 수 있다.\n\norg_pac_id와 org_nm 변수는 의료조직의 식별자와 이름이다.\n의료조직별로 6개씩의 열을 차지하고 있는데, 6개의 열은 measure_cd와 measure_title에 나타나 있는 것과 같은 6개의 서로 다른 조사 항목을 나타낸다.\n마지막의 prf_rate는 조사 항목별 점수이다.\n\npivot_wider() 함수를 이용하여, 행에는 개별 의료조직이, 열에는 개별 조사 항목이 나타나는 정돈된 데이터를 만들어 본다.\n\ncms_patient_experience |&gt; \n  pivot_wider(\n    id_cols = starts_with(\"org\"),\n    names_from = measure_cd,\n    values_from = prf_rate\n  )\n\n# A tibble: 95 × 8\n   org_pac_id org_nm CAHPS_GRP_1 CAHPS_GRP_2 CAHPS_GRP_3 CAHPS_GRP_5 CAHPS_GRP_8\n   &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 0446157747 USC C…          63          87          86          57          85\n 2 0446162697 ASSOC…          59          85          83          63          88\n 3 0547164295 BEAVE…          49          NA          75          44          73\n 4 0749333730 CAPE …          67          84          85          65          82\n 5 0840104360 ALLIA…          66          87          87          64          87\n 6 0840109864 REX H…          73          87          84          67          91\n 7 0840513552 SCL H…          58          83          76          58          78\n 8 0941545784 GRITM…          46          86          81          54          NA\n 9 1052612785 COMMU…          65          84          80          58          87\n10 1254237779 OUR L…          61          NA          NA          65          NA\n# ℹ 85 more rows\n# ℹ 1 more variable: CAHPS_GRP_12 &lt;dbl&gt;\n\n\n이에 어떤 의료조직이 어떤 항목에서 얼마의 점수를 받았는지를 일목요연하게 알아 볼 수 있다. 조교의 도움을 받아 각 아규먼트가 어떤 역할을 하는지 이해한다. 정돈된 데이터를 만들기 위해 이번에는 왜 데이터 ’넓히기’를 해야하는지 생각해 보라.\n\n3.3 데이터 결합하기\n\n3.3.1 조인(join)의 종류\n여기서는 데이트 프레임을 결합하여 새로운 데이터 프레임을 생성하는 과정에 대해 살펴본다. tidyverse 패키지에 포함되어 있는 dplyr 패키지는 다양한 종류의 조인(join) 함수를 제공한다.\n\nleft_join(): 첫 번째 변수는 그대로 둔 상태에서 두 번째 변수를 결합함으로써 두 번째 변수의 열을 가져옴\ninner_join(): 두 번째 변수는 그대로 둔 상태에서 첫 번째 변수를 결합함으로써 첫 번째 변수의 열을 가져옴\nright_join(): 두 변수 모두에 존재하는 열을 취함\nfull_join(): 최소한 한 변수에 존재하는 열을 모두 취함\nsemi_join(): 첫 번째 변수의 행 중 두 번째 변수에 대응하는 행이 있는 것만 취함\nanti_join(): 첫 번째 변수의 행 중 두 번째 변수에 대응하는 행이 없는 것만 취함\n\n이들 중 left_join()이 가장 많이 사용되기 때문에 그것에 집중한다.\n\n3.3.2 left_join() 함수의 활용\n실습을 위해 nycflights13 패키지의 데이터를 사용한다. 이 패키지에는 다섯 개의 데이터 프레임이 포함되어 있다. 지난 번에는 첫 번째 데이터만 사용했다.\n\nflights: 2013년 NYC를 출발한 모든 항공기\nweather: 공항별 시간별 기상 상황\nplanes: 항공기별 건조 정보\nairports: 공항명과 위치\nairlines: 항공사\n\n그리고 이 6개의 데이터 프레임은 Figure 1 처럼 공통키(common key)를 통해 서로 연결되어 있다.\n\n\n\n\n\nFigure 1: nycflights13 데이터(https://github.com/tidyverse/nycflights13)\n\n\nflights 데이터의 변수가 너무 많기 때문에 조인을 위한 공통키를 중심으로 변수를 줄인다.\n\nlibrary(nycflights13)\n\n\nflights2 &lt;- flights |&gt; \n  select(year, time_hour, origin, dest, tailnum, carrier)\nflights2\n\n# A tibble: 336,776 × 6\n    year time_hour           origin dest  tailnum carrier\n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;  \n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA     \n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA     \n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA     \n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6     \n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL     \n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA     \n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6     \n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV     \n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6     \n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA     \n# ℹ 336,766 more rows\n\n\nflights2 데이터를 중심으로 나머지 4개의 데이터와 조인한다.\n\nairlines\n\n# A tibble: 16 × 2\n   carrier name                       \n   &lt;chr&gt;   &lt;chr&gt;                      \n 1 9E      Endeavor Air Inc.          \n 2 AA      American Airlines Inc.     \n 3 AS      Alaska Airlines Inc.       \n 4 B6      JetBlue Airways            \n 5 DL      Delta Air Lines Inc.       \n 6 EV      ExpressJet Airlines Inc.   \n 7 F9      Frontier Airlines Inc.     \n 8 FL      AirTran Airways Corporation\n 9 HA      Hawaiian Airlines Inc.     \n10 MQ      Envoy Air                  \n11 OO      SkyWest Airlines Inc.      \n12 UA      United Air Lines Inc.      \n13 US      US Airways Inc.            \n14 VX      Virgin America             \n15 WN      Southwest Airlines Co.     \n16 YV      Mesa Airlines Inc.         \n\nflights2 |&gt;\n  left_join(airlines)\n\n# A tibble: 336,776 × 7\n    year time_hour           origin dest  tailnum carrier name                  \n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;                 \n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      United Air Lines Inc. \n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      United Air Lines Inc. \n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      American Airlines Inc.\n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      JetBlue Airways       \n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      Delta Air Lines Inc.  \n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      United Air Lines Inc. \n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6      JetBlue Airways       \n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV      ExpressJet Airlines I…\n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6      JetBlue Airways       \n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA      American Airlines Inc.\n# ℹ 336,766 more rows\n\n\n\nweather\n\n# A tibble: 26,115 × 15\n   origin  year month   day  hour  temp  dewp humid wind_dir wind_speed\n   &lt;chr&gt;  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;\n 1 EWR     2013     1     1     1  39.0  26.1  59.4      270      10.4 \n 2 EWR     2013     1     1     2  39.0  27.0  61.6      250       8.06\n 3 EWR     2013     1     1     3  39.0  28.0  64.4      240      11.5 \n 4 EWR     2013     1     1     4  39.9  28.0  62.2      250      12.7 \n 5 EWR     2013     1     1     5  39.0  28.0  64.4      260      12.7 \n 6 EWR     2013     1     1     6  37.9  28.0  67.2      240      11.5 \n 7 EWR     2013     1     1     7  39.0  28.0  64.4      240      15.0 \n 8 EWR     2013     1     1     8  39.9  28.0  62.2      250      10.4 \n 9 EWR     2013     1     1     9  39.9  28.0  62.2      260      15.0 \n10 EWR     2013     1     1    10  41    28.0  59.6      260      13.8 \n# ℹ 26,105 more rows\n# ℹ 5 more variables: wind_gust &lt;dbl&gt;, precip &lt;dbl&gt;, pressure &lt;dbl&gt;,\n#   visib &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nflights2 |&gt; \n  left_join(weather |&gt; select(origin, time_hour, temp, wind_speed))\n\n# A tibble: 336,776 × 8\n    year time_hour           origin dest  tailnum carrier  temp wind_speed\n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt;\n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA       39.0       12.7\n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA       39.9       15.0\n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA       39.0       15.0\n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6       39.0       15.0\n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL       39.9       16.1\n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA       39.0       12.7\n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6       37.9       11.5\n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV       39.9       16.1\n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6       37.9       13.8\n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA       39.9       16.1\n# ℹ 336,766 more rows\n\n\n\nplanes\n\n# A tibble: 3,322 × 9\n   tailnum  year type              manufacturer model engines seats speed engine\n   &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;             &lt;chr&gt;        &lt;chr&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; \n 1 N10156   2004 Fixed wing multi… EMBRAER      EMB-…       2    55    NA Turbo…\n 2 N102UW   1998 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 3 N103US   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 4 N104UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 5 N10575   2002 Fixed wing multi… EMBRAER      EMB-…       2    55    NA Turbo…\n 6 N105UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 7 N107US   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 8 N108UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 9 N109UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n10 N110UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n# ℹ 3,312 more rows\n\nflights2 |&gt; \n  left_join(planes |&gt; select(tailnum, type, engines, seats))\n\n# A tibble: 336,776 × 9\n    year time_hour           origin dest  tailnum carrier type     engines seats\n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;      &lt;int&gt; &lt;int&gt;\n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      Fixed w…       2   149\n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      Fixed w…       2   149\n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      Fixed w…       2   178\n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      Fixed w…       2   200\n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      Fixed w…       2   178\n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      Fixed w…       2   191\n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6      Fixed w…       2   200\n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV      Fixed w…       2    55\n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6      Fixed w…       2   200\n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA      &lt;NA&gt;          NA    NA\n# ℹ 336,766 more rows\n\n\n\nairports\n\n# A tibble: 1,458 × 8\n   faa   name                             lat    lon   alt    tz dst   tzone    \n   &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    \n 1 04G   Lansdowne Airport               41.1  -80.6  1044    -5 A     America/…\n 2 06A   Moton Field Municipal Airport   32.5  -85.7   264    -6 A     America/…\n 3 06C   Schaumburg Regional             42.0  -88.1   801    -6 A     America/…\n 4 06N   Randall Airport                 41.4  -74.4   523    -5 A     America/…\n 5 09J   Jekyll Island Airport           31.1  -81.4    11    -5 A     America/…\n 6 0A9   Elizabethton Municipal Airport  36.4  -82.2  1593    -5 A     America/…\n 7 0G6   Williams County Airport         41.5  -84.5   730    -5 A     America/…\n 8 0G7   Finger Lakes Regional Airport   42.9  -76.8   492    -5 A     America/…\n 9 0P2   Shoestring Aviation Airfield    39.8  -76.6  1000    -5 U     America/…\n10 0S9   Jefferson County Intl           48.1 -123.    108    -8 A     America/…\n# ℹ 1,448 more rows\n\nflights2 |&gt; \n  left_join(airports, join_by(origin == faa))\n\n# A tibble: 336,776 × 13\n    year time_hour           origin dest  tailnum carrier name         lat   lon\n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;\n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      Newark Li…  40.7 -74.2\n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      La Guardia  40.8 -73.9\n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      John F Ke…  40.6 -73.8\n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      John F Ke…  40.6 -73.8\n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      La Guardia  40.8 -73.9\n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      Newark Li…  40.7 -74.2\n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6      Newark Li…  40.7 -74.2\n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV      La Guardia  40.8 -73.9\n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6      John F Ke…  40.6 -73.8\n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA      La Guardia  40.8 -73.9\n# ℹ 336,766 more rows\n# ℹ 4 more variables: alt &lt;dbl&gt;, tz &lt;dbl&gt;, dst &lt;chr&gt;, tzone &lt;chr&gt;\n\n\nairports의 경우만 왜 join_by()라는 아규먼트가 필요한지 생각해 본다.",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 불러오기와 정리하기"
    ]
  },
  {
    "objectID": "exec_03.html#fig-nycflights-1",
    "href": "exec_03.html#fig-nycflights-1",
    "title": "데이터 불러오기와 정리하기",
    "section": "\n4 ",
    "text": "4",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 불러오기와 정리하기"
    ]
  },
  {
    "objectID": "exec_05.html",
    "href": "exec_05.html",
    "title": "데이터 시각화하기",
    "section": "",
    "text": "이 실습은 R로 데이터사이언스를 하는 과정 중 데이터 시각화하기(visualizing)를 다룬다. 다음의 사항을 다룬다. 데이터 시각화하기는 tidyverse의 핵심 패키지 중의 하나인 ggplot2 에서 제공된다.\nggplot2의 gg가 ’그래프의 문법(grammar of graphic)’을 의미하는 것에서 알 수 있는 것처럼, ggplot2는 그래프 제작의 일반 원리를 정교하게 구현하기 위해 만들어졌다. Figure 1 에서 보는 것처럼, 모든 그래프는 8개의 주요 구성요소로 이루어져 있고, ggplot2는 각각의 구성요소를 마치 레이어(layer)를 쌓는 것과 같은 방식으로 구현한다(+ 사인을 이용).\n\n\n\n\n\nFigure 1: 그래프의 8개 구성요소(https://initiation.doana-r.com/06-ggplot2#1)\n\n\n모든 실습의 시작은 tidyverse 패키지를 불러오는 것이다.\n\nlibrary(tidyverse)\n\n실습을 위해 ggplot2 패키지 속에 포함되어 있는 mpg 데이터와 diamonds 데이터를 사용한다. mpg 데이터의 11개 변수 중 다음의 세 가지 변수가 특히 중요한데, displ는 자동차의 엔진 크기이고, hwy는 고속도로 연비, class는 자동차의 유형이다. diamond 데이터는 총 54,000개의 다이아몬드에 대한 정보를 담고 있는데, 특히 가격(price) 캐럿(carat), 컬러(color), 투명도(clarity), 컷(cut)이 중요한 변수들이다.",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 시각화하기"
    ]
  },
  {
    "objectID": "exec_05.html#실습-개요",
    "href": "exec_05.html#실습-개요",
    "title": "데이터 시각화하기",
    "section": "",
    "text": "이 실습은 R로 데이터사이언스를 하는 과정 중 데이터 시각화하기(visualizing)를 다룬다. 다음의 사항을 다룬다. 데이터 시각화하기는 tidyverse의 핵심 패키지 중의 하나인 ggplot2 에서 제공된다.\nggplot2의 gg가 ’그래프의 문법(grammar of graphic)’을 의미하는 것에서 알 수 있는 것처럼, ggplot2는 그래프 제작의 일반 원리를 정교하게 구현하기 위해 만들어졌다. Figure 1 에서 보는 것처럼, 모든 그래프는 8개의 주요 구성요소로 이루어져 있고, ggplot2는 각각의 구성요소를 마치 레이어(layer)를 쌓는 것과 같은 방식으로 구현한다(+ 사인을 이용).\n\n\n\n\n\nFigure 1: 그래프의 8개 구성요소(https://initiation.doana-r.com/06-ggplot2#1)\n\n\n모든 실습의 시작은 tidyverse 패키지를 불러오는 것이다.\n\nlibrary(tidyverse)\n\n실습을 위해 ggplot2 패키지 속에 포함되어 있는 mpg 데이터와 diamonds 데이터를 사용한다. mpg 데이터의 11개 변수 중 다음의 세 가지 변수가 특히 중요한데, displ는 자동차의 엔진 크기이고, hwy는 고속도로 연비, class는 자동차의 유형이다. diamond 데이터는 총 54,000개의 다이아몬드에 대한 정보를 담고 있는데, 특히 가격(price) 캐럿(carat), 컬러(color), 투명도(clarity), 컷(cut)이 중요한 변수들이다.",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 시각화하기"
    ]
  },
  {
    "objectID": "exec_05.html#핵심-레이어-심미성과-기하",
    "href": "exec_05.html#핵심-레이어-심미성과-기하",
    "title": "데이터 시각화하기",
    "section": "\n1 핵심 레이어: 심미성과 기하",
    "text": "1 핵심 레이어: 심미성과 기하\n이 8개 구성요소 중 가장 중요한 것은 ‘심미성(aesthetics)’ 혹은 ‘심미성 매핑(aesthetic mapping)’와 ’기하(geometries)’ 혹은 ’기하 객체(geometric objects)’이다. 기하가 그래프의 전체 구조 혹은 형식을 규정하는 것이라면, 심미성은 기하의 외견을 규정한다. 결국 기하는 그래프의 유형(예: 막대 그래프, 산포도 등)과 관련되고, 심미성은 그래프의 시각적 속성(예: 컬러, 크기, 모양 등)과 관련된다. 이 두 가지는 독립적인 요소이지만, 어느 정도는 관련되어 있기도 하다. 모든 기하가 모든 심미성과 결합할 수 있는 것은 아니다. 특정한 기하는 오로지 특정한 심미성과만 결합한다. 예를 들어 포인트 기하 객체(geom_point())는 크기(size) 심미성과 관련되지만, 라인 기하 객체(geom_line())는 크기 심미성과는 관련되지 않고 라인폭(linewidth) 심미성과만 관련되는 식이다.\n\n1.1 심미성 매핑\n심미성 매핑이란 다양한 시각적 속성 혹은 재료를 그래프에 적용 혹은 부여하는 과정을 의미한다. displ과 hwy의 관계가 class에 따라 어떻게 달라지는지를 시각화한다. 다음의 두 그래프를 비교해 본다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = class)) +\n  geom_point()\n\n\n\n\n\n\nFigure 2: 심미성: 컬러\n\n\n\n\n\nggplot(mpg, aes(x = displ, y = hwy, shape = class)) +\n  geom_point()\n\n\n\n\n\n\nFigure 3: 심미성: 형태\n\n\n\n\nFigure 2 과 Figure 3 중 어느 것이 더 효과적인 시각화라고 생각하는가? 컬러(color)와 형태(shape)라는 심미성 요소 외에 크기(size)와 투명도(alpha) 요소를 동일한 데이터에 적용해 본다.\n\nggplot(mpg, aes(x = displ, y = hwy, size = class)) +\n  geom_point()\n\n\n\n\n\n\nFigure 4: 심미성: 크기\n\n\n\n\n\nggplot(mpg, aes(x = displ, y = hwy, alpha = class)) +\n  geom_point()\n\n\n\n\n\n\nFigure 5: 심미성: 투명도\n\n\n\n\n크기와 투명도는 양적인 차이를 나타내는데 적합한 심미성이기 때문에 class라는 정성적인 범주의 차이를 보여주는데는 적합하지 않다. 심미성 부여에서 가장 중요한 것은 결국 얼마나 적절한 심미성 요소, 혹은 시각 변수(visual variables)를 선택하느냐에 달려 있다.\n\n1.2 기하 객체\nFigure 6 와 Figure 7 이 다르게 보이는 것은 기하 객체가 하나는 포인트(point)이고 다른 하나는 완만한 선(smooth)이기 때문이다.\n\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point()\n\n\n\n\n\n\nFigure 6: 기하: geom_point()\n\n\n\n\n\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_smooth()\n\n\n\n\n\n\nFigure 7: 기하: geom_smooth()\n\n\n\n\nFigure 2 과 Figure 7 두 개를 결합해 본다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = class)) + \n  geom_point() + \n  geom_smooth()\n\n\n\n\n\n\nFigure 8: 기하: geom_point() + geom_smooth() 1\n\n\n\n\n원하는 것이 아니다. 왜 이런 결과가 나왔으며, 어떻게 하면 원하는 것을 얻을 수 있을지 생각해 본다.\n\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point(aes(color = class)) + \n  geom_smooth()\n\n\n\n\n\n\nFigure 9: 기하: geom_point() + geom_smooth() 2\n\n\n\n\n두 결과의 차이는 color 심미성을 글로벌하게 적용하느냐 로컬하게 적용하느냐(포인트 기하에만 적용)에 달린 것이다. 글로벌한 심미성은 ggplot()속에서 설정하고, 국지적인 심미성은 개별 기하(geom_point()) 속에서 설정한다. 매우 중요한 사항이니 꼭 기억하도록 한다.\n다양한 기하 객체는 동일한 데이터를 다양한 방식으로 탐색할 수 있게 해준다. 다음의 세가지 기하 객체는 탐색적 데이터 분석에서 널리 사용되는 것이다.\n\nggplot(mpg, aes(x = hwy)) +\n  geom_histogram(binwidth = 2)\n\n\n\n\n\n\nFigure 10: 기하: geom_histogram()\n\n\n\n\n\nggplot(mpg, aes(x = hwy)) +\n  geom_density()\n\n\n\n\n\n\nFigure 11: 기하: geom_density()\n\n\n\n\n\nggplot(mpg, aes(x = hwy)) +\n  geom_boxplot()\n\n\n\n\n\n\nFigure 12: 기하: geom_boxplot()",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 시각화하기"
    ]
  },
  {
    "objectID": "exec_05.html#다른-레이어",
    "href": "exec_05.html#다른-레이어",
    "title": "데이터 시각화하기",
    "section": "\n2 다른 레이어",
    "text": "2 다른 레이어\n\n2.1 스케일\n스케일(scales)은 심미성이 구체적으로 어떻게 구현될지를 결정한다. 예를 들어 color 심미성이 적용되었다 하더라도 어떤 색상이 선정되어 어떻게 배열되는지에 따라 최종 그래프의 모습은 매우 달라질 수 있다. 그래프를 다시 나타낸다. 스케일이 어느 부분에 어떻게 적용되었는지 생각해 본다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() \n\n\n\n\n\n\nFigure 13\n\n\n\n\nFigure 13 은 아래에서 보는 것처럼, ggplot2가 자동적으로 적용한 세 가지의 스케일 설정에 의거해 만들어진 것이다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  scale_x_continuous() +\n  scale_y_continuous() +\n  scale_color_discrete()\n\n수정하여 다음과 같이 적용할 수 있다. scale 함수의 아규먼트가 어떤 역할을 하는지 생각해 본다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  scale_x_continuous(labels = NULL) +\n  scale_y_continuous(breaks = seq(15, 40, by = 5)) +\n  scale_color_brewer(palette = \"Set1\", labels = c(\"4\" = \"4-wheel\", \"f\" = \"front\", \"r\" = \"rear\"))\n\n\n\n\n\n\nFigure 14\n\n\n\n\nscale_color_brewer() 함수는 ColorBrewer 컬러 스케일을 사용한 것인데 익히고 있으면 많은 도움이 된다.\n\n2.2 패싯\n패싯(facets) 레이어는 다면생성(faceting) 과정을 통해 하나의 플롯을 여러개의 하위 플롯으로 쪼갬으로서 생성된다.\n\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point() + \n  facet_wrap(~cyl)\n\n\n\n\n\n\nFigure 15: 패싯: facet_wrap()\n\n\n\n\n두 개의 변수에 의거해 패싯을 생성할 수도 있다.\n\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point() + \n  facet_grid(drv ~ cyl)\n\n\n\n\n\n\nFigure 16: 패싯: facet_grid()\n\n\n\n\n\n2.3 통계적 변환\n어떤 시각화 과정은 필연적으로 통계적 변환(statistical transformation)을 수반한다.\n\nggplot(diamonds, aes(x = cut)) + \n  geom_bar()\n\n\n\n\n\n\nFigure 17: 통계적 변환: geom_bar()\n\n\n\n\nFigure 17 은 Figure 18 에서 보는 바와 같이, 원데이터로부터 빈도를 계산(통계적 전환)하고 그것을 그래프로 전환한다.\n\n\n\n\n\nFigure 18: 통계적 변환 과정: geom_bar()의 경우(https://r4ds.hadley.nz/layers)\n\n\nafter_stat()이라고 하는 도우미 함수를 사용하면, 이 그래프를 절대 빈도가 아닌 상대 빈도 그래프로 변환할 수 있다. 이 역시 통계적 변환 과정이 숨어 있는 것이다.\n\nggplot(diamonds, aes(x = cut, y = after_stat(prop), group = 1)) + \n  geom_bar()\n\n\n\n\n\n\nFigure 19: 통계적 변환: geom_bar()\n\n\n\n\n막대 그래프에 심미성을 가미하고, position 아규먼트를 통한 위치 조정(position adjustment)을 시도한다.\n\nggplot(mpg, aes(x = drv, fill = class)) + \n  geom_bar()\n\n\n\n\n\n\nFigure 20: position: stack\n\n\n\n\n기하 객체에 색상을 지정하고 싶을 때, 0차원(point)과 1차원(line) 객체에는 color라는 심미성을 적용하지만, 막대 그래프와 같은 2차원(area) 객체에는 fill이라는 심미성을 적용한다. 자주 혼돈이 되는 부분이다.\n위치 조정을 위해 position 아규먼트를 사용하는데, 네 가지 옵션이 있다.\n\nposition = \"stack\"\nposition = \"identity\"\nposition = \"dodge\"\nposition = \"fill\"\n\nFigure 20 에는 디폴트로 position = \"stack\"이 적용된 것이다. Figure 21 는 position = \"dodge\"를 적용한 것이다 . 나머지 옵션도 적용해보고 차이가 무엇인지 알아본다.\n\nggplot(mpg, aes(x = drv, fill = class)) + \n  geom_bar(position = \"dodge\")\n\n\n\n\n\n\nFigure 21: position: dodge\n\n\n\n\n\n2.4 좌표\n좌표(coordinates) 레이어 혹은 좌표계(coordinate systems)는 그래픽 요소들의 위치 결정에 기준이 되는 준거체계이다. 특히 두 가지가 함수가 유용하다. coord_flip() 함수는 축을 전환한다.\n\nggplot(mpg, aes(x = drv, fill = class)) + \n  geom_bar(position = \"fill\") +\n  coord_flip()\n\n\n\n\n\n\nFigure 22: coord_clip() 함수\n\n\n\n\ncoord_fixed() 함수는 두 축의 스케일을 절대화하여 동일하게 적용한다. 무슨 의미인지 알아본다.\n\nggplot(mpg, aes(cty, hwy)) +\n  geom_point() +\n  coord_fixed()\n\n\n\n\n\n\nFigure 23: coord_fixed() 함수\n\n\n\n\n\n2.5 테마\n테마(themes)는 그래프의 외양에 영향을 끼치는 또 다른 요소이다. 우선, 전체적인 외양을 한꺼번에 바꿀 수 있다. ggplot2는 Figure 24 에서 보는 처럼 모두 8가지 테마를 제공한다.\n\n\n\n\n\nFigure 24: ggplot2가 제공하는 테마(https://r4ds.hadley.nz/communication)\n\n\n디폴트인 회색빛 배경이 마음에 들지 않았다면 Figure 25 처럼 흑백 테마(theme_bw())를 적용할 수도 있다. 다른 테마도 적용해 보고 그 차이를 알아본다.\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = class)) +\n  geom_smooth(se = FALSE) +\n  theme_bw()\n\n\n\n\n\n\nFigure 25\n\n\n\n\n이렇게 한꺼번에 그래프의 외관을 바꿀 수도 있지만 theme() 함수를 통해 그래프의 개별 요소 하나씩을 모두 수정할 수 있다. 어떤 요소를 바꿀 수 있는지 다음을 참고한다.\n\nhttps://ggplot2.tidyverse.org/reference/theme.html\n\nFigure 26 는 몇 가지 요소를 수정한 사례이다.\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  labs(\n    title = \"Larger engine sizes tend to have lower fuel economy\",\n    caption = \"Source: https://fueleconomy.gov.\"\n  ) +\n  theme(\n    legend.position = c(0.6, 0.7),\n    legend.direction = \"horizontal\",\n    plot.title = element_text(face = \"bold\"),\n    plot.title.position = \"plot\",\n    plot.caption.position = \"plot\",\n    plot.caption = element_text(hjust = 0)\n  )\n\n\n\n\n\n\nFigure 26: 개별 요소의 수정: theme() 함수",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 시각화하기"
    ]
  },
  {
    "objectID": "exec_05.html#기타-사항",
    "href": "exec_05.html#기타-사항",
    "title": "데이터 시각화하기",
    "section": "\n3 기타 사항",
    "text": "3 기타 사항\n\n3.1 라벨과 주석\nlab() 함수를 활용하면 그래프의 다양한 종류의 라벨을 설정할 수 있다.\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = class)) +\n  geom_smooth(se = FALSE) +\n  labs(\n    x = \"Engine displacement (L)\",\n    y = \"Highway fuel economy (mpg)\",\n    color = \"Car type\",\n    title = \"Fuel efficiency generally decreases with engine size\",\n    subtitle = \"Two seaters (sports cars) are an exception because of their light weight\",\n    caption = \"Data from fueleconomy.gov\"\n  )\n\n\n\n\n\n\nFigure 27: 라벨링\n\n\n\n\n기하 함수인 geom_text() 혹은 geom_label()를 통해 그래프 속에 텍스트를 삽입할 수 있다. 주석이 겹치는 것을 방지하기 위해 ggrepel 패키지가 유용하게 사용될 수 있다.\n\nlibrary(ggrepel)\n\n\nggplot(mpg, aes(displ, hwy)) + \n  geom_point(colour = \"red\") +\n  geom_label_repel(data = mpg |&gt; slice_sample(prop = 0.1), aes(label = class))\n\n\n\n\n\n\n\n\n3.2 레이아웃\n레이아웃(layout)은 복수의 그래프를 적절히 배치하여 하나의 그래픽으로 융합하는 과정을 의미한다. 수 많은 ggplot2의 확장 패키지(ggplot2 extensions) 중 하나이 patchwork 패키지를 활용할 수 있다.\n\nlibrary(patchwork)\n\n\np1 &lt;- ggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point() + \n  labs(title = \"Plot 1\")\np2 &lt;- ggplot(mpg, aes(x = drv, y = hwy)) + \n  geom_boxplot() + \n  labs(title = \"Plot 2\")\np1 + p2\n\n\n\n\n\n\nFigure 28: 레이아웃: patchwork 패키지\n\n\n\n\n\n3.3 그래프의 저장\n두 가지 방식이 있다.\n첫 번째 방식은 Output 창의 Plots 탭에 있는 Export 버턴을 이용하는 것이다. 다양한 그래픽 포멧 뿐만 아니라 pdf 형식으로도 저장할 수 있다.\n두 번째 방식은 ggplot2 의 ggsave() 함수를 이용하는 것이다. 결과물의 폰트 크기, 가로세로비, 해상도 등을 종합적으로 고려하여 최적의 세팅값을 찾아야 한다. 자신의 디바이스에 따라 동일한 세팅값이 다른 결과를 산출할 수도 있다.\n\nmy_plot &lt;- ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  labs(\n    title = \"Larger engine sizes tend to have lower fuel economy\",\n    caption = \"Source: https://fueleconomy.gov.\"\n  ) +\n  theme(\n    legend.position = c(0.6, 0.7),\n    legend.direction = \"horizontal\",\n    plot.title = element_text(face = \"bold\"),\n    plot.title.position = \"plot\",\n    plot.caption.position = \"plot\",\n    plot.caption = element_text(hjust = 0)\n  )\nggsave(filename = \"my_plot.png\", plot = my_plot, width = 8, height = 8 * 0.618, dpi = 600)",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 시각화하기"
    ]
  },
  {
    "objectID": "exec_07.html",
    "href": "exec_07.html",
    "title": "데이터 수집하기",
    "section": "",
    "text": "이 실습은 R로 데이터를 수집하는 과정을 다루다. R을 활용한 데이터 수집은 다양한 방법으로 진행될 수 있지만 여기서는 웹상의 데이터 파일 불러오기, 웹 스크레이핑, API를 이용하는 방식에 집중한다. 실습의 시작은 tidyverse 패키지를 불러오는 것이다.\n\nlibrary(tidyverse)",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 수집하기"
    ]
  },
  {
    "objectID": "exec_07.html#실습-개요",
    "href": "exec_07.html#실습-개요",
    "title": "데이터 수집하기",
    "section": "",
    "text": "이 실습은 R로 데이터를 수집하는 과정을 다루다. R을 활용한 데이터 수집은 다양한 방법으로 진행될 수 있지만 여기서는 웹상의 데이터 파일 불러오기, 웹 스크레이핑, API를 이용하는 방식에 집중한다. 실습의 시작은 tidyverse 패키지를 불러오는 것이다.\n\nlibrary(tidyverse)",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 수집하기"
    ]
  },
  {
    "objectID": "exec_07.html#웹상의-데이터-파일-불러오기",
    "href": "exec_07.html#웹상의-데이터-파일-불러오기",
    "title": "데이터 수집하기",
    "section": "\n1 웹상의 데이터 파일 불러오기",
    "text": "1 웹상의 데이터 파일 불러오기\n아마도 데이터를 수집하는 가장 단순한 방법은 웹상에 파일 형태로 존재하는 데이터를 R에서 불러오는 것일 것이다. readr 패키지에서 제공하는 다양한 데이터 불러오기 함수(예: read_csv())를 데이터의 URL에 적용하면 손쉽게 데이터를 획득할 수 있다.\n\nstudents &lt;- read_csv(\"https://pos.it/r4ds-students-csv\")\nstudents\n\n# A tibble: 6 × 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 Güvenç Attila    Ice cream          Lunch only          6    \n\n\n그런데 엑셀 형식의 파일은 readxl 패키지가 제공하는 read_excel() 함수를 이용해 막바로 데이터를 불러오는 것이 불가능하다.\n\nlibrary(readxl)\nread_excel(\"https://github.com/awalker89/openxlsx/raw/master/inst/readTest.xlsx\")\n\nError: `path` does not exist: 'https://github.com/awalker89/openxlsx/raw/master/inst/readTest.xlsx'\n\n\nopenxlsx 패키지는 이러한 문제를 해결할 수 있게 해준다. 정말 다양한 함수를 제공하지만 read.xlsx() 함수가 URL을 통해 엑셀 데이터를 불러오는데 사용된다.\n\nlibrary(openxlsx)\nxlsx_data &lt;- read.xlsx(\"https://github.com/awalker89/openxlsx/raw/master/inst/readTest.xlsx\")\nxlsx_data\n\n    Var1 Var2   Var3 Var4  Var5         Var6 Var7\n1   TRUE    1   1.00    a 42042 3209324 This   NA\n2   TRUE   NA     NA    b 42041         &lt;NA&gt;   NA\n3   TRUE    2   1.34    c 42040         &lt;NA&gt;   NA\n4  FALSE    2     NA &lt;NA&gt;    NA         &lt;NA&gt;   NA\n5  FALSE    3   1.56    e    NA         &lt;NA&gt;   NA\n6  FALSE    1   1.70    f 42037         &lt;NA&gt;   NA\n7     NA   NA     NA &lt;NA&gt; 42036         &lt;NA&gt;   NA\n8  FALSE    2  23.00    h 42035         &lt;NA&gt;   NA\n9  FALSE    3  67.30    i 42034         &lt;NA&gt;   NA\n10    NA    1 123.00 &lt;NA&gt; 42033         &lt;NA&gt;   NA",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 수집하기"
    ]
  },
  {
    "objectID": "exec_07.html#웹스크레이핑",
    "href": "exec_07.html#웹스크레이핑",
    "title": "데이터 수집하기",
    "section": "\n2 웹스크레이핑",
    "text": "2 웹스크레이핑\n웹스크레이핑(web scraping)이란 웹페이지로부터 특정한 데이터를 추출하는 것을 의미한다. R에서 웹스크레이핑은 rvest 패키지가 답당하는데, reaxl 패키지와 마찬가지로 tidyverse의 핵심 패키지는 아니기 때문에 따로 불러와야 한다.\n\nlibrary(tidyverse)\nlibrary(rvest)\n\n\n2.1 HTML 기초\n거의 모든 웹페이지는 HTML(HyperText Markup Language, 하이퍼텍스트 마크업 언어)로 만들어져 있다. HTML은 웹브라우저(web browser)를 통해 표출되는 사항(무엇이 어떻게)을 프로그래밍하는 마크업(markup) 언어이다. 웹스크레이핑 맥락에서 HTML에 대한 몇 가지 기초 사항은 숙지할 필요가 있다.\n\n웹페이지는 태그(tag)로 이루어져 있다. 각 태그는 시작 테그와 종료(끝) 태그로 구성되며, 둘 사이에 콘텐츠가 놓인다. 태그를 중심으로 개별 단위를 엘리먼트(element)라고 부르기도 한다.\n\n태그의 종류는 다양하다. 태그는 크게 세 가지로 구분되는데, 최상위인 html 태그, 웹페이지의 전반적인 구조를 결정하는 블록(block) 태그(예: hi, section, p, ol 태그 등), 블록 태그 내부의 특정 부분에만 적용되는 인라인(inline) 태그(예: b, i, a 태그 등)가 있다. 태그는 모두 100개 이상이 존재한다고 하는데, 그 중 많이 사용되는 것들은 다음과 같다.\n\nhtml 태그: 모든 웹페이지에 존재하는 최상위 태그로, 그 하위에 head 태그와 body 태그를 가져야함.\nhead 태그: 웹페이지의 제목이나 머릿말과 같은 메타데이터로 구성\nbody 태그: 본문에 해당하는 부분\ntitle 태그: 타이틀바에 입력될 텍스트 지정\nlink 태그: 외부 css 파일을 연결\nmeta 태그: 문서의 다양한 정보를 제공\nscript 태그: 외부 js 파일을 연결하거나 javascript 코드를 입력\ndiv 태그: 상자 영역을 만듦\nspan 태그: 요소 일부분만 변경하고자 할 때 사용하는 것으로 인라인(inline tag)의 대표\nimg 태그: 이미지를 가져옴\n\nh 태그: 제목 태그\n\nh1, h2, h3, h4, h5, h6\n\n\ntable 태그: 표를 나타냄\np 태그: 문단을 표현\nul 태그: 번호가 없는 리스트\nol 태그: 번호가 있는 리스트\nli 태그: ul 태그나 ol 태그 내에서 사용\nbr 태그: 줄 바꿈 기능을 하는 단독 태그\nb 태그: 굵은 글씨 지정\ni 태그: 이탤릭체 글씨 지정\na 태그: 링크 이동\ninput 태그: 입력창을 생성\nbutton 태그: 버튼을 생성\nselect 태그: 선택 박스 창을 생성\nform 태그: 데이터 전송\n\n\n다양한 태그들이 복잡한 다단계 위계 구조를 이룬다.\n\n\n\n\n\n\nFigure 1: HTML의 위계 구조 (&lt;https://odinuv.cz/articles/html/&gt;)\n\n\n\n\n태그는 속성(attribute)을 가질 수 있다.\n\n특별히 중요한 속성: class, identity\np나 div 태그와 같은 블록 태그: height, width, margin, padding\nimg 태그: src, alt, width, height\na 태그: href\n\n\n\n2.2 HTML 요소의 선택\nHTML 요소란 태그와 속성으로 확정가능한 HTML의 특정 부분을 의미하는 것으로, 웹스크레이핑의 타깃의 주소와 같은 것이다.\n\n2.2.1 단일 수준에서의 요소 선택\n선택 대상을 효과적으로 규정하기 위해 사용되는 것이 CSS(cascading style sheet) 선택자(selector)이다. CSS는 HTML의 시각적 구성을 통제하는 툴인데, html의 특정 부분을 지칭하는 작은 언어(miniature language)를 가지고 있고, CSS 선택자라 부른다.\n\n\n\n\n\n\n\n선택 대상\n선택자(selector)\n결과\n\n\n\n태그(tag)\ntable\n모든 table 요소를 선택\n\n\n클래스(class)\n.className\n“className”이라는 class 속성을 갖는 모든 요소\n\n\n아이디(id)\n#idName\n“idName”이라는 id 속성을 갖는 모든 요소\n\n\ntag과 class의 결합\ntag.class\n“tag”이라는 tag의 “class”라는 class 속성을 가진 모든 요소\n\n\nclass1와 class2의 결합\n.class1.class2\n“class1”이라는 이름의 class 속성과 “class2”라는 이름의 class 속성을 동시에 갖는 모든 요소\n\n\n\n2.2.2 하위 요소의 선택\n동일 수준에서 한 요소를 선택한 이후 그 하위에 있는 요소를 위계적으로 선정하는 과정이다. 만약 div 태그의 하위에 있는 span 태그의 하위에 있는 a 태그를 선택하고 싶다면 태그의 위계에 따라 요소를 나열하면 된다(div span a).\n\n2.2.3 정확한 선택자의 확인\n정확한 선택자를 확인하는 것이 웹스크레이핑의 관건이다. 보통 해당 웹페이지에서 오른쪽 마우스 버튼을 누른 뒤 “검사”를 선택하여 이리저리 살펴보아야 한다. SelectorGadget과 같은 브라우저 확장 프로그램이 도움이 될 수 있다. 링크로 들어가면 간단한 사용 방법을 살펴볼 수 있다.\n\n2.3 웹스크레이핑 단계와 rvest 함수\n1단계는 웹페이지 읽기 단계이다.\nread_html() 함수를 이용해 웹페이지를 읽어 들인다.\n2단계는 HTML 요소의 선택 단계이다.\n\n\nhtml_element()함수\n\n하나의 요소만 리턴\n주로 관측개체를 추출할 때 사용\n\n\n\nhtml_elements()함수\n\n요소의 리스트를 리턴\n주로 변수를 추출할 때 사용\n\n\n\n3단계는 하위 요소의 선택 단계이다. 여기에는 두 가지 방식이 있다.\n\nhtml_element()함수나 html_elements() 함수 속에 요소들을 위계에 따라 나열을 하되 요소 사이에 공란을 둔다.\n파이프 오퍼레이터를 활용한다.\n\n4단계는 요소로부터 데이터를 추출하는 단계이다. 다양한 함수를 적용할 수 있다.\n\nhtml_table(): 테이블 데이터를 추출한다.\nhtml_text(): 텍스트 데이터를 추출한다.\nhtml_text2(): 불필요한 부호와 공란을 제거한 텍스트 데이터를 추출한다.\nhtml_attr()과 html_attrs(): 하위 속성 데이터를 추출한다.\n\n2.4 간단한 웹스크레이핑의 예\n\n2.4.1 데이터\nrvest 패키지에 내장되어 있는 예제(starwars)를 활용하여 실습을 진행한다. 웹페이지에 접속하여 어떤 내용으로 구성되어 있는지 확인한다. 앞에서 언급한 것처럼, 오른쪽 마우스 버튼을 누르고 “검사”를 선택하면 해당 패이지의 HTML 구조를 살펴볼 수 있다. 모든 영화가 다음과 같은 동일한 구조를 가지고 있음을 확인한다.\n\n&lt;section&gt;\n  &lt;h2 data-id=\"1\"&gt;The Phantom Menace&lt;/h2&gt;\n  &lt;p&gt;Released: 1999-05-19&lt;/p&gt;\n  &lt;p&gt;Director: &lt;span class=\"director\"&gt;George Lucas&lt;/span&gt;&lt;/p&gt;\n  \n  &lt;div class=\"crawl\"&gt;\n    &lt;p&gt;...&lt;/p&gt;\n    &lt;p&gt;...&lt;/p&gt;\n    &lt;p&gt;...&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/section&gt;\n\n우리의 웹스크레이핑 목적은 7개의 영화별로 제목(title), 연도(year), 감독(director), 요약(intro) 속성을 갖는 데이터 프레임을 생성하는 것이다.\n\n2.4.2 웹스크레이핑의 과정\nread_html() 함수를 이용하여 웹페이지를 읽어 들인다.\n\nurl &lt;- \"https://rvest.tidyverse.org/articles/starwars.html\"\nhtml &lt;- read_html(url)\n\n“section” 태그 요소를 선택한다.\n\nsection &lt;- html |&gt; \n  html_elements(\"section\")\nsection\n\n{xml_nodeset (7)}\n[1] &lt;section&gt;&lt;h2 data-id=\"1\"&gt;\\nThe Phantom Menace\\n&lt;/h2&gt;\\n&lt;p&gt;\\nReleased: 1999 ...\n[2] &lt;section&gt;&lt;h2 data-id=\"2\"&gt;\\nAttack of the Clones\\n&lt;/h2&gt;\\n&lt;p&gt;\\nReleased: 20 ...\n[3] &lt;section&gt;&lt;h2 data-id=\"3\"&gt;\\nRevenge of the Sith\\n&lt;/h2&gt;\\n&lt;p&gt;\\nReleased: 200 ...\n[4] &lt;section&gt;&lt;h2 data-id=\"4\"&gt;\\nA New Hope\\n&lt;/h2&gt;\\n&lt;p&gt;\\nReleased: 1977-05-25\\n ...\n[5] &lt;section&gt;&lt;h2 data-id=\"5\"&gt;\\nThe Empire Strikes Back\\n&lt;/h2&gt;\\n&lt;p&gt;\\nReleased: ...\n[6] &lt;section&gt;&lt;h2 data-id=\"6\"&gt;\\nReturn of the Jedi\\n&lt;/h2&gt;\\n&lt;p&gt;\\nReleased: 1983 ...\n[7] &lt;section&gt;&lt;h2 data-id=\"7\"&gt;\\nThe Force Awakens\\n&lt;/h2&gt;\\n&lt;p&gt;\\nReleased: 2015- ...\n\n\n제목과 감독명에 대한 선택자가 각각 h2 태그와 director 클래스에 들어가 있음을 알 수 있다. html_element()와 html_text2() 함수를 활용하여 데이터를 추출한다.\n\nsection |&gt; \n  html_element(\"h2\") |&gt; \n  html_text2()\n\n[1] \"The Phantom Menace\"      \"Attack of the Clones\"   \n[3] \"Revenge of the Sith\"     \"A New Hope\"             \n[5] \"The Empire Strikes Back\" \"Return of the Jedi\"     \n[7] \"The Force Awakens\"      \n\nsection |&gt; \n  html_element(\".director\") |&gt; \n  html_text2()\n\n[1] \"George Lucas\"     \"George Lucas\"     \"George Lucas\"     \"George Lucas\"    \n[5] \"Irvin Kershner\"   \"Richard Marquand\" \"J. J. Abrams\"    \n\n\n\n2.5 웹스크레이핑의 실제 1: 테이블이 하나 있는 경우\n위키피디어의 한 항목(List of countries and dependencies by population)에는 표 하나가 포함되어 있다. 해당 표의 데이터를 수집한다.\n\nurl &lt;- \"https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population\"\nmy_table &lt;- url |&gt; \n  read_html() |&gt; \n  html_element(\"table\") |&gt; \n  html_table()\nmy_table\n\n# A tibble: 241 × 7\n   ``      Location    Population `% ofworld` Date  Source (official or …¹ ``   \n   &lt;chr&gt;   &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;                  &lt;chr&gt;\n 1 –       World       8,104,769… 100%        5 Ma… UN projection[3]       \"\"   \n 2 1/2 [b] China       1,409,670… 17.4%       31 D… Official estimate[5]   \"[c]\"\n 3 1/2 [b] India       1,400,744… 17.3%       1 Ma… Official projection[6] \"[d]\"\n 4 3       United Sta… 335,893,2… 4.1%        1 Ja… Official estimate[7]   \"[e]\"\n 5 4       Indonesia   279,118,8… 3.4%        1 Ju… National annual proje… \"\"   \n 6 5       Pakistan    241,499,4… 3.0%        1 Ma… 2023 census result[9]  \"[f]\"\n 7 6       Nigeria     223,800,0… 2.8%        1 Ju… Official projection[1… \"\"   \n 8 7       Brazil      203,080,7… 2.5%        1 Au… 2022 census result[11] \"\"   \n 9 8       Bangladesh  169,828,9… 2.1%        14 J… 2022 census result[12] \"\"   \n10 9       Russia      146,150,7… 1.8%        1 Ja… Official estimate[13]  \"[g]\"\n# ℹ 231 more rows\n# ℹ abbreviated name: ¹​`Source (official or fromthe United Nations)`\n\nmy_table &lt;- my_table |&gt; \n  select(-1, -7) |&gt; \n  rename(\n    location = \"Location\",\n    population = \"Population\",\n    pop_pct = \"% ofworld\",\n    date = \"Date\",\n    source = \"Source (official or fromthe United Nations)\"\n  ) |&gt; \n  mutate(\n    population = str_remove_all(population, \",\"),\n    population = as.numeric(population),\n    pop_pct = str_remove(pop_pct, \"%\"),\n    pop_pct = as.numeric(pop_pct),\n    date = dmy(date)\n  )\nmy_table\n\n# A tibble: 241 × 5\n   location      population pop_pct date       source                       \n   &lt;chr&gt;              &lt;dbl&gt;   &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;                        \n 1 World         8104769000   100   2024-05-05 UN projection[3]             \n 2 China         1409670000    17.4 2023-12-31 Official estimate[5]         \n 3 India         1400744000    17.3 2024-03-01 Official projection[6]       \n 4 United States  335893238     4.1 2024-01-01 Official estimate[7]         \n 5 Indonesia      279118866     3.4 2023-07-01 National annual projection[8]\n 6 Pakistan       241499431     3   2023-03-01 2023 census result[9]        \n 7 Nigeria        223800000     2.8 2023-07-01 Official projection[10]      \n 8 Brazil         203080756     2.5 2022-08-01 2022 census result[11]       \n 9 Bangladesh     169828911     2.1 2022-06-14 2022 census result[12]       \n10 Russia         146150789     1.8 2024-01-01 Official estimate[13]        \n# ℹ 231 more rows\n\n\n\n2.6 웹스크레이핑의 실제 2: 테이블이 둘 이상인 경우\n위키피디어의 한 항목(List of FIPS country codes)에는 동일한 내용에 대해 여러 개의 표가 나타나 있다. 개별 표의 데이터를 수집한 후 결합하여 단일한 데이터 프레임을 구성한다.\n\nurl &lt;- \"https://en.wikipedia.org/wiki/List_of_FIPS_country_codes\"\nmy_tables &lt;- url |&gt; \n  read_html() |&gt; \n  html_elements(\"table\") |&gt; \n  html_table() |&gt; \n  bind_rows()\nmy_tables\n\n# A tibble: 283 × 10\n   Code    `Short-form name` .mw-parser-output .n…¹ .mw-parser-output .n…² ...3 \n   &lt;chr&gt;   &lt;chr&gt;             &lt;chr&gt;                  &lt;chr&gt;                  &lt;chr&gt;\n 1 .mw-pa… Aruba             &lt;NA&gt;                   &lt;NA&gt;                   &lt;NA&gt; \n 2 AC      Antigua and Barb… &lt;NA&gt;                   &lt;NA&gt;                   &lt;NA&gt; \n 3 AE      United Arab Emir… &lt;NA&gt;                   &lt;NA&gt;                   &lt;NA&gt; \n 4 AF      Afghanistan       &lt;NA&gt;                   &lt;NA&gt;                   &lt;NA&gt; \n 5 AG      Algeria           &lt;NA&gt;                   &lt;NA&gt;                   &lt;NA&gt; \n 6 AJ      Azerbaijan        &lt;NA&gt;                   &lt;NA&gt;                   &lt;NA&gt; \n 7 AL      Albania           &lt;NA&gt;                   &lt;NA&gt;                   &lt;NA&gt; \n 8 AM      Armenia           &lt;NA&gt;                   &lt;NA&gt;                   &lt;NA&gt; \n 9 AN      Andorra           &lt;NA&gt;                   &lt;NA&gt;                   &lt;NA&gt; \n10 AO      Angola            &lt;NA&gt;                   &lt;NA&gt;                   &lt;NA&gt; \n# ℹ 273 more rows\n# ℹ abbreviated names:\n#   ¹​`.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:\"[ \"}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:\" ]\"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a&gt;span,.mw-parser-output .navbar a&gt;abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteGeocode systems...1`,\n#   ²​`.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:\"[ \"}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:\" ]\"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a&gt;span,.mw-parser-output .navbar a&gt;abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteGeocode systems...2`\n# ℹ 5 more variables: ...4 &lt;chr&gt;, ...5 &lt;chr&gt;, ...6 &lt;chr&gt;, X1 &lt;chr&gt;, X2 &lt;chr&gt;\n\nmy_tables &lt;- my_tables |&gt; \n  select(1, 2) |&gt; \n  rename(\n    code = \"Code\", \n    short_name = \"Short-form name\"\n  ) |&gt; \n  mutate(\n    code = str_extract(code, \"[A-Z][A-Z]\")\n  )\nmy_tables\n\n# A tibble: 283 × 2\n   code  short_name          \n   &lt;chr&gt; &lt;chr&gt;               \n 1 AA    Aruba               \n 2 AC    Antigua and Barbuda \n 3 AE    United Arab Emirates\n 4 AF    Afghanistan         \n 5 AG    Algeria             \n 6 AJ    Azerbaijan          \n 7 AL    Albania             \n 8 AM    Armenia             \n 9 AN    Andorra             \n10 AO    Angola              \n# ℹ 273 more rows\n\n\n\n2.7 웹스크레이핑의 실제 3: 네이버 뉴스 데이터 수집하기\n\n2.7.1 기간을 설정하지 않은 경우\n네이버 신문(https://news.naver.com/)에 키워드(예: 지방소멸)로 검색한 기사를 제목과 내용으로 나누어 데이터를 수집한다.\n\nurl &lt;- \"https://search.naver.com/search.naver?where=news&ie=utf8&sm=nws_hty&query=%EC%A7%80%EB%B0%A9%EC%86%8C%EB%A9%B8\"\ntitle &lt;- url |&gt; \n  read_html() |&gt; \n  html_elements(\".news_tit\") |&gt; \n  html_text2()\ncontents &lt;- url |&gt; \n  read_html() |&gt; \n  html_elements(\".dsc_txt_wrap\") |&gt; \n  html_text2()\nmy_news &lt;- tibble(title, contents)\nmy_news\n\n# A tibble: 10 × 2\n   title                                                               contents \n   &lt;chr&gt;                                                               &lt;chr&gt;    \n 1 \"[지방소멸 경고등] 위기 속 작은 희망…영월 옥동초교의 실험\"          \"연합뉴… \n 2 \"지자체 ‘지방소멸기금’ 최대 160억 지원\"                             \"지방소… \n 3 \"접경지, 청년 창업 ‘확대’…지방소멸 ‘극복’ 시도\"                     \"[앵커] …\n 4 \"우수 지자체에 지방소멸대응기금 집중 지원한다…배분체계 개선\"        \"행정안… \n 5 \"저출산율·양극화… 韓사회는 왜 소멸의 길을 가고 있나\"                \"사람들… \n 6 \"[인터뷰] 천하람 \\\"저출산·지방소멸·정치개혁…미래세대 이슈에 집중\\\"\" \"또 지방…\n 7 \"[매일경제TV] 지방 소멸 막기 위한 정책\"                             \"인구 감…\n 8 \"지역소멸 시대, 농협의 역할에 변화가 필요하다\"                      \"농식품… \n 9 \"여당 재선 엄태영 \\\"지방소멸위기 처한 제천·단양 반드시 살리겠다\\\"\"  \"'실천하…\n10 \"“강진군, 지역소멸 위기 극복 인구정책 롤모델 급부상”\"               \"군에 따…\n\n\n\n\n\n\n\n\nWarning\n\n\n\n한 번에 10개의 케이스밖에 수집되지 않는다. 방도를 강구해야 한다.\n\n\n\n2.7.2 기간을 설정한 경우\n2023년 1월 1일부터 2023년 12월 31일까지로 기간을 설정하여 데이터를 수집한다.\n\nstart.date &lt;- \"2023.01.01\"\nend.date &lt;- \"2023.12.31\"\nurl &lt;- str_c(\"https://search.naver.com/search.naver?where=news&query=%EC%A7%80%EB%B0%A9%EC%86%8C%EB%A9%B8&sm=tab_opt&sort=0&photo=0&field=0&pd=3&ds=\", start.date, \"&de=\", end.date, \"&docid=&related=0&mynews=0&office_type=0&office_section_code=0&news_office_checked=&nso=so%3Ar%2Cp%3Afrom20230101to20231231&is_sug_officeid=0&office_category=0&service_area=0\")\ntitle &lt;- url |&gt; \n  read_html() |&gt; \n  html_elements(\".news_tit\") |&gt; \n  html_text2()\ncontents &lt;- url |&gt; \n  read_html() |&gt; \n  html_elements(\".dsc_txt_wrap\") |&gt; \n  html_text2()\nmy_news &lt;- tibble(title, contents)\nmy_news\n\n# A tibble: 10 × 2\n   title                                                            contents    \n   &lt;chr&gt;                                                            &lt;chr&gt;       \n 1 \"정부, 지방소멸 극복 위한 '지역활력타운' 확대 추진\"              \"행정안전부…\n 2 \"구미 지방소멸 극복 위해 교육 혁신 나서\"                         \"구미시가 … \n 3 \"[이제는 지방시대] 드론을 미래 먹거리로… 포천시 ‘기회발전특구’ … \"기회발전특…\n 4 \"순천시, (송년사) 지방소멸을 다시 세울 새로운 이정표\"            \"ⓒ사진제공… \n 5 \"괴산군 \\\"지방소멸 적극대응 올해 두드러진 성과\\\"\"                \"충북 괴산… \n 6 \"지역소멸 위기에 희망을 던져준 고향사랑기부\"                     \"특히 전남… \n 7 \"[朝鮮칼럼] 인구 소멸·지방 소멸… 역발상으로 넘자\"                \"인구 소멸,…\n 8 \"'밑 빠진 독' 지역소멸 대응책에…'생활인구를 잡아라'\"             \"원래 살던 …\n 9 \"철원플라즈마硏, 지방소멸대응기금사업 2024년 사업설명회 열어\"    \"철원플라즈…\n10 \"[신년사설] 인구재앙 국가소멸을 두고만 볼 것인가\"                \"이런 가운… \n\n\n\n\n\n\n\n\nWarning\n\n\n\n마찬가지로 단 10개의 케이스만 수집되는 상황이 발생함.",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 수집하기"
    ]
  },
  {
    "objectID": "exec_07.html#api의-활용",
    "href": "exec_07.html#api의-활용",
    "title": "데이터 수집하기",
    "section": "\n3 API의 활용",
    "text": "3 API의 활용\n\n3.1 정의\nAPI(application programming interface)는 복수의 프로그램들이 서로 상호작용하는 방법을 정의하는 일련의 규칙을 의미한다. 다른 말로 하면 한 프로그램이 다른 프로그램의 기능들을 불러 사용할 수 있게 해주는 통로를 의미한다.\n이런 API 개념이 데이터 수집과 관련하여 중요한 의미를 가지는 것은 개방 API(open API) 때문이다. 개방 API는 데이터를 보유하고 있는 공적 기관이 데이터의 사용 권한을 사용자들에게 부여함으로써 데이터에 대한 접근 가능성을 높여주기 때문이다.\n만일 개방 API가 존재하는 상황이라면 데이터사이언스의 가장 좋은 데이터 수집 방법은 오픈 API를 활용하는 것이다.\n\n3.2 R에서 API를 활용한 데이터 수집\n최근까지 API를 활용한 데이터 수집에는 httr과 jsonlite라는 두 개의 패키지가 함께 사용되었다. 그런데 최근 httr의 완전 업그레이드 버전인 httr2가 선을 보이면서 이 패키지를 단독으로 활용하는 방식이 주목 받고 있다(https://httr2.r-lib.org/). httr2는 R의 tidyverse 운동을 이끌고 있는 해들리 위컴(Hadley Wickham)이 tidyverse의 철학에 맞추어 httr 패키지를 발전시킨 것이다. 이러한 R 패키지를 직접 활용하는 것이 가장 좋은 방법이겠지만, 초보자의 경우 다소간의 어려움을 겪을 수 있다. httr2 함수가 다른 패키지의 함수에 비해 개념적으로 이해하기 어려운 측면이 있고, 데이터를 획득하는 구체적인 과정이 API 마다 조금씩 달라 응용력이 발휘되어야 하는 상황이 발생하기 때문이기도 하다.\n이러한 어려움을 들어주기 위해 일종의 연결 패키지들이 개발되어 있는데, 이러한 패키지를 래퍼 패키지(wrapper package)라고 부른다. 래퍼 패키지들은 사용자와 API 수집용 패키지 사이에서 일종의 가교 역할을 하는 것으로 사용자들이 사용하기 편한 함수를 제공함으로써 보다 손쉽게 오픈 API를 활용할 수 있게 도와준다. 예를 들어, 구글맵스플랫폼(Google Maps Platform)에 API로 접근해 다양한 기능을 활용할 수 있게 도와주는 googleway와 같은 패키지가 좋은 예가 될 수 있다.\n\n3.3 API를 활용한 KOSIS 데이터의 수집\nKOSIS를 포함한 많은 대한민국의 데이터 포털은 개방 API 서비스를 제공하고 있다. KOSIS는 공유서비스 홈페이지(https://kosis.kr/openapi/)를 통해 Open API를 통한 데이터 수집을 권장하고 있다. 개발 가이드(https://kosis.kr/openapi/devGuide/devGuide_0101List.do)를 통해 R을 포함한 다양한 프로그래밍 언어에서 KOSIS의 개방 API 서비스를 활용하는 구체적인 코드를 제공하고 있기도 하다. 가이드 북을 읽어 보면, 앞에서 언급한 R의 httr, jsonlite, rvest와 같은 패키지가 활용됨을 알 수 있다.\n앞에서 설명한 것처럼, API용 패키지를 직접 사용할 수도 있지만, 래퍼 패키지가 존재하기만 한다면 그것을 활용하는 것이 훨씬 손쉬운 옵션일 수 있다. 놀랍게도 한국의 주석훈(Seokhoon Joo)이라는 분이 그러한 기능을 하는 kosis(https://cran.r-project.org/web/packages/kosis/index.html)라는 패키지를 이미 개발해 두었고, 그것을 활용하고자 한다.\n실습 주제는 2022년 센서스 인구 기준으로 전국의 17개 시도별 ’지방소멸위험지수’를 계산하고 그래프의 형태로 표현하는 것이다.\n\n3.3.1 KOSIS에서 API KEY 받기\n\nKOSIS 공유서비스 웹페이지(https://kosis.kr/openapi/) 접속\n\n상단의 [활용신청] 탭 클릭\n\n통계청의 ONE-ID로 통합로그인(없으면 회원가입 필수)\n\n\n\n활용신청하여 사용자 인증키 획득\n\n사용자 인증키는 마이페이지에서 언제든 확인 가능\n\n\n\n3.3.2 패키지 설치 및 인증키 등록\n우선 kosis 패키지를 오른쪽 하단 윈도우의 Packages 탭을 활용하여 인스톨한다. 이후에 아래와 같이 kosis와 tidyverse 패키지를 불러온다.\n\nlibrary(kosis)\nlibrary(tidyverse)\n\nkosis 패키지의 kosis.setKey() 함수를 이용하여 인증키를 등록한다. Your Key Here 자리에 부여받은 인증키를 붙여 넣는다.\n\nkosis.setKey(apikey = \"Your Key Here\")\n\n\n3.3.3 데이터 추출\n다양한 방법으로 데이터를 추출할 수 있지만, KOSIS 홈페이지와 kosis 패키지의 특성을 고려할 때, getStatDataFromURL() 함수를 활용하는 것이 가장 좋은 방식인 것으로 보인다. 이 함수를 이용한 데이터 추출은 다음의 두 단계 과정을 거친다.\n\nKOSIS에서 필요한 데이터의 위치에 대한 URL 정보를 획득한다.\ngetStatDataFromURL() 함수를 활용하여 데이터를 추출한다.\n\n다음의 단계를 수행한다.\n첫째, KOSIS(https://kosis.kr/)에 로그인한다. 이것은 api key를 활용하기 위한 필수 조건이다.\n둘째, 인구 센서스 데이터를 바탕으로 시도별 지방소멸위험지수를 계산하고자 하기 때문에, 최신 인구 센서스의 지역별 20~39세의 여성 인구와 65세 이상의 전체 인구에 대한 데이터가 필요하다. KOSIS 홈페이지를 탐색하여 필요한 데이터가 있는 위치를 찾아간다.\n\n[국내통계]-[주제별 통계]-[인구]-[인구총조사]-[인구부문]-[총조사인구(2015년 이후)]-[전수부문 (등록센서스, 2015년 이후)]-[전수기본표]-[연령 및 성별 인구]\n\n셋째, ’조회설정’을 클릭하여 다음과 같이 선택한다.\n\n항목: ‘총인구(명)’, ‘총인구_남자(명)’, ’총인구_여자(명)’만 선택(더 많은 항목을 선택하면 데이터가 너무 커 에러가 발생)\n행정구역별(읍면동): ‘1 레벨’과 ’2 레벨’ 선택(’1 레벨’은 시도 수준, ’2 레벨’은 시군구 수준)\n\n넷째, ‘조회설정’ 창을 없앤 후(조회창의 왼편 가운데의 화살표 클릭), 표의 오른편 상단에 있는 여러개 탭 중 ‘OPENAPI’ 탭을 클릭한다. 다음과 같이 선택한다.\n\n조회기간 설정: ‘기간설정’ 버턴을 누른 후, 기간설정이 2022~2022년인지 확인한다.\n응답필드 설정: 하나씩 눌러 모두 선택한 후, ‘URL생성’ 탭을 클릭한다. 그리고 나서 ‘URL 복사’ 탭을 클릭한다. URL 속에 api key가 포함되어 있음을 확인한다.\n\n다섯째, 다음과 같이 실행한다. “Your URL” 자리에 복사한 URL를 붙여 넣는다.\n\nyour_url &lt;- \"Your URL\"\ndata_api &lt;- getStatDataFromURL(url = your_url)\n\n\n3.3.4 데이터 정리 및 변형\n아래와 같이 데이터를 정리 및 변형한다. 최종적으로 지역별 지역소멸위험지수를 산출한다. 조교의 도움을 받아, 각 과정에서 무엇을 한 것인지 이해한다.\n\ndata &lt;- data_api |&gt; \n  select(C1, C1_NM, C2, C2_NM, ITM_ID, ITM_NM, DT) |&gt; \n  mutate(\n    across(c(C1, DT), as.numeric),\n    ITM_ID = case_match(\n    ITM_ID, \"T00\" ~ \"T\",\n    \"T01\" ~ \"M\",\n    \"T02\" ~ \"F\"),\n  ) |&gt;\n  unite(\"gender_age\", ITM_ID, C2_NM, sep = \"_\") |&gt; \n  pivot_wider(\n    id_cols = c(C1, C1_NM),\n    names_from = gender_age,\n    values_from = DT\n  ) |&gt; \n  mutate(\n    index = (`F_20~24세` + `F_25~29세` + `F_30~34세` + `F_35~39세`) / `T_65세이상`\n  ) |&gt; \n  select(\n    C1, C1_NM, index\n  ) \n\n시도 데이터와 시군구 데이터를 분리하여 저장한다.\n\ndata_sido &lt;- data |&gt; \n  filter(C1 &gt; 10, C1 &lt; 100) \ndata_sigungu &lt;- data |&gt; \n  filter(C1 &gt; 100 & !C1_NM %in% c(\"동부\", \"면부\", \"읍부\") & str_sub(C1, 5, 5) == 0)\n\n\n3.3.5 그래프 작성\n인구소멸위험지수 연구에서 주로 사용되는 5개의 위험도 클래스의 구분법을 적용하고, 위험도 클래스별로 특정한 색상을 적용하고, 그래프의 범례에 5개의 클래스가 모두 나타나게 하려다보니 코드가 조금 복잡해졌다. 그러나 익혀두면 다른 그래프 작성에 도움이 되니, 조교의 도움을 받아 살펴보도록 한다.\n\ndata_sido &lt;- data_sido |&gt; \n  mutate(\n    index_class = case_when(\n      index &lt; 0.2 ~ \"1\",\n      index &gt;= 0.2 & index &lt; 0.5 ~ \"2\",\n      index &gt;= 0.5 & index &lt; 1.0 ~ \"3\",\n      index &gt;= 1.0 & index &lt; 1.5 ~ \"4\",\n      index &gt;= 1.5 ~ \"5\"\n    ),\n    index_class = factor(index_class, levels = as.character(1:5))\n  )\n\nclass_color &lt;- c(\"1\" = \"#d7191c\", \"2\" = \"#fdae61\",\n                 \"3\" = \"#ffffbf\", \"4\" = \"#a6d96a\", \n                 \"5\" = \"#1a9641\")\ndata_sido |&gt; \n  ggplot(aes(x = index, y = fct_reorder(C1_NM, index))) +\n  geom_col(aes(fill = index_class), show.legend = TRUE) +\n  geom_text(aes(label = format(round(index, digits = 3), \n                               nsmall = 3)), hjust = -0.1) +\n  scale_x_continuous(limits = c(0, 1.5)) +\n  scale_fill_manual(name = \"Classes\", \n                    labels = c(\"&lt; 0.2\", \"0.2 ~ 0.5\", \"0.5 ~ 1.0\", \n                               \"1.0 ~ 1.5\", \"&gt;= 1.5\"), \n                    values = class_color, drop = FALSE) +\n  labs(title = \"인구소멸위험지수, 2022년\", \n       x = \"인구소멸위험지수\", \n       y = \"\")\n\n\n\n\n\n\n\n\n3.4 API를 활용한 NAVER 뉴스 데이터의 수집\n\n3.4.1 NAVER Developer\n네이버의 API를 활용하기 위해서는 네이버 디벨로퍼(https://developers.naver.com/main/)에서 오픈 API를 신청해야 한다. 절차를 정리하면 다음과 같다.\n첫째, [Documents]에서 ‘API 공통 가이드’를 살펴본다. 특히 비로그인 방식 오픈 API가 유요한데, 그 중에서 ’검색’ 카테고리에 해당하는 뉴스, 백과사전, 블로그 등 다양한 검색 서비스에 주목한다.\n둘째, [Products]-[서비스 API]-[검색](https://developers.naver.com/products/service-api/search/search.md)을 선택한다. 여기에는 ’오픈 API 이용 신청’과 ’개발 가이드 보기’가 있는데, 우선 ’개발 가이드 보기’를 숙지한 후 ’오픈 API 이용 신청’을 한다. ’개발 가이드 보기’에서 특히 다음의 몇 가지에 주목한다.\n\n오픈 API 이용 신청 절차\nClientID와 Client Secret 개념\n요청 URL: https://openapi.naver.com/v1/search/news.json\n파라미터: query, display, start, sort\n\n셋째, ’오픈 API 이용 신청’을 한다. 다음의 몇 가지에 주목한다.\n\n애플리케이션 이름: 아무 이름이나 입력\n사용 API: ’검색’이 선택된 상태를 유지\n비로그인 오픈 API 서비스 환경: ’WEB 설정’을 선택\n웹 서비스 URL (최대 10개): ‘http://localhost’ 입력\n\n3.4.2 httr2 패키지 활용: 처음 100개 검색 결과 추출\n’지방소멸’을 검색어로 하여 최초의 100개 검색 결과에 대한 데이터(특히, 제목과 내용)를 수집한다.\n\nlibrary(httr2)\nsearch &lt;- \"지방소멸\"\nyour_url &lt;- \"https://openapi.naver.com/v1/search/news.json\"\nresult_naver &lt;- request(your_url) |&gt; \n  req_headers(\n    \"X-Naver-Client-ID\" = your_ClientID,\n    \"X-Naver-Client-Secret\" = your_Client_Secret\n  ) |&gt; \n  req_url_query(\n    query = search,\n    display = 100,\n    start = 1,\n    sort = \"date\"\n  ) |&gt; \n  req_perform() |&gt; \n  resp_body_json() \nnaver_data &lt;- data.frame(t(sapply(result_naver$items, data.frame)))\n\n\n3.4.3 httr2 패키지 활용: for 함수를 이용하여 1,000개 검색 결과 추출\n\nall_news &lt;- data.frame()\nsearch &lt;- \"지방소멸\"\nfor(i in 1:10){\n  news &lt;- request(your_url) |&gt; \n    req_headers(\n      \"X-Naver-Client-ID\" = your_ClientID,\n      \"X-Naver-Client-Secret\" = your_Client_Secret\n    ) |&gt; \n    req_url_query(\n      query = search,\n      display = 100,\n      start = i,\n      sort = \"date\"\n    ) |&gt; \n    req_perform() |&gt; \n    resp_body_json()\n  body &lt;- data.frame(t(sapply(news$item, data.frame)))\n  all_news &lt;- bind_rows(all_news, body)\n}",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터 수집하기"
    ]
  },
  {
    "objectID": "exec_09.html",
    "href": "exec_09.html",
    "title": "데이터로 소통하기: 대시보드 만들기",
    "section": "",
    "text": "abc",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터로 소통하기: 대시보드 만들기"
    ]
  },
  {
    "objectID": "exec_09.html#실습-개요",
    "href": "exec_09.html#실습-개요",
    "title": "데이터로 소통하기: 대시보드 만들기",
    "section": "",
    "text": "abc",
    "crumbs": [
      "R과 데이터사이언스",
      "데이터로 소통하기: 대시보드 만들기"
    ]
  },
  {
    "objectID": "lab_02.html",
    "href": "lab_02.html",
    "title": "Lab02: R과 데이터사이언스",
    "section": "",
    "text": "R의 패키지에 대해 이해할 수 있다.\n\n데이터사이언스의 과정을 개괄적으로 이해할 수 있다.\n\n데이터 시각화하기\n데이터 변형하기\n데이터 정리하기\n데이터 불러오기\n\n\n파이프 연산자의 사용법에 대해 이해할 수 있다.",
    "crumbs": [
      "R 실습",
      "Lab02: R과 데이터사이언스"
    ]
  },
  {
    "objectID": "lab_02.html#실습의-목표",
    "href": "lab_02.html#실습의-목표",
    "title": "Lab02: R과 데이터사이언스",
    "section": "",
    "text": "R의 패키지에 대해 이해할 수 있다.\n\n데이터사이언스의 과정을 개괄적으로 이해할 수 있다.\n\n데이터 시각화하기\n데이터 변형하기\n데이터 정리하기\n데이터 불러오기\n\n\n파이프 연산자의 사용법에 대해 이해할 수 있다.",
    "crumbs": [
      "R 실습",
      "Lab02: R과 데이터사이언스"
    ]
  },
  {
    "objectID": "lab_02.html#패키지",
    "href": "lab_02.html#패키지",
    "title": "Lab02: R과 데이터사이언스",
    "section": "\n1 패키지",
    "text": "1 패키지\n패키지를 사용하기 우선 패키지가 사용자의 디바이스에 물리적으로 인스톨되어 있어야 하고, R 세션에서 패키지를 불러와야 한다. 패키지를 인스톨하는 방법은 두 가지 이다. 스크립트 내에서 패키지를 반복해서 인스톨하는 것은 합리적이지 않기 때문에 전자의 관행을 추천한다.\n\nOutput 창의 Packages 탭 선택: Install 아이콘 클릭하고 패키지 이름 입력\n스크립트 내에서 인스톨하기: install.packages(\"패키지명\")\n\n쌍따옴표 속에 패키지 이름을 타이핑해야 한다. 한번 인스톨이 되면 업데이트하지 않는 한 새롭게 패키지를 인스톨할 필요가 없다. 인스톨된 패키지를 사용하려면 스크립트 내에서 다음과 같이 타이핑하고 실행한다.\n\nlibrary(패키지명)\n\n괄호 속에 패키지명을 기입해야 한다.\n\n\n\n\n\n\nImportant\n\n\n\ninstall.packages()함수에서는 반드시 패키지명을 쌍따옴표로 싸야하지만, library()함수에서는 그렇지 않다. 불러온 패키지는 R 세션이 유지되는 동안 내내 사용할 수 있지만, R 세션을 끝내고 다시 시작하면 다시 library()함수를 이용해 다시 불러와야 한다. 그래서 R 스크립트 파일의 시작 부분에는 패키지를 불러오는 코드를 위치시키고, 다시 스크립트 파일을 열 때마다 그 부분을 재실행하는 것이 좋은 습관이다.\n\n\ntidyverse 패키지를 사용하는 것의 장점은 이 패키지만 불러오면 구성 패키지까지 한꺼번에 사용할 수 있게 된다는 점이다. 스크립트 내에서 다음과 같은 코드를 실행한다.\n\nlibrary(tidyverse)",
    "crumbs": [
      "R 실습",
      "Lab02: R과 데이터사이언스"
    ]
  },
  {
    "objectID": "lab_02.html#시각화하기",
    "href": "lab_02.html#시각화하기",
    "title": "Lab02: R과 데이터사이언스",
    "section": "\n2 시각화하기",
    "text": "2 시각화하기\n\n2.1 데이터 살펴보기\n이 실습을 위해 남극 파머군도(Palmer Archipelago)에 서식하는 펭귄 성체의 신체 계측 데이터를 사용한다. 이 데이터는 palmerpenguins라는 패키지에 포함되어 있으므로 해당 패키지를 불러온다.\n\nlibrary(palmerpenguins)\n\n이제 이 패키지에 포함되어 있는 penguins라는 이름의 데이터를 불러온다.\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n데이터를 자세히 살펴보면 몇 가지를 알 수 있다.\n\n티블(tibble)이라는 형식의 데이터 프레임이다. 티블은 tidyverse의 공식 데이터 프레임 포맷이다.\n관측개체는 344개, 변수는 8개이다.\nspecies, island, sex 변수의 유형은 팩트형(fctr)이고, bill_length_mm, bill_depth_mm은 실수형(dbl)이고, 나머지는 정수형(int)이다.\n\n변수가 많아지면 전체 데이터를 조망하기 어렵기 때문에, 최초의 tidyverse 함수인 glimpse()를 사용하여 데이터의 행과 열을 바꾸어 보자.\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\n\n\n\n데이터 내 속성들에 대한 정보가 궁금할 때\n\n\n\n\n\npenguins 데이터 내 속성들에 대한 설명을 보고싶다면 help(penguins) 또는 ?penguins를 입력한 뒤 실행한다. \n\n\n\n\n2.2 그래프 만들기\n이 penguins 데이터와 ggplot2() 패키지를 이용하여 “펭귄의 날개 길이와 몸무게의 관계”를 표현하는 그래프를 작성해 보자. ggplot2()의 더 많은 사용법에 대해서는 이후의 실습에서 매우 자세히 다룰 것이기 때문에 오늘은 간단한 제작 과정만을 따라가 보면서 데이터 시각화에 흥미를 가질 수 있도록 해보자.\n\n2.2.1 플롯 객체의 지정\nggplot()이라는 함수를 통해 플롯 제작을 개시하는 단계이며, 어떤 데이터를 사용할지를 지정한다.\n\nggplot(data = penguins) # 플롯 제작에 penguins 데이터를 사용\n\n\n\n\n\n\n\n\n2.2.2 플롯의 심미성 지정\n데이터가 어떤 시각적 속성으로 표현될 것인가를 지정한다. 여기서는 간단히 어떤 변수들이 x-축과 y-축에 나타나는지만 지정한다. mapping = aes() 아규먼트가 핵심이다.\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g) # x축에 날개 길이, y축에 몸무게를 표시\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n코드의 가독성을 위한 Tip\n\n\n\nR에서 코드를 작성하다 보면 한 덩어리의 코드가 매우 길어지는 일이 빈번하게 발생한다. 코드를 정리하지 않고 계속 작성할 경우 작성자 본인이 봐도 무엇을 한 것인지 모르는 일이 발생하기 때문에 줄바꿈을 통해 코드를 간결하게 정리하는 것이 좋다. 특히 R이 익숙하지 않은 초보자의 경우 각 줄마다 본인이 무엇을 했는지 # 각주를 통해 설명을 달아 놓으면 R 문법에 익숙해지는데 도움이 된다.\n\n\n\n2.2.3 플롯의 기하 속성 지정\n데이터가 어떤 기하학적 속성으로 표현될 것인가를 지정한다. geom 아규먼트가 핵심인데, geom_point()는 데이터를 포인트라고 하는 기하학적 속성으로 표현한다는 것을 지정한 것으로 결국 산포도(scatterplot)을 산출하게 된다.\n\nggplot(\n  data = penguins, # 플롯 제작에 penguins 데이터를 사용\n  mapping = aes(x = flipper_length_mm, y = body_mass_g) # x축에 날개 길이, y축에 몸무게를 표시\n) +\n  geom_point() # 데이터를 산포도로 표현\n\n\n\n\n\n\n\n\n2.2.4 심미성의 첨가\n이러한 관련성이 펭귄의 종족에 따라 다르게 나타나는지를 탐색하기 위해 color 라는 심미성을 species라는 변수에 적용한다.\n\nggplot(\n  data = penguins, # 플롯 제작에 penguins 데이터를 사용\n  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species) # x축에 날개 길이, y축에 몸무게를 표시, 종별로 색상을 지정\n) +\n  geom_point() # 데이터를 산포도로 표현\n\n\n\n\n\n\n\n\n2.2.5 기하 레이어의 첨가\n두 변수의 관련성을 보여주는 선형 기하를 첨가한다. 여기서는 geom_smooth()를 이용하여 OLS 회귀선을 첨가한다.\n\nggplot(\n  data = penguins, # 플롯 제작에 penguins 데이터를 사용\n  mapping = aes(x = flipper_length_mm, y = body_mass_g) # x축에 날개 길이, y축에 몸무게를 표시\n) +\n  geom_point(mapping = aes(color = species)) + # 데이터를 산포도로 표현, 종별로 색상을 지정\n  geom_smooth(method = \"lm\") # OLS 회귀선을 추가\n\n\n\n\n\n\n\n\n\n\n\n\n\nOLS 회귀선이란?\n\n\n\n\n\nOLS(Ordinary Least Square, 최소제곱법) 회귀선이란 관측값과 회귀선의 차이인 잔차의 제곱을 최소화하는 직선을 의미한다. 데이터들의 추세선 정도로 이해하면 된다. 선 주변의 음영은 신뢰 구간을 나타내는데, 이를 제거하고 싶으면 se = FALSE를 추가하면 된다.\n\n\n\n\n2.2.6 라벨링 등 마무리 작업\n\nggplot(\n  data = penguins, # 플롯 제작에 penguins 데이터를 사용\n  mapping = aes(x = flipper_length_mm, y = body_mass_g) # x축에 날개 길이, y축에 몸무게를 표시\n) +\n  geom_point(mapping = aes(color = species)) + # 데이터를 산포도로 표현, 종별로 색상을 지정\n  geom_smooth(method = \"lm\") + # OLS 회귀선을 추가\n  labs(\n    title = \"Body mass and flipper length\", # 플롯의 제목을 지정\n    subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\", # 플롯의 부제목을 지정\n    x = \"Flipper length (mm)\", y = \"Body mass (g)\", # 축의 이름을 지정\n    color = \"Species\" # 범례의 제목을 설정\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n데이터 시각화에 대한 보다 자세한 내용은 5주차 실습에서 다룬다.",
    "crumbs": [
      "R 실습",
      "Lab02: R과 데이터사이언스"
    ]
  },
  {
    "objectID": "lab_02.html#변형하기",
    "href": "lab_02.html#변형하기",
    "title": "Lab02: R과 데이터사이언스",
    "section": "\n3 변형하기",
    "text": "3 변형하기\n변형하기와 관련된 함수들은 대부분 dplyr 패키지에 포함되어 있다.\n\n3.1 데이터 살펴보기\n이 실습을 위해 미국 교통통계국(U.S. Bureau of Transportation)이 제공하는 데이터를 사용하는데, 이것은 2013년 한 해 동안 미국 뉴욕시를 출발한 336,776대의 항공기에 대한 정보를 담고 있다. 이 데이터는 nycflights13 이라는 패키지에 포함되어 있으므로 해당 패키지를 불러온다. 그리고 나서 패키지에 포함되어 있는 flights라는 이름의 데이터를 불러온다.\n\nlibrary(nycflights13)\nglimpse(flights)\n\nRows: 336,776\nColumns: 19\n$ year           &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        &lt;chr&gt; \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        &lt;chr&gt; \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         &lt;chr&gt; \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           &lt;chr&gt; \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n\n\n\n\n\n\n\n\nTip\n\n\n\nflights 데이터 내 속성들에 대한 설명을 보고싶다면 help(flights) 또는 ?flights를 입력한 뒤 실행한다.\n\n\n\n3.2 주요 함수\n여기서는 가장 널리 사용되는 6개 함수에 대해서만 개략적으로 다룬다. 그 6개 함수는 select(), filter(), arrange(), mutate(), group_by(), summerize()이다.\n\n3.2.1 select() 함수\n열(변수) 중 일부를 솎아낸다. 즉, 변수의 개수를 줄인다.\n\nselect(flights, year, month, day) # 지정한 열(변수)만 추출\n\n# A tibble: 336,776 × 3\n    year month   day\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# ℹ 336,766 more rows\n\n\n\n3.2.2 filter() 함수\n특정 열(변수)에 의거해 조건을 만족하는 행을 솎아낸다. 즉 관측개체의 갯수를 줄인다.\n\nfilter(flights, month == 1 & day == 1) # 지정한 행(관측개체)만 추출\n\n# A tibble: 842 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 832 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n3.2.3 arrange() 함수\n특정 열(변수)에 의거해 행의 순서를 바꾼다. 내림차순으로 정렬하고 싶다면 desc(dep_time)을 넣으면 된다.\n\narrange(flights, dep_time) # dep_time 오름차순으로 행 정렬\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1    13        1           2249        72      108           2357\n 2  2013     1    31        1           2100       181      124           2225\n 3  2013    11    13        1           2359         2      442            440\n 4  2013    12    16        1           2359         2      447            437\n 5  2013    12    20        1           2359         2      430            440\n 6  2013    12    26        1           2359         2      437            440\n 7  2013    12    30        1           2359         2      441            437\n 8  2013     2    11        1           2100       181      111           2225\n 9  2013     2    24        1           2245        76      121           2354\n10  2013     3     8        1           2355         6      431            440\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n3.2.4 mutate() 함수\n기존의 열(변수)을 변형하여 새로운 열(변수)을 생성한다. 아래에 gain , speed  변수가 새로 생긴 것을 확인할 수 있다.\n\nmutate(flights,\n    gain = dep_delay - arr_delay, # gain이라는 새로운 열(변수) 생성\n    speed = distance / air_time * 60 # speed라는 새로운 열(변수) 생성\n  )\n\n# A tibble: 336,776 × 21\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 13 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;, gain &lt;dbl&gt;, speed &lt;dbl&gt;\n\n\n\n3.2.5 group_by() 함수\n열(변수)(범주형 변수, categorical variables)에 의거해 전체 행을 그룹으로 분할한다. Groups: month[12]를 통해 월별로 행이 분할되었음을 알 수 있다.\n\ngroup_by(flights, month) # 전체 행을 월별로 분할\n\n# A tibble: 336,776 × 19\n# Groups:   month [12]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n3.2.6 summerize() 함수\n열(변수)의 통계량을 산출하여 새로운 열(변수)에 저장한다.\n\nsummarize(flights, delay = mean(dep_delay, na.rm = TRUE)) # dep_delay의 평균을 delay라는 변수에 저장\n\n# A tibble: 1 × 1\n  delay\n  &lt;dbl&gt;\n1  12.6\n\n\n\n\n\n\n\n\n결측값\n\n\n\n\n\nR에서 데이터 셋에 결측값이 포함되어 있을 경우 통계량을 계산하면 NA라는 결과를 얻게 된다. 따라서 데이터셋에 결측값이 있는지 확인한 뒤 이를 분석에서 제외하거나 다른 값으로 대체해야 한다. 여기에서는 결측값을 분석에서 제외하는 방법만 다룬다.\n\n# 결측값을 포함하여 통계량을 계산했을 때\nsummarize(flights, delay = mean(dep_delay))\n\n# A tibble: 1 × 1\n  delay\n  &lt;dbl&gt;\n1    NA\n\n\n\n# dep_delay변수에 결측값이 몇개 있는지 확인: is.na\nsum(is.na(flights$dep_delay))\n\n[1] 8255\n\n\n\n# 통계량 계산에서 결측값을 제외: na.rm = TRUE\nsummarize(flights, delay = mean(dep_delay, na.rm = TRUE))\n\n# A tibble: 1 × 1\n  delay\n  &lt;dbl&gt;\n1  12.6\n\n\n\n\n\n위의 group_by() 함수와 결합하면, 그룹별로 열(변수)의 통계량을 산출하여 새로운 열(변수)에 저장할 수 있다.\n\nby_day &lt;- group_by(flights, year, month, day) # 전체 행을 연, 월, 일로 분할하여 새로운 변수에 할당\nsummarize(by_day, delay = mean(dep_delay, na.rm = TRUE)) # 일별 delay 계산\n\n# A tibble: 365 × 4\n# Groups:   year, month [12]\n    year month   day delay\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;\n 1  2013     1     1 11.5 \n 2  2013     1     2 13.9 \n 3  2013     1     3 11.0 \n 4  2013     1     4  8.95\n 5  2013     1     5  5.73\n 6  2013     1     6  7.15\n 7  2013     1     7  5.42\n 8  2013     1     8  2.55\n 9  2013     1     9  2.28\n10  2013     1    10  2.84\n# ℹ 355 more rows\n\n\n\n\n\n\n\n\nNote\n\n\n\n데이터 변형하기에 대한 보다 자세한 내용은 4주차 실습에서 다룬다.",
    "crumbs": [
      "R 실습",
      "Lab02: R과 데이터사이언스"
    ]
  },
  {
    "objectID": "lab_02.html#정리하기",
    "href": "lab_02.html#정리하기",
    "title": "Lab02: R과 데이터사이언스",
    "section": "\n4 정리하기",
    "text": "4 정리하기\n정리하기와 관련된 함수들은 대부분 tidyr 패키지에 포함되어 있다. 많은 함수가 있지만 가장 중요한 두 개의 함수에만 집중한다.\n\n4.1 데이터 살펴보기\n이 실습에서는 tidyverse에 포함되어 있는 매우 단순한 데이터를 사용한다.\n\ntable4a\n\n# A tibble: 3 × 3\n  country     `1999` `2000`\n  &lt;chr&gt;        &lt;dbl&gt;  &lt;dbl&gt;\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n\n\n\ntable2\n\n# A tibble: 12 × 4\n   country      year type            count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n\n\n\n4.2 주요 함수\n\n4.2.1 pivot_longer() 함수\ntable4a에서 1999과 2000은 변수명일 수 없다. year라는 변수의 속성이어야 한다.\n\npivot_longer(\n  table4a, \n  cols = c(`1999`, `2000`), # 바꾸고싶은 변수 지정 \n  names_to = \"year\", # 원래 데이터의 변수명들이 들어갈 새로운 변수명 지정\n  values_to = \"cases\" # 원래 데이터의 값들이 들어갈 새로운 변수명 지정\n)\n\n# A tibble: 6 × 3\n  country     year   cases\n  &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt;\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766\n\n\n\n4.2.2 pivot_wider() 함수\ntable2에서 type 변수는 두 개의 변수명을 포함하고 있다. 즉, cases와 population은 속성값이라기 보다는 변수명이다.\n\npivot_wider(\n  table2, \n  names_from = \"type\", # 원래 데이터의 type 값들을 변수로 변환\n  values_from = \"count\" # 원래 데이터의 count 값들을 변수의 값으로 변환\n)\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n\n\n\n\n\n\n\n\nNote\n\n\n\n데이터 정리하기에 대한 보다 자세한 내용은 3주차 실습에서 다룬다.",
    "crumbs": [
      "R 실습",
      "Lab02: R과 데이터사이언스"
    ]
  },
  {
    "objectID": "lab_02.html#불러오기",
    "href": "lab_02.html#불러오기",
    "title": "Lab02: R과 데이터사이언스",
    "section": "\n5 불러오기",
    "text": "5 불러오기\n불러오기와 관련된 함수들은 대부분 readr 패키지에 포함되어 있다. 여러 유형의 파일을 불러오기 위해 여러 함수가 존재하지만, 콤마분리값(comma-separated values, CSV) 형식의 데이터를 불러오는 함수(read_csv())만 실습한다.\n\nstudents &lt;- read_csv(\"https://pos.it/r4ds-students-csv\") # URL에서 가져온 CSV 파일을 students에 할당\nglimpse(students)\n\nRows: 6\nColumns: 5\n$ `Student ID`   &lt;dbl&gt; 1, 2, 3, 4, 5, 6\n$ `Full Name`    &lt;chr&gt; \"Sunil Huffmann\", \"Barclay Lynn\", \"Jayendra Lyne\", \"Leo…\n$ favourite.food &lt;chr&gt; \"Strawberry yoghurt\", \"French fries\", \"N/A\", \"Anchovies…\n$ mealPlan       &lt;chr&gt; \"Lunch only\", \"Lunch only\", \"Breakfast and lunch\", \"Lun…\n$ AGE            &lt;chr&gt; \"4\", \"5\", \"7\", NA, \"five\", \"6\"\n\n\n\n\n\n\n\n\nNote\n\n\n\n데이터 불러오기에 대한 보다 자세한 내용은 3주차 실습에서 다룬다.",
    "crumbs": [
      "R 실습",
      "Lab02: R과 데이터사이언스"
    ]
  },
  {
    "objectID": "lab_02.html#파이프-연산자pipe-operator",
    "href": "lab_02.html#파이프-연산자pipe-operator",
    "title": "Lab02: R과 데이터사이언스",
    "section": "\n6 파이프 연산자(pipe operator)",
    "text": "6 파이프 연산자(pipe operator)\n우리는 이전 실습에서 할당 연산자(&lt;-)에 대해 배웠다. 오늘 살펴본 다양한 변형의 결과를 다른 데이터 프레임에 담고 싶으면 다음과 같이 할당 연산자를 사용할 수 있다.\n\nflights_day1 &lt;- filter(flights, month == 1 & day == 1)\nglimpse(flights_day1)\n\nRows: 842\nColumns: 19\n$ year           &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        &lt;chr&gt; \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        &lt;chr&gt; \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         &lt;chr&gt; \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           &lt;chr&gt; \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n\n\n\n6.1 파이프 연산자\n\n현재 RStudio의 디폴트는 %&gt;%로 설정되어 있다. 이것을 Tools &gt; Global Options &gt; Code에 가서 ’Use native pipe operator, |&gt; (requires R 4.1+)’를 선택해 주어야 한다. 아래의 Figure 1 를 참고하라.\n\n\n\n\n\n\nFigure 1: 파이프 연산자(https://r4ds.hadley.nz/data-transform)\n\n\n\n단축키는 Crtl + Shift + M(Mac은 Commnad + Shift + M)이다. 다른 건 몰라도 이 단축키만은 반드시 기억해야 한다.\n\nIAH 공항으로 가기 위한 가장 빠른 항공편을 찾기 위한 다음의 코드들을 비교해 보자. 먼저 파이프 연산자를 사용하지 않은 경우이다.\n\n# 중간에 여러 변수를 거쳐야 한다.\nflights1 &lt;- filter(flights, dest == \"IAH\")\nflights2 &lt;- mutate(flights1, speed = distance / air_time * 60)\nflights3 &lt;- select(flights2, year:day, dep_time, carrier, flight, speed)\narrange(flights3, desc(speed))\n\n# A tibble: 7,198 × 7\n    year month   day dep_time carrier flight speed\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt; &lt;chr&gt;    &lt;int&gt; &lt;dbl&gt;\n 1  2013     7     9      707 UA         226  522.\n 2  2013     8    27     1850 UA        1128  521.\n 3  2013     8    28      902 UA        1711  519.\n 4  2013     8    28     2122 UA        1022  519.\n 5  2013     6    11     1628 UA        1178  515.\n 6  2013     8    27     1017 UA         333  515.\n 7  2013     8    27     1205 UA        1421  515.\n 8  2013     8    27     1758 UA         302  515.\n 9  2013     9    27      521 UA         252  515.\n10  2013     8    28      625 UA         559  515.\n# ℹ 7,188 more rows\n\n\n\n# 또는 함수 안에 함수를 집어넣는 과정을 반복해야 한다.\narrange(\n  select(\n    mutate(\n      filter(\n        flights, \n        dest == \"IAH\"\n      ),\n      speed = distance / air_time * 60\n    ),\n    year:day, dep_time, carrier, flight, speed\n  ),\n  desc(speed)\n)\n\n# A tibble: 7,198 × 7\n    year month   day dep_time carrier flight speed\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt; &lt;chr&gt;    &lt;int&gt; &lt;dbl&gt;\n 1  2013     7     9      707 UA         226  522.\n 2  2013     8    27     1850 UA        1128  521.\n 3  2013     8    28      902 UA        1711  519.\n 4  2013     8    28     2122 UA        1022  519.\n 5  2013     6    11     1628 UA        1178  515.\n 6  2013     8    27     1017 UA         333  515.\n 7  2013     8    27     1205 UA        1421  515.\n 8  2013     8    27     1758 UA         302  515.\n 9  2013     9    27      521 UA         252  515.\n10  2013     8    28      625 UA         559  515.\n# ℹ 7,188 more rows\n\n\n다음은 파이프 연산자를 사용한 경우이다. 동일한 결과를 가져다 주지만 훨신 더 간결하고 직관적이고 이해하기 쉽다. 파이프 연산자의 사용 원리는 이후 실습에서 자세히 배운다.\n\nflights |&gt; \n  filter(dest == \"IAH\") |&gt;\n  mutate(speed = distance / air_time * 60) |&gt; \n  select(year:day, dep_time, carrier, flight, speed) |&gt; \n  arrange(desc(speed))\n\n# A tibble: 7,198 × 7\n    year month   day dep_time carrier flight speed\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt; &lt;chr&gt;    &lt;int&gt; &lt;dbl&gt;\n 1  2013     7     9      707 UA         226  522.\n 2  2013     8    27     1850 UA        1128  521.\n 3  2013     8    28      902 UA        1711  519.\n 4  2013     8    28     2122 UA        1022  519.\n 5  2013     6    11     1628 UA        1178  515.\n 6  2013     8    27     1017 UA         333  515.\n 7  2013     8    27     1205 UA        1421  515.\n 8  2013     8    27     1758 UA         302  515.\n 9  2013     9    27      521 UA         252  515.\n10  2013     8    28      625 UA         559  515.\n# ℹ 7,188 more rows",
    "crumbs": [
      "R 실습",
      "Lab02: R과 데이터사이언스"
    ]
  },
  {
    "objectID": "lab_04.html",
    "href": "lab_04.html",
    "title": "Lab04: 데이터 변형하기",
    "section": "",
    "text": "아래의 함수들을 활용하여 데이터를 적절하게 변형할 수 있다.\n\n\n행 함수\n열 함수\n그룹 함수",
    "crumbs": [
      "R 실습",
      "Lab04: 데이터 변형하기"
    ]
  },
  {
    "objectID": "lab_04.html#실습의-목표",
    "href": "lab_04.html#실습의-목표",
    "title": "Lab04: 데이터 변형하기",
    "section": "",
    "text": "아래의 함수들을 활용하여 데이터를 적절하게 변형할 수 있다.\n\n\n행 함수\n열 함수\n그룹 함수",
    "crumbs": [
      "R 실습",
      "Lab04: 데이터 변형하기"
    ]
  },
  {
    "objectID": "lab_04.html#실습-준비",
    "href": "lab_04.html#실습-준비",
    "title": "Lab04: 데이터 변형하기",
    "section": "\n1 실습 준비",
    "text": "1 실습 준비\n\nlibrary(tidyverse)\n\n사용할 데이터는 World Bank가 gapmider.org를 통해 무료로 배포하는 것으로 gapmider 패키지에 포함되어 있다. gapmider 패키지를 인스톨하고 불러온다. 데이터가 어떻게 구성되어 있는지 살펴본다.\n\nlibrary(gapminder)\nView(gapminder)",
    "crumbs": [
      "R 실습",
      "Lab04: 데이터 변형하기"
    ]
  },
  {
    "objectID": "lab_04.html#행-함수",
    "href": "lab_04.html#행-함수",
    "title": "Lab04: 데이터 변형하기",
    "section": "\n2 행 함수",
    "text": "2 행 함수\n\n2.1 filter() 함수\n특정 열(변수)과 관련된 조건을 만족하는 행을 선정한다. 행의 길이가 준다.\n\n# continent의 값이 Europe인 행만 선택\ngapminder |&gt; \n  filter(continent == \"Europe\") \n\n# A tibble: 360 × 6\n   country continent  year lifeExp     pop gdpPercap\n   &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt;     &lt;dbl&gt;\n 1 Albania Europe     1952    55.2 1282697     1601.\n 2 Albania Europe     1957    59.3 1476505     1942.\n 3 Albania Europe     1962    64.8 1728137     2313.\n 4 Albania Europe     1967    66.2 1984060     2760.\n 5 Albania Europe     1972    67.7 2263554     3313.\n 6 Albania Europe     1977    68.9 2509048     3533.\n 7 Albania Europe     1982    70.4 2780097     3631.\n 8 Albania Europe     1987    72   3075321     3739.\n 9 Albania Europe     1992    71.6 3326498     2497.\n10 Albania Europe     1997    73.0 3428038     3193.\n# ℹ 350 more rows\n\n\n\n # pop이 5천만, gdpPercap이 3만을 초과하는 행만 선택\ngapminder |&gt; \n  filter(pop &gt; 50000000 & gdpPercap &gt; 30000)\n\n# A tibble: 9 × 6\n  country        continent  year lifeExp       pop gdpPercap\n  &lt;fct&gt;          &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n1 France         Europe     2007    80.7  61083916    30470.\n2 Germany        Europe     2002    78.7  82350671    30036.\n3 Germany        Europe     2007    79.4  82400996    32170.\n4 Japan          Asia       2007    82.6 127467972    31656.\n5 United Kingdom Europe     2007    79.4  60776238    33203.\n6 United States  Americas   1992    76.1 256894189    32004.\n7 United States  Americas   1997    76.8 272911760    35767.\n8 United States  Americas   2002    77.3 287675526    39097.\n9 United States  Americas   2007    78.2 301139947    42952.\n\n\n\n# year이 2007이고, lifeExp가 82를 초과하거나 gdpPercap이 4만을 초과하는 행만 선택\ngapminder |&gt; \n  filter(year == 2007 & (lifeExp &gt; 82 | gdpPercap &gt; 40000))\n\n# A tibble: 7 × 6\n  country          continent  year lifeExp       pop gdpPercap\n  &lt;fct&gt;            &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n1 Hong Kong, China Asia       2007    82.2   6980412    39725.\n2 Ireland          Europe     2007    78.9   4109086    40676.\n3 Japan            Asia       2007    82.6 127467972    31656.\n4 Kuwait           Asia       2007    77.6   2505559    47307.\n5 Norway           Europe     2007    80.2   4627926    49357.\n6 Singapore        Asia       2007    80.0   4553009    47143.\n7 United States    Americas   2007    78.2 301139947    42952.\n\n\n\n2.2 slice() 함수\nfilter() 함수와 마찬가지로 행의 숫자를 줄인다. slice() 함수는 slice_head(), slice_tail(), slice_max(), slice_min()과 같은 패밀리 함수가 더 널리 사용된다. 그런데 이 함수들은 작동 방식에 따라 두 가지로 구분된다.\n\n특정 열(변수)과 관계 없이, 행의 위치에 의거해 행을 선정: slice(), slice_head(), slice_tail()\n특정 열(변수)에 따른, 행의 위치에 의거해 행을 선정: slice_max(), slice_min()\n\n몇 번째에서 몇 번째 사이의 행만을 골라낸다.\n\n# 1~5행만을 선택\ngapminder |&gt; \n  slice(1:5)\n\n# A tibble: 5 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n\n\n가장 앞에 위치한 몇 개(n)의 행만을 골라낸다. 실질적으로 위와 동일하다.\n\n# 가장 앞의 5개 행을 선택\ngapminder |&gt; \n  slice_head(n = 5)\n\n# A tibble: 5 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n\n\n\n\n\n\n\n\nTip\n\n\n\nBase R 함수인 head()또한 같은 역할을 할 수 있다.\n\ngapminder |&gt; \n  head(5)\n\n# A tibble: 5 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n\n\n\n\n가장 뒤에 위치한 몇 개(n)의 행만을 골라낸다.\n\n# 가장 뒤의 5개 행을 선택\ngapminder |&gt; \n  slice_tail(n = 5)\n\n# A tibble: 5 × 6\n  country  continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;    &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Zimbabwe Africa     1987    62.4  9216418      706.\n2 Zimbabwe Africa     1992    60.4 10704340      693.\n3 Zimbabwe Africa     1997    46.8 11404948      792.\n4 Zimbabwe Africa     2002    40.0 11926563      672.\n5 Zimbabwe Africa     2007    43.5 12311143      470.\n\n\n\n\n\n\n\n\nTip\n\n\n\nBase R 함수인 tail()또한 같은 역할을 할 수 있다.\n\ngapminder |&gt; \n  tail(5)\n\n# A tibble: 5 × 6\n  country  continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;    &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Zimbabwe Africa     1987    62.4  9216418      706.\n2 Zimbabwe Africa     1992    60.4 10704340      693.\n3 Zimbabwe Africa     1997    46.8 11404948      792.\n4 Zimbabwe Africa     2002    40.0 11926563      672.\n5 Zimbabwe Africa     2007    43.5 12311143      470.\n\n\n\n\n특정 열(변수)에 따라 값이 가장 큰 몇 개(n)의 행만을 골라낸다.\n\n# 2007년에 gdpPercap이 가장 큰 5개국 찾기\ngapminder |&gt; \n  filter(year == 2007) |&gt; # year이 2007인 행만 선택\n  slice_max(gdpPercap, n = 5) # gdpPercap이 가장 큰 5개 행 선택\n\n# A tibble: 5 × 6\n  country       continent  year lifeExp       pop gdpPercap\n  &lt;fct&gt;         &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n1 Norway        Europe     2007    80.2   4627926    49357.\n2 Kuwait        Asia       2007    77.6   2505559    47307.\n3 Singapore     Asia       2007    80.0   4553009    47143.\n4 United States Americas   2007    78.2 301139947    42952.\n5 Ireland       Europe     2007    78.9   4109086    40676.\n\n\n특정 열(변수)에 따라 값이 가장 작은 것들 중 주어진 비중(prop)에 해당하는 행만을 골라낸다.\n\n# 2007년 아시아에서 lifeExp가 하위 10%인 국가 찾기\ngapminder |&gt; \n  filter(year == 2007 & continent == \"Asia\") |&gt; # year이 2007이고 continent가 Asia인 행만 선택\n  slice_min(lifeExp, prop = 0.1) # lifeExp가 작은 순으로 10% 행만 선택\n\n# A tibble: 3 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       2007    43.8 31889923      975.\n2 Iraq        Asia       2007    59.5 27499638     4471.\n3 Cambodia    Asia       2007    59.7 14131858     1714.\n\n\n\n2.3 arrange() 함수\n특정 열(변수)과 관련된 조건에 의거해 행의 순서를 바꾼다. 행의 길이에는 변화가 없다.\n\n# lifeExp 오름차순으로 행 정렬\ngapminder |&gt; \n  arrange(lifeExp)\n\n# A tibble: 1,704 × 6\n   country      continent  year lifeExp     pop gdpPercap\n   &lt;fct&gt;        &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt;     &lt;dbl&gt;\n 1 Rwanda       Africa     1992    23.6 7290203      737.\n 2 Afghanistan  Asia       1952    28.8 8425333      779.\n 3 Gambia       Africa     1952    30    284320      485.\n 4 Angola       Africa     1952    30.0 4232095     3521.\n 5 Sierra Leone Africa     1952    30.3 2143249      880.\n 6 Afghanistan  Asia       1957    30.3 9240934      821.\n 7 Cambodia     Asia       1977    31.2 6978607      525.\n 8 Mozambique   Africa     1952    31.3 6446316      469.\n 9 Sierra Leone Africa     1957    31.6 2295678     1004.\n10 Burkina Faso Africa     1952    32.0 4469979      543.\n# ℹ 1,694 more rows\n\n\ndesc() 도우미 함수(helper function)는 내림차순으로 행을 배열한다.\n\n# year 오름차순으로 행 정렬 후 같은 year 안에서 lifeExp 내림차순으로 행 정렬\ngapminder |&gt; \n  arrange(year, desc(lifeExp))\n\n# A tibble: 1,704 × 6\n   country        continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;          &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Norway         Europe     1952    72.7  3327728    10095.\n 2 Iceland        Europe     1952    72.5   147962     7268.\n 3 Netherlands    Europe     1952    72.1 10381988     8942.\n 4 Sweden         Europe     1952    71.9  7124673     8528.\n 5 Denmark        Europe     1952    70.8  4334000     9692.\n 6 Switzerland    Europe     1952    69.6  4815000    14734.\n 7 New Zealand    Oceania    1952    69.4  1994794    10557.\n 8 United Kingdom Europe     1952    69.2 50430000     9980.\n 9 Australia      Oceania    1952    69.1  8691212    10040.\n10 Canada         Americas   1952    68.8 14785584    11367.\n# ℹ 1,694 more rows\n\n\n\n2.4 distinct() 함수\n특정 열(변수)에 의거해 중복이 없이 고유한 행만을 골라낸다. 행의 길이가 준다.\n\n# country 변수 안에 어떤 값들이 포함되어 있는지 확인\ngapminder |&gt; \n  distinct(country)\n\n# A tibble: 142 × 1\n   country    \n   &lt;fct&gt;      \n 1 Afghanistan\n 2 Albania    \n 3 Algeria    \n 4 Angola     \n 5 Argentina  \n 6 Australia  \n 7 Austria    \n 8 Bahrain    \n 9 Bangladesh \n10 Belgium    \n# ℹ 132 more rows\n\n\n.keep_all 아규먼트를 이용하면 나머지 열도 함께 나타낼 수 있다. 같은 값을 가진 행이 다수 존재한다면 가장 앞선 행을 보여준다.\n\n# continent 변수 안에 어떤 값들이 포함되어 있는지 나머지 열과 함께 확인\ngapminder |&gt; \n  distinct(continent, .keep_all = TRUE)\n\n# A tibble: 5 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Albania     Europe     1952    55.2  1282697     1601.\n3 Algeria     Africa     1952    43.1  9279525     2449.\n4 Argentina   Americas   1952    62.5 17876956     5911.\n5 Australia   Oceania    1952    69.1  8691212    10040.",
    "crumbs": [
      "R 실습",
      "Lab04: 데이터 변형하기"
    ]
  },
  {
    "objectID": "lab_04.html#열-함수",
    "href": "lab_04.html#열-함수",
    "title": "Lab04: 데이터 변형하기",
    "section": "\n3 열 함수",
    "text": "3 열 함수\n\n3.1 select() 함수\n열(변수)의 일부를 선택한다. 열의 길이가 준다.\n\n# year, country, gdpPercap 변수만 선택\ngapminder |&gt; \n  select(year, country, gdpPercap)\n\n# A tibble: 1,704 × 3\n    year country     gdpPercap\n   &lt;int&gt; &lt;fct&gt;           &lt;dbl&gt;\n 1  1952 Afghanistan      779.\n 2  1957 Afghanistan      821.\n 3  1962 Afghanistan      853.\n 4  1967 Afghanistan      836.\n 5  1972 Afghanistan      740.\n 6  1977 Afghanistan      786.\n 7  1982 Afghanistan      978.\n 8  1987 Afghanistan      852.\n 9  1992 Afghanistan      649.\n10  1997 Afghanistan      635.\n# ℹ 1,694 more rows\n\n\n열(변수)의 일부를 선택하지 않는다. 역시 열의 길이가 준다. 실질적으로 위와 동일하다.\n\n# lifeExp, continent, pop을 제외한 변수들만 선택\ngapminder |&gt; \n  select(-c(lifeExp, continent, pop))\n\n# A tibble: 1,704 × 3\n   country      year gdpPercap\n   &lt;fct&gt;       &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan  1952      779.\n 2 Afghanistan  1957      821.\n 3 Afghanistan  1962      853.\n 4 Afghanistan  1967      836.\n 5 Afghanistan  1972      740.\n 6 Afghanistan  1977      786.\n 7 Afghanistan  1982      978.\n 8 Afghanistan  1987      852.\n 9 Afghanistan  1992      649.\n10 Afghanistan  1997      635.\n# ℹ 1,694 more rows\n\n\nstarts_with(), ends_with(), contains()와 같은 도우미 함수를 잘 활용하면 효율적으로 필요한 변수만을 선정할 수 있다.\n\n# 이름이 \"c\"로 시작하는 변수들만 선택\ngapminder |&gt; \n  select(starts_with(\"c\"))\n\n# A tibble: 1,704 × 2\n   country     continent\n   &lt;fct&gt;       &lt;fct&gt;    \n 1 Afghanistan Asia     \n 2 Afghanistan Asia     \n 3 Afghanistan Asia     \n 4 Afghanistan Asia     \n 5 Afghanistan Asia     \n 6 Afghanistan Asia     \n 7 Afghanistan Asia     \n 8 Afghanistan Asia     \n 9 Afghanistan Asia     \n10 Afghanistan Asia     \n# ℹ 1,694 more rows\n\n\n\n3.2 mutate() 함수\n기존의 열(변수)에 기반하여 새로운 변수를 생성한다. 열의 길이가 는다.\n\n# 새롭게 정의한 gdp_billion 변수 추가\ngapminder |&gt; \n  mutate(\n    gdp_billion = gdpPercap * pop / 10^9\n  )\n\n# A tibble: 1,704 × 7\n   country     continent  year lifeExp      pop gdpPercap gdp_billion\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.        6.57\n 2 Afghanistan Asia       1957    30.3  9240934      821.        7.59\n 3 Afghanistan Asia       1962    32.0 10267083      853.        8.76\n 4 Afghanistan Asia       1967    34.0 11537966      836.        9.65\n 5 Afghanistan Asia       1972    36.1 13079460      740.        9.68\n 6 Afghanistan Asia       1977    38.4 14880372      786.       11.7 \n 7 Afghanistan Asia       1982    39.9 12881816      978.       12.6 \n 8 Afghanistan Asia       1987    40.8 13867957      852.       11.8 \n 9 Afghanistan Asia       1992    41.7 16317921      649.       10.6 \n10 Afghanistan Asia       1997    41.8 22227415      635.       14.1 \n# ℹ 1,694 more rows\n\n\n여러개의 변수를 동시에 생성할 수 있다. row_number() 도우미 함수는 값에 순위를 부여하는 것이고, .keep = \"used\"는 결과에 변수 생성에 동원된 변수만을 포함시키게 해 준다.\n\ngapminder |&gt; \n  filter(year == 2007) |&gt; # year이 2007인 행만 선택 \n  mutate(\n    gdpPercap_rank = row_number(gdpPercap), # gdpPercap에 순위 부여\n    lifeExp_highlow = lifeExp &gt; 30, # lifeExp가 30을 넘으면 TRUE, 아니면 FALSE\n    .keep = \"used\" # 새로운 변수 생성에 사용한 변수들만 표시\n  )\n\n# A tibble: 142 × 4\n   lifeExp gdpPercap gdpPercap_rank lifeExp_highlow\n     &lt;dbl&gt;     &lt;dbl&gt;          &lt;int&gt; &lt;lgl&gt;          \n 1    43.8      975.             19 TRUE           \n 2    76.4     5937.             70 TRUE           \n 3    72.3     6223.             72 TRUE           \n 4    42.7     4797.             64 TRUE           \n 5    75.3    12779.            101 TRUE           \n 6    81.2    34435.            130 TRUE           \n 7    79.8    36126.            132 TRUE           \n 8    75.6    29796.            122 TRUE           \n 9    64.1     1391.             30 TRUE           \n10    79.4    33693.            128 TRUE           \n# ℹ 132 more rows\n\n\n\n3.3 rename() 함수\n변수의 이름을 바꾼다. 열의 길이에는 변화가 없다.\n\n# 변수의 이름 변경\ngapminder |&gt; \n  rename(\n    gdp_percap = gdpPercap,\n    left_exp = lifeExp\n  )\n\n# A tibble: 1,704 × 6\n   country     continent  year left_exp      pop gdp_percap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;    &lt;dbl&gt;    &lt;int&gt;      &lt;dbl&gt;\n 1 Afghanistan Asia       1952     28.8  8425333       779.\n 2 Afghanistan Asia       1957     30.3  9240934       821.\n 3 Afghanistan Asia       1962     32.0 10267083       853.\n 4 Afghanistan Asia       1967     34.0 11537966       836.\n 5 Afghanistan Asia       1972     36.1 13079460       740.\n 6 Afghanistan Asia       1977     38.4 14880372       786.\n 7 Afghanistan Asia       1982     39.9 12881816       978.\n 8 Afghanistan Asia       1987     40.8 13867957       852.\n 9 Afghanistan Asia       1992     41.7 16317921       649.\n10 Afghanistan Asia       1997     41.8 22227415       635.\n# ℹ 1,694 more rows\n\n\n패밀리 함수인 rename_with()를 이용하면 다른 것도 가능하다.\n\n# \"l\"로 시작하는 변수를 전부 소문자로 변경\ngapminder |&gt; \n  rename_with(\n    tolower, starts_with(\"l\")\n  )\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeexp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\n\n3.4 relocate() 함수\n변수의 위치를 바꾼다. 열의 길이에는 변화가 없다.\n\n# year 변수의 위치를 continent 앞으로 이동\ngapminder |&gt; \n  relocate(year, continent)\n\n# A tibble: 1,704 × 6\n    year continent country     lifeExp      pop gdpPercap\n   &lt;int&gt; &lt;fct&gt;     &lt;fct&gt;         &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1  1952 Asia      Afghanistan    28.8  8425333      779.\n 2  1957 Asia      Afghanistan    30.3  9240934      821.\n 3  1962 Asia      Afghanistan    32.0 10267083      853.\n 4  1967 Asia      Afghanistan    34.0 11537966      836.\n 5  1972 Asia      Afghanistan    36.1 13079460      740.\n 6  1977 Asia      Afghanistan    38.4 14880372      786.\n 7  1982 Asia      Afghanistan    39.9 12881816      978.\n 8  1987 Asia      Afghanistan    40.8 13867957      852.\n 9  1992 Asia      Afghanistan    41.7 16317921      649.\n10  1997 Asia      Afghanistan    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\n.before나 .after 아규먼트를 사용하여 해당 변수를 어떤 변수의 앞이나 뒤로 보낼 수 있다.\n\n# pop 변수의 위치를 lifeExp 앞으로 이동\ngapminder |&gt; \n  relocate(pop, .before = lifeExp )\n\n# A tibble: 1,704 × 6\n   country     continent  year      pop lifeExp gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;    &lt;int&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952  8425333    28.8      779.\n 2 Afghanistan Asia       1957  9240934    30.3      821.\n 3 Afghanistan Asia       1962 10267083    32.0      853.\n 4 Afghanistan Asia       1967 11537966    34.0      836.\n 5 Afghanistan Asia       1972 13079460    36.1      740.\n 6 Afghanistan Asia       1977 14880372    38.4      786.\n 7 Afghanistan Asia       1982 12881816    39.9      978.\n 8 Afghanistan Asia       1987 13867957    40.8      852.\n 9 Afghanistan Asia       1992 16317921    41.7      649.\n10 Afghanistan Asia       1997 22227415    41.8      635.\n# ℹ 1,694 more rows",
    "crumbs": [
      "R 실습",
      "Lab04: 데이터 변형하기"
    ]
  },
  {
    "objectID": "lab_04.html#그룹-함수",
    "href": "lab_04.html#그룹-함수",
    "title": "Lab04: 데이터 변형하기",
    "section": "\n4 그룹 함수",
    "text": "4 그룹 함수\n\n4.1 group_by() 함수\n특정 범주 열(변수)에 의거해 행을 분할한다. 행의 길이는 변하지 않는다.\n하나의 범주 변수에 의거해 그룹화한다. 산출물을 보면 year에 의거해 행이 12개의 그룹으로 나누어졌음이 나타나 있다(두 번째 줄: Group: year [12]).\n\n# year을 기준으로 그룹화\ngapminder |&gt; \n  group_by(year)\n\n# A tibble: 1,704 × 6\n# Groups:   year [12]\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\n두 개 이상의 범주 변수에 의거해 그룹화할 수도 있다.\n\n# year, continent를 기준으로 그룹화\ngapminder |&gt; \n  group_by(year, continent)\n\n# A tibble: 1,704 × 6\n# Groups:   year, continent [60]\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\n\n4.2 summarize() 함수\n주어진 열(변수)에 대한 통계 요약값을 계산하고 그것으로 이루어진 새로운 데이터 프레임을 생성한다. 엄밀히 말해 기존 열(변수)을 변형한다기 보다는 기존 데이터 프레임으로부터 새로운 데이터 프레임을 생성한다고 볼 수 있다. summarize() 함수는 대부분의 경우 group_by() 함수와 함께 사용된다. 다음의 둘을 비교해 보라.\n\n# 2007년 전체의 gdpPercap의 평균 계산\ngapminder |&gt; \n  filter(year == 2007) |&gt; # year이 2007인 행만 선택\n  summarize(mean_gdpPercap = mean(gdpPercap)) # gdpPercap의 평균값 계산\n\n# A tibble: 1 × 1\n  mean_gdpPercap\n           &lt;dbl&gt;\n1         11680.\n\n\n\n# 2007년 대륙별 gdpPercap의 평균 계산\ngapminder |&gt; \n  filter(year == 2007) |&gt; # year이 2007인 행만 선택\n  group_by(continent) |&gt;  # continent를 기준으로 그룹화\n  summarize(mean_gdpPercap = mean(gdpPercap)) # gdpPercap의 평균값 계산\n\n# A tibble: 5 × 2\n  continent mean_gdpPercap\n  &lt;fct&gt;              &lt;dbl&gt;\n1 Africa             3089.\n2 Americas          11003.\n3 Asia              12473.\n4 Europe            25054.\n5 Oceania           29810.\n\n\n좀 더 복잡한 확장이 가능하다. 마지막의 n()은 자동으로 생성되는 그룹별 빈도값이다.\n\n# continent, year별로 다양한 통계값 산출\ngapminder |&gt; \n    group_by(continent, year) |&gt; # continent, year을 기준으로 그룹화\n    summarize(\n      mean_gdpPercap = mean(gdpPercap), # gdpPercap의 평균값 계산\n      sd_gdpPercap = sd(gdpPercap), # gdpPercap의 표준편차 계산\n      mean_pop = mean(pop), # pop의 평균값 계산\n      sd_pop = sd(pop), # pop의 표준편차 계산\n      n = n() # 그룹에 포함된 행의 개수\n      )\n\n# A tibble: 60 × 7\n# Groups:   continent [5]\n   continent  year mean_gdpPercap sd_gdpPercap  mean_pop    sd_pop     n\n   &lt;fct&gt;     &lt;int&gt;          &lt;dbl&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;int&gt;\n 1 Africa     1952          1253.         983.  4570010.  6317450.    52\n 2 Africa     1957          1385.        1135.  5093033.  7076042.    52\n 3 Africa     1962          1598.        1462.  5702247.  7957545.    52\n 4 Africa     1967          2050.        2848.  6447875.  8985505.    52\n 5 Africa     1972          2340.        3287.  7305376. 10130833.    52\n 6 Africa     1977          2586.        4142.  8328097. 11585184.    52\n 7 Africa     1982          2482.        3243.  9602857. 13456243.    52\n 8 Africa     1987          2283.        2567. 11054502. 15277484.    52\n 9 Africa     1992          2282.        2644. 12674645. 17562719.    52\n10 Africa     1997          2379.        2821. 14304480. 19873013.    52\n# ℹ 50 more rows\n\n\ngroup_by()와 arrange()를 결합하는 경우, .by_group = TRUE를 하면 그룹별로 행을 배열할 수 있다.\n\n# year, continent 그룹별로 gdpPercap 내림차순 정렬\ngapminder |&gt; \n  group_by(year, continent) |&gt; # year, continent를 기준으로 그룹화\n  arrange(desc(gdpPercap), .by_group = TRUE) # 그룹별로 gdpPercap 내림차순 정렬\n\n# A tibble: 1,704 × 6\n# Groups:   year, continent [60]\n   country      continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;        &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 South Africa Africa     1952    45.0 14264935     4725.\n 2 Gabon        Africa     1952    37.0   420702     4293.\n 3 Angola       Africa     1952    30.0  4232095     3521.\n 4 Reunion      Africa     1952    52.7   257700     2719.\n 5 Djibouti     Africa     1952    34.8    63149     2670.\n 6 Algeria      Africa     1952    43.1  9279525     2449.\n 7 Namibia      Africa     1952    41.7   485831     2424.\n 8 Libya        Africa     1952    42.7  1019729     2388.\n 9 Congo, Rep.  Africa     1952    42.1   854885     2126.\n10 Mauritius    Africa     1952    51.0   516556     1968.\n# ℹ 1,694 more rows\n\n\n\n\n\n\n\n\n.by_group = TRUE를 사용하지 않은 경우\n\n\n\n\n\n.by_group = TRUE를 붙이지 않으면 그냥 arrange()를 사용한 것과 같은 결과가 나온다.\n\n# .by_group = TRUE를 사용하지 않은 경우\ngapminder |&gt; \n  group_by(year, continent) |&gt; \n  arrange(desc(gdpPercap))\n\n# A tibble: 1,704 × 6\n# Groups:   year, continent [60]\n   country   continent  year lifeExp     pop gdpPercap\n   &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt;     &lt;dbl&gt;\n 1 Kuwait    Asia       1957    58.0  212846   113523.\n 2 Kuwait    Asia       1972    67.7  841934   109348.\n 3 Kuwait    Asia       1952    55.6  160000   108382.\n 4 Kuwait    Asia       1962    60.5  358266    95458.\n 5 Kuwait    Asia       1967    64.6  575003    80895.\n 6 Kuwait    Asia       1977    69.3 1140357    59265.\n 7 Norway    Europe     2007    80.2 4627926    49357.\n 8 Kuwait    Asia       2007    77.6 2505559    47307.\n 9 Singapore Asia       2007    80.0 4553009    47143.\n10 Norway    Europe     2002    79.0 4535591    44684.\n# ℹ 1,694 more rows\n\n\n\ngapminder |&gt; \n  arrange(desc(gdpPercap))\n\n# A tibble: 1,704 × 6\n   country   continent  year lifeExp     pop gdpPercap\n   &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt;     &lt;dbl&gt;\n 1 Kuwait    Asia       1957    58.0  212846   113523.\n 2 Kuwait    Asia       1972    67.7  841934   109348.\n 3 Kuwait    Asia       1952    55.6  160000   108382.\n 4 Kuwait    Asia       1962    60.5  358266    95458.\n 5 Kuwait    Asia       1967    64.6  575003    80895.\n 6 Kuwait    Asia       1977    69.3 1140357    59265.\n 7 Norway    Europe     2007    80.2 4627926    49357.\n 8 Kuwait    Asia       2007    77.6 2505559    47307.\n 9 Singapore Asia       2007    80.0 4553009    47143.\n10 Norway    Europe     2002    79.0 4535591    44684.\n# ℹ 1,694 more rows\n\n\n\n\n\n아래는 연도별/대륙별로 일인당 GDP가 가장 높은 국가를 추출한 것이다. 코드를 생각해 보라. Code를 누르면 답을 확인할 수 있다.\n\n\nOutput\nCode\n\n\n\n\n\n# A tibble: 60 × 6\n# Groups:   year, continent [60]\n   country       continent  year lifeExp       pop gdpPercap\n   &lt;fct&gt;         &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 South Africa  Africa     1952    45.0  14264935     4725.\n 2 United States Americas   1952    68.4 157553000    13990.\n 3 Kuwait        Asia       1952    55.6    160000   108382.\n 4 Switzerland   Europe     1952    69.6   4815000    14734.\n 5 New Zealand   Oceania    1952    69.4   1994794    10557.\n 6 South Africa  Africa     1957    48.0  16151549     5487.\n 7 United States Americas   1957    69.5 171984000    14847.\n 8 Kuwait        Asia       1957    58.0    212846   113523.\n 9 Switzerland   Europe     1957    70.6   5126000    17909.\n10 New Zealand   Oceania    1957    70.3   2229407    12247.\n# ℹ 50 more rows\n\n\n\n\n\ngapminder |&gt; \n  group_by(year, continent) |&gt; \n  slice_max(gdpPercap)\n\n\n\n\ngroup_by() 함수가 한 번 적용되면, 그 뒤의 모든 오퍼레이션에 그룹 분할이 적용되기 때문에 예기치 못한 일이 발생할 수 있다. 이것을 회피하기 위해 두 가지 옵션이 있다. 첫번째 방법은 마지막에 upgroup() 함수를 첨가하는 것이다.\n\n# 그룹화를 해제하고 year, continent별로 gdpPercap이 가장 높은 국가 선택\ngapminder |&gt; \n  group_by(year, continent) |&gt; # year, continent를 기준으로 그룹화\n  slice_max(gdpPercap) |&gt; # 그룹에서 gdpPercap이 가장 높은 행 선택\n  ungroup() # 그룹화 해제\n\n# A tibble: 60 × 6\n   country       continent  year lifeExp       pop gdpPercap\n   &lt;fct&gt;         &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 South Africa  Africa     1952    45.0  14264935     4725.\n 2 United States Americas   1952    68.4 157553000    13990.\n 3 Kuwait        Asia       1952    55.6    160000   108382.\n 4 Switzerland   Europe     1952    69.6   4815000    14734.\n 5 New Zealand   Oceania    1952    69.4   1994794    10557.\n 6 South Africa  Africa     1957    48.0  16151549     5487.\n 7 United States Americas   1957    69.5 171984000    14847.\n 8 Kuwait        Asia       1957    58.0    212846   113523.\n 9 Switzerland   Europe     1957    70.6   5126000    17909.\n10 New Zealand   Oceania    1957    70.3   2229407    12247.\n# ℹ 50 more rows\n\n\n두 번째 방법은 group_by() 함수 대신 by 아규먼트를 사용하는 것이다. 결과가 달라보이겠지만 정렬의 차이일 뿐 동일하다.\n\n# year, continent 기준으로 gdpPercap이 가장 높은 행 선택\ngapminder |&gt; \n  slice_max(gdpPercap, by = c(year, continent)) \n\n# A tibble: 60 × 6\n   country      continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;        &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Kuwait       Asia       1952    55.6   160000   108382.\n 2 Kuwait       Asia       1957    58.0   212846   113523.\n 3 Kuwait       Asia       1962    60.5   358266    95458.\n 4 Kuwait       Asia       1967    64.6   575003    80895.\n 5 Kuwait       Asia       1972    67.7   841934   109348.\n 6 Kuwait       Asia       1977    69.3  1140357    59265.\n 7 Saudi Arabia Asia       1982    63.0 11254672    33693.\n 8 Kuwait       Asia       1987    74.2  1891487    28118.\n 9 Kuwait       Asia       1992    75.2  1418095    34933.\n10 Kuwait       Asia       1997    76.2  1765345    40301.\n# ℹ 50 more rows\n\n\n\n4.3 count() 함수\n특정 범주 열(변수)에 의거한 빈도를 빠르게 계산해 준다.\n\n# year, continent별 행 개수 계산\ngapminder |&gt; \n  count(year, continent)\n\n# A tibble: 60 × 3\n    year continent     n\n   &lt;int&gt; &lt;fct&gt;     &lt;int&gt;\n 1  1952 Africa       52\n 2  1952 Americas     25\n 3  1952 Asia         33\n 4  1952 Europe       30\n 5  1952 Oceania       2\n 6  1957 Africa       52\n 7  1957 Americas     25\n 8  1957 Asia         33\n 9  1957 Europe       30\n10  1957 Oceania       2\n# ℹ 50 more rows\n\n\nwt 아규먼트를 사용하면 빈도가 아니라 범주별 특정 변수의 합산값을 구할 수 있다.\n\n# year, continent별 pop의 합산값 계산\ngapminder |&gt; \n  count(year, continent, wt = pop)\n\n# A tibble: 60 × 3\n    year continent          n\n   &lt;int&gt; &lt;fct&gt;          &lt;dbl&gt;\n 1  1952 Africa     237640501\n 2  1952 Americas   345152446\n 3  1952 Asia      1395357351\n 4  1952 Europe     418120846\n 5  1952 Oceania     10686006\n 6  1957 Africa     264837738\n 7  1957 Americas   386953916\n 8  1957 Asia      1562780599\n 9  1957 Europe     437890351\n10  1957 Oceania     11941976\n# ℹ 50 more rows\n\n\n위의 두 개를 한 번에 실행할 수 있다.\n\ngapminder |&gt; \n  group_by(year, continent) |&gt; # year, continent를 기준으로 그룹화\n  summarize(\n    n = n(), # 그룹별 행 개수 계산\n    sum_pop = sum(pop) # 그룹별 pop의 합산값 계산\n  )\n\n# A tibble: 60 × 4\n# Groups:   year [12]\n    year continent     n    sum_pop\n   &lt;int&gt; &lt;fct&gt;     &lt;int&gt;      &lt;dbl&gt;\n 1  1952 Africa       52  237640501\n 2  1952 Americas     25  345152446\n 3  1952 Asia         33 1395357351\n 4  1952 Europe       30  418120846\n 5  1952 Oceania       2   10686006\n 6  1957 Africa       52  264837738\n 7  1957 Americas     25  386953916\n 8  1957 Asia         33 1562780599\n 9  1957 Europe       30  437890351\n10  1957 Oceania       2   11941976\n# ℹ 50 more rows\n\n\n\n4.4 across() 함수\n다수의 열(변수)에 동일한 함수를 적용할 수 있다.\n\n# lifeExp와 gdpPercap을 반올림\ngapminder |&gt; \n  mutate(\n    across(c(lifeExp, gdpPercap), round)\n  )\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952      29  8425333       779\n 2 Afghanistan Asia       1957      30  9240934       821\n 3 Afghanistan Asia       1962      32 10267083       853\n 4 Afghanistan Asia       1967      34 11537966       836\n 5 Afghanistan Asia       1972      36 13079460       740\n 6 Afghanistan Asia       1977      38 14880372       786\n 7 Afghanistan Asia       1982      40 12881816       978\n 8 Afghanistan Asia       1987      41 13867957       852\n 9 Afghanistan Asia       1992      42 16317921       649\n10 Afghanistan Asia       1997      42 22227415       635\n# ℹ 1,694 more rows\n\n\n이것은 다음과 동일하다.\n\ngapminder |&gt; \n  mutate(\n    lifeExp = round(lifeExp), # lifeExp를 반올림한 새로운 변수 생성\n    gdpPercap = round(gdpPercap) # gdpPercap을 반올림한 새로운 변수 생성\n  )\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952      29  8425333       779\n 2 Afghanistan Asia       1957      30  9240934       821\n 3 Afghanistan Asia       1962      32 10267083       853\n 4 Afghanistan Asia       1967      34 11537966       836\n 5 Afghanistan Asia       1972      36 13079460       740\n 6 Afghanistan Asia       1977      38 14880372       786\n 7 Afghanistan Asia       1982      40 12881816       978\n 8 Afghanistan Asia       1987      41 13867957       852\n 9 Afghanistan Asia       1992      42 16317921       649\n10 Afghanistan Asia       1997      42 22227415       635\n# ℹ 1,694 more rows\n\n\n\n\n\n\n\n\nTip\n\n\n\n새롭게 생성한 변수가 기존 변수와 이름이 같은 경우 기존 변수를 대체한다.\n\n\nsummarize() 함수와 결합하여 선택된 변수에 특정 함수를 적용하고 그 결과의 이름을 변수명과 함수명을 사용하여 부여할 수 있다.\n\ngapminder |&gt; \n  group_by(year, continent) |&gt; # year, continent를 기준으로 그룹화\n  summarize(across(c(lifeExp, gdpPercap), mean, # lifeExp와 gdpPercap의 평균값 계산\n                   .names = \"mean_{.col}\")) # 새롭게 생성된 변수의 이름을 \"mean_기존 이름\"으로 설정\n\n# A tibble: 60 × 4\n# Groups:   year [12]\n    year continent mean_lifeExp mean_gdpPercap\n   &lt;int&gt; &lt;fct&gt;            &lt;dbl&gt;          &lt;dbl&gt;\n 1  1952 Africa            39.1          1253.\n 2  1952 Americas          53.3          4079.\n 3  1952 Asia              46.3          5195.\n 4  1952 Europe            64.4          5661.\n 5  1952 Oceania           69.3         10298.\n 6  1957 Africa            41.3          1385.\n 7  1957 Americas          56.0          4616.\n 8  1957 Asia              49.3          5788.\n 9  1957 Europe            66.7          6963.\n10  1957 Oceania           70.3         11599.\n# ℹ 50 more rows\n\n\n\n4.5 c_across() 함수\ngroup_by() 함수와 across() 함수가 결합하는 것과 정반대로, rowwise() 함수와 c_across() 함수를 결합하며, 행별 통계값을 산출할 수 있다. 물론 여기서 sd 값은 아무런 의미가 없다.\n\ngapminder |&gt; \n  rowwise() |&gt; # 행별로 그룹화\n  mutate(\n    sd = sd(c_across(where(is.numeric))) # 각 행에서 숫자인 값들의 표준편차 계산\n  )\n\n# A tibble: 1,704 × 7\n# Rowwise: \n   country     continent  year lifeExp      pop gdpPercap        sd\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.  4212207.\n 2 Afghanistan Asia       1957    30.3  9240934      821.  4619999.\n 3 Afghanistan Asia       1962    32.0 10267083      853.  5133067.\n 4 Afghanistan Asia       1967    34.0 11537966      836.  5768510.\n 5 Afghanistan Asia       1972    36.1 13079460      740.  6539272.\n 6 Afghanistan Asia       1977    38.4 14880372      786.  7439719.\n 7 Afghanistan Asia       1982    39.9 12881816      978.  6440408.\n 8 Afghanistan Asia       1987    40.8 13867957      852.  6933499.\n 9 Afghanistan Asia       1992    41.7 16317921      649.  8158513.\n10 Afghanistan Asia       1997    41.8 22227415      635. 11113262.\n# ℹ 1,694 more rows",
    "crumbs": [
      "R 실습",
      "Lab04: 데이터 변형하기"
    ]
  },
  {
    "objectID": "lab_06.html",
    "href": "lab_06.html",
    "title": "Lab06: 데이터 탐색하기",
    "section": "",
    "text": "구글 검색, ChatGPT, 이전 실습 자료 등을 참고할 수 있습니다.\n실습에서 다루지 않은 기능들은 문제마다 따로 설명이 되어 있습니다.",
    "crumbs": [
      "R 실습",
      "Lab06: 데이터 탐색하기"
    ]
  },
  {
    "objectID": "lab_06.html#실습-규칙",
    "href": "lab_06.html#실습-규칙",
    "title": "Lab06: 데이터 탐색하기",
    "section": "",
    "text": "구글 검색, ChatGPT, 이전 실습 자료 등을 참고할 수 있습니다.\n실습에서 다루지 않은 기능들은 문제마다 따로 설명이 되어 있습니다.",
    "crumbs": [
      "R 실습",
      "Lab06: 데이터 탐색하기"
    ]
  },
  {
    "objectID": "lab_06.html#실습-준비",
    "href": "lab_06.html#실습-준비",
    "title": "Lab06: 데이터 탐색하기",
    "section": "\n2 실습 준비",
    "text": "2 실습 준비\n\nlibrary(tidyverse)\nlibrary(ggrepel)\nwpp_2022 &lt;- read_rds(\"wpp_2022.rds\")",
    "crumbs": [
      "R 실습",
      "Lab06: 데이터 탐색하기"
    ]
  },
  {
    "objectID": "lab_06.html#연습-문제",
    "href": "lab_06.html#연습-문제",
    "title": "Lab06: 데이터 탐색하기",
    "section": "\n3 연습 문제",
    "text": "3 연습 문제\n\nUN에 따르면 2023년 4월 인도의 인구가 중국의 인구를 넘어섰습니다. 중국의 심각한 출산율 저하로 인해 두 국가의 인구 수 차이는 앞으로 더 커질 것으로 전망됩니다. 1950년부터 2100년까지의 두 국가의 인구 수를 시각화하여 이러한 경향을 파악해 보겠습니다.\n\n\nwpp_2022의 pop_jul_total 데이터를 활용하세요.\nscale_y_continuous()를 활용하면 y축의 설정을 변경할 수 있습니다. 쉼표를 사용해 숫자를 끊어 가독성을 높이기 위해 어떤 아규먼트가 필요한지 검색을 통해 찾아보세요.\ntheme()을 통해 세부 사항도 조정해보세요. (선 굵기, 테마, 범례의 위치, 굵은 제목 등)",
    "crumbs": [
      "R 실습",
      "Lab06: 데이터 탐색하기"
    ]
  },
  {
    "objectID": "lab_06.html#연습-문제-1",
    "href": "lab_06.html#연습-문제-1",
    "title": "Lab06: 데이터 탐색하기",
    "section": "\n4 연습 문제",
    "text": "4 연습 문제\n\n\nGraph\nCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwpp_2022 |&gt; \n  filter(region_name == \"India\" | region_name == \"China\") |&gt; \n  select(region_name, year, pop_jul_total) |&gt; \n  ggplot(aes(x = year, y = pop_jul_total, color = region_name)) +\n  geom_line(size = 1.0) +\n  labs(title = \"Population Growth of China and India 1950 - 2100\",\n       subtitle = \"India has overtaken China as the world's most populous country\",\n       x = \"Year\",\n       y = \"Population(thousands)\",\n       color = \"Country\",\n       caption = \"Your Name, Department of AI-Integrated Education at SNU\") +\n  theme_bw() +\n  theme(legend.position = c(0.1, 0.7),\n        plot.title = element_text(face = \"bold\")) +\n  scale_y_continuous(labels = scales::comma)",
    "crumbs": [
      "R 실습",
      "Lab06: 데이터 탐색하기"
    ]
  },
  {
    "objectID": "lab_06.html#문제-1",
    "href": "lab_06.html#문제-1",
    "title": "Lab06: 데이터 탐색하기",
    "section": "\n5 문제 1",
    "text": "5 문제 1\n\n1950년에서 2100년까지 UN의 SDG Region별 인구 성장률의 변화를 한 눈에 알아보고자 합니다. 인구 성장률 0은 회색 점선으로 표시되어 있습니다.\n\n\n\nwpp_2022의 PGR 데이터를 활용하세요.\n\ngeom_hline()을 사용하면 플롯에 가로줄을 그릴 수 있습니다. 문제와 똑같은 선을 그리기 위해서는 어떤 아규먼트들이 필요할지 검색을 통해 찾아보세요.",
    "crumbs": [
      "R 실습",
      "Lab06: 데이터 탐색하기"
    ]
  },
  {
    "objectID": "lab_06.html#문제-1-1",
    "href": "lab_06.html#문제-1-1",
    "title": "Lab06: 데이터 탐색하기",
    "section": "\n6 문제 1",
    "text": "6 문제 1\n\nwpp_2022 |&gt; \n  filter(type == \"SDG region\" | type == \"World\") |&gt; \n  select(region_name, year, PGR) |&gt; \n  ggplot(aes(x = year, y = PGR)) +\n  geom_line() +\n  facet_wrap(~region_name) +\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray\") +\n  labs(title = \"Popultaion Growth Rate Trends from 1950 to 2100\",\n       subtitle = \"Comparative Analysis Across SDG Regions and Global Patterns\",\n       x = \"Year\",\n       y = \"Population Growth Rate (%)\",\n       caption = \"Your Name, Department of AI-Integrated Education at SNU\") +\n  theme_bw()",
    "crumbs": [
      "R 실습",
      "Lab06: 데이터 탐색하기"
    ]
  },
  {
    "objectID": "lab_06.html#문제-2",
    "href": "lab_06.html#문제-2",
    "title": "Lab06: 데이터 탐색하기",
    "section": "\n7 문제 2",
    "text": "7 문제 2\n\n1950년부터 2100년까지 국가별 합계출산율을 25년단위로 박스플롯으로 나타내어 전 세계의 합계출산율이 시간이 지남에 따라 어떻게 변화하는지 파악하고자 합니다. 추가적으로 각 시기별로 합계출산율이 가장 높은 국가를 라벨링해 보겠습니다. 대체출산율 2.1은 빨간색 점선으로 그려져 있습니다.\n\n\n\nwpp_2022의 TFR 데이터를 활용하세요.\n\n%in%을 사용하면 filter() 함수를 보다 효과적으로 사용할 수 있습니다. 아래의 두 개는 똑같은 결과를 보입니다.\n\nfilter(year == 1950 | year == 1975 | year == 2000)\nfilter(year %in% c(1950, 1975, 2000))\n\n\n\ngeom_hline()을 사용하면 플롯에 가로줄을 그릴 수 있습니다. 문제와 똑같은 선을 그리기 위해서는 어떤 아규먼트들이 필요할지 검색을 통해 찾아보세요.",
    "crumbs": [
      "R 실습",
      "Lab06: 데이터 탐색하기"
    ]
  },
  {
    "objectID": "lab_06.html#문제-2-1",
    "href": "lab_06.html#문제-2-1",
    "title": "Lab06: 데이터 탐색하기",
    "section": "\n8 문제 2",
    "text": "8 문제 2\n\nwpp_2022_tfr &lt;- wpp_2022 |&gt; \n  filter(year %in% c(1950, 1975, 2000, 2025, 2050, 2075, 2100) & type == \"Country/Area\") |&gt;\n  select(year, region_name, TFR)\n\nwpp_2022_tfr |&gt; \n  ggplot(aes(group = year, x = year, y = TFR)) + \n  geom_boxplot() +\n  geom_label_repel(data = wpp_2022_tfr |&gt; \n                     group_by(year) |&gt; \n                     slice_max(TFR, n = 1), aes(label = region_name)) +\n  geom_hline(yintercept = 2.1, linetype = \"dashed\", color = \"red\", size = 1) +\n  labs(title = \"Total Fertility Rate by Country from 1950 to 2100\",\n       subtitle = \"With Replacement Fertility Rate Emphasized\",\n       x = \"Year\",\n       y = \"Total Fertility Rate(TFR)\",\n       caption = \"Your Name, Department of AI-Integrated Education at SNU\") +\n  theme_bw()",
    "crumbs": [
      "R 실습",
      "Lab06: 데이터 탐색하기"
    ]
  },
  {
    "objectID": "lab_06.html#문제-3",
    "href": "lab_06.html#문제-3",
    "title": "Lab06: 데이터 탐색하기",
    "section": "\n9 문제 3",
    "text": "9 문제 3\n\n1950년에서 2100년까지 25년 단위로 UN의 SDG Region별 인구가 전 세계 인구에서 차지하는 비중을 확인하고자 합니다.\n\n\n\nwpp_2022의 pop_jul_total 데이터를 활용하세요.\n\ngeom_bar()의 아규먼트인 stat = \"identity\"를 사용하면 y축의 높이를 빈도가 아닌 데이터의 값을 기반으로 설정해줍니다.\n\nscale_y_continuous()를 활용하면 y축의 설정을 변경할 수 있습니다. y축의 값을 백분율로 나타내기 위해 어떤 아규먼트가 필요한지 검색을 통해 찾아보세요.",
    "crumbs": [
      "R 실습",
      "Lab06: 데이터 탐색하기"
    ]
  },
  {
    "objectID": "lab_06.html#문제-3-1",
    "href": "lab_06.html#문제-3-1",
    "title": "Lab06: 데이터 탐색하기",
    "section": "\n10 문제 3",
    "text": "10 문제 3\n\nwpp_2022 |&gt; \n  filter(type == \"SDG region\" & year %in% c(1950, 1975, 2000, 2025, 2050, 2075, 2100)) |&gt; \n  select(region_name, year, pop_jul_total) |&gt; \n  group_by(year) |&gt; \n  mutate(prop = pop_jul_total / sum(pop_jul_total)) |&gt; \n  ggplot(aes(x = year, y = prop, fill = region_name)) +\n  geom_bar(stat = \"identity\", position = \"fill\") +\n  scale_y_continuous(labels = scales::percent) +\n  labs(title = \"World Population Proportions by SDG Region, from 1950 to 2100\",\n       x = \"Year\",\n       y = \"Population Proportion (%)\",\n       fill = \"SDG Region\",\n       caption = \"Your Name, Department of AI-Integrated Education at SNU\") +\n  theme(legend.position = \"bottom\")",
    "crumbs": [
      "R 실습",
      "Lab06: 데이터 탐색하기"
    ]
  },
  {
    "objectID": "lectures.html",
    "href": "lectures.html",
    "title": "강의노트",
    "section": "",
    "text": "Chapter 1. 데이터사이언스의 개념과 원리 \nChapter 2. 인구 현상과 인문사회 콘텐츠\n\n인구 현상과 인구 데이터 \n인구 성장, 인구 분포, 인구 구조 \n인구 동태와 인구 이동 \n\nChapter 3. 데이터 수집하기 \nChapter 4. 데이터로 소통하기\n\n\n\n Back to top",
    "crumbs": [
      "데이터사이언스 강의",
      "강의노트"
    ]
  },
  {
    "objectID": "R_lec_02.html#operators",
    "href": "R_lec_02.html#operators",
    "title": "R & Data Science",
    "section": "Operators",
    "text": "Operators",
    "crumbs": [
      "R 프레젠테이션",
      "R & Data Science"
    ]
  },
  {
    "objectID": "R_lec_02.html#arithmatic-operators",
    "href": "R_lec_02.html#arithmatic-operators",
    "title": "R & Data Science",
    "section": "Arithmatic operators",
    "text": "Arithmatic operators\n\n\nOperator\nDescription\nExample\n\n\n\n+\naddition\n5+5=10\n\n\n-\nsubtraction\n5-5=0\n\n\n*\nmultiplication\n2*8=16\n\n\n/\ndivision\n100/10=10\n\n\n\n^ (or **)\nexponent/power\n5^2=25\n\n\n%%\nmodulo\n100%%15=10\n\n\n%/%\ninteger division\n100%/%15=6",
    "crumbs": [
      "R 프레젠테이션",
      "R & Data Science"
    ]
  },
  {
    "objectID": "R_lec_02.html#relational-and-logical-operators",
    "href": "R_lec_02.html#relational-and-logical-operators",
    "title": "R & Data Science",
    "section": "Relational and logical operators",
    "text": "Relational and logical operators\n\n\n\n\n\n\n\nType\nOperator\nCondition\n\n\n\nRelational\nx &lt; y\nWhere x less than y\n\n\n\n\nx &gt; y\nWhere x greater than y\n\n\n\n\nx &lt;= y\nWhere x less than or equal to y\n\n\n\n\nx &gt;= y\nWhere x greater than or equal to y\n\n\n\n\nx == y\nWhere x (exactly) equals y\n\n\n\n\nx != y\nWhere x is not equal to y\n\n\n\nLogical\n!\nNegation\n\n\n\n&\nLogical “and” (x &gt;= 20 & x &lt; 35)\n\n\n\n|\nLogical “or (x == 20 | x &gt; 45)\n\n\n\nxor\nLogical “exclusive or” (xor(x == 20, x == 50)\n\n\nMiscellaneous\nx %in% y\nWhere x is in y\n\n\n\n\n!x %in% y\nWhere x is not in y",
    "crumbs": [
      "R 프레젠테이션",
      "R & Data Science"
    ]
  },
  {
    "objectID": "R_lec_02.html#assignment-operators",
    "href": "R_lec_02.html#assignment-operators",
    "title": "R & Data Science",
    "section": "Assignment operators",
    "text": "Assignment operators",
    "crumbs": [
      "R 프레젠테이션",
      "R & Data Science"
    ]
  },
  {
    "objectID": "R_lec_02.html#functions",
    "href": "R_lec_02.html#functions",
    "title": "R & Data Science",
    "section": "Functions",
    "text": "Functions\n\nseq(from = 2, to = 100, by = 2)",
    "crumbs": [
      "R 프레젠테이션",
      "R & Data Science"
    ]
  },
  {
    "objectID": "R_lec_02.html#some-base-r-vector-functions",
    "href": "R_lec_02.html#some-base-r-vector-functions",
    "title": "R & Data Science",
    "section": "Some Base R vector functions",
    "text": "Some Base R vector functions\n\n\nFunction\nDescription\n\n\n\nround()\nRound number values\n\n\n\nmin(), max()\n\nMinimum and maximum\n\n\n\nmean(), median()\n\nArithmetic mean and median\n\n\nsum()\nSum\n\n\n\nsd(), var()\n\nStandard deviation and variance\n\n\nsqrt()\nSquare root\n\n\nsummary()\nNumerical summary\n\n\nstr()\nOverview of the object structure\n\n\n\nany(), all()\n\nTest vector elements\n\n\nall.equal()\nTest for near equality\n\n\nsort()\nSort a vector\n\n\norder()\nObtain ordering of a vector",
    "crumbs": [
      "R 프레젠테이션",
      "R & Data Science"
    ]
  },
  {
    "objectID": "R_lec_02.html#data-types",
    "href": "R_lec_02.html#data-types",
    "title": "R & Data Science",
    "section": "Data types",
    "text": "Data types",
    "crumbs": [
      "R 프레젠테이션",
      "R & Data Science"
    ]
  },
  {
    "objectID": "R_lec_02.html#vectors-data-frames",
    "href": "R_lec_02.html#vectors-data-frames",
    "title": "R & Data Science",
    "section": "Vectors & data frames",
    "text": "Vectors & data frames\n\nlibrary(tidyverse)\na &lt;- c(58, 26, 24)\nb &lt;- c(58L, 26L, 24L)\nc &lt;- c(TRUE, TRUE, FALSE)\nd &lt;- c(\"이상일\", \"김세창\", \"김우형\")\ndf &lt;- tibble(a, b, c, d)\ndf\n\n# A tibble: 3 × 4\n      a     b c     d     \n  &lt;dbl&gt; &lt;int&gt; &lt;lgl&gt; &lt;chr&gt; \n1    58    58 TRUE  이상일\n2    26    26 TRUE  김세창\n3    24    24 FALSE 김우형",
    "crumbs": [
      "R 프레젠테이션",
      "R & Data Science"
    ]
  },
  {
    "objectID": "R_lec_02.html#packages-what-are-they",
    "href": "R_lec_02.html#packages-what-are-they",
    "title": "R & Data Science",
    "section": "Packages: what are they?",
    "text": "Packages: what are they?",
    "crumbs": [
      "R 프레젠테이션",
      "R & Data Science"
    ]
  },
  {
    "objectID": "R_lec_02.html#packages-how-to-install-them",
    "href": "R_lec_02.html#packages-how-to-install-them",
    "title": "R & Data Science",
    "section": "Packages: how to install them",
    "text": "Packages: how to install them",
    "crumbs": [
      "R 프레젠테이션",
      "R & Data Science"
    ]
  },
  {
    "objectID": "R_lec_02.html#tidyverse-a-tidy-universe",
    "href": "R_lec_02.html#tidyverse-a-tidy-universe",
    "title": "R & Data Science",
    "section": "Tidyverse: a tidy universe",
    "text": "Tidyverse: a tidy universe",
    "crumbs": [
      "R 프레젠테이션",
      "R & Data Science"
    ]
  },
  {
    "objectID": "R_lec_02.html#tidyverse-core-component-packages",
    "href": "R_lec_02.html#tidyverse-core-component-packages",
    "title": "R & Data Science",
    "section": "Tidyverse: core component packages",
    "text": "Tidyverse: core component packages",
    "crumbs": [
      "R 프레젠테이션",
      "R & Data Science"
    ]
  },
  {
    "objectID": "R_lec_02.html#tidyverse-philosophy",
    "href": "R_lec_02.html#tidyverse-philosophy",
    "title": "R & Data Science",
    "section": "Tidyverse: philosophy",
    "text": "Tidyverse: philosophy\n\n\nHuman-centeredness\n\nFor an end-user programmer\n\n\n\nConsistency\n\nThe smallest possible set of key ideas, used as comprehensively as possible\n\n\n\nComposability\n\nMany simple pieces, composed for a larger task using operators such as |&gt; and +\n\n\n\nInclusiveness\n\nTowards a diverse, open, and friendly community\n\n\n\n(https://design.tidyverse.org/unifying.html)",
    "crumbs": [
      "R 프레젠테이션",
      "R & Data Science"
    ]
  },
  {
    "objectID": "R_lec_02.html#magrittr",
    "href": "R_lec_02.html#magrittr",
    "title": "R & Data Science",
    "section": "magrittr",
    "text": "magrittr",
    "crumbs": [
      "R 프레젠테이션",
      "R & Data Science"
    ]
  },
  {
    "objectID": "R_lec_02.html#basic-principle",
    "href": "R_lec_02.html#basic-principle",
    "title": "R & Data Science",
    "section": "Basic principle",
    "text": "Basic principle",
    "crumbs": [
      "R 프레젠테이션",
      "R & Data Science"
    ]
  },
  {
    "objectID": "R_lec_02.html#basic-principle-1",
    "href": "R_lec_02.html#basic-principle-1",
    "title": "R & Data Science",
    "section": "Basic principle",
    "text": "Basic principle",
    "crumbs": [
      "R 프레젠테이션",
      "R & Data Science"
    ]
  },
  {
    "objectID": "R_lec_02.html#native-pipe-operator",
    "href": "R_lec_02.html#native-pipe-operator",
    "title": "R & Data Science",
    "section": "Native pipe operator",
    "text": "Native pipe operator",
    "crumbs": [
      "R 프레젠테이션",
      "R & Data Science"
    ]
  },
  {
    "objectID": "R_lec_02.html#pipe-operator-for-eda",
    "href": "R_lec_02.html#pipe-operator-for-eda",
    "title": "R & Data Science",
    "section": "Pipe operator for EDA",
    "text": "Pipe operator for EDA",
    "crumbs": [
      "R 프레젠테이션",
      "R & Data Science"
    ]
  },
  {
    "objectID": "R_lec_02.html#no-error-no-gain",
    "href": "R_lec_02.html#no-error-no-gain",
    "title": "R & Data Science",
    "section": "No error, no gain!",
    "text": "No error, no gain!",
    "crumbs": [
      "R 프레젠테이션",
      "R & Data Science"
    ]
  },
  {
    "objectID": "R_lec_04.html",
    "href": "R_lec_04.html",
    "title": "Data Transformation",
    "section": "",
    "text": "The first argument is always a data frame.\nThe subsequent arguments typically describe which columns to operate on, using variable names (without quotes).\nThe output is always a data frame.\n\n\n\n\nFunctions are operated on:\n\nRows\nColumns\nGroups\nTables",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#dplyr-basics",
    "href": "R_lec_04.html#dplyr-basics",
    "title": "Data Transformation",
    "section": "",
    "text": "The first argument is always a data frame.\nThe subsequent arguments typically describe which columns to operate on, using variable names (without quotes).\nThe output is always a data frame.",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#types-of-dplyr-functions",
    "href": "R_lec_04.html#types-of-dplyr-functions",
    "title": "Data Transformation",
    "section": "",
    "text": "Functions are operated on:\n\nRows\nColumns\nGroups\nTables",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#four-functions",
    "href": "R_lec_04.html#four-functions",
    "title": "Data Transformation",
    "section": "Four functions",
    "text": "Four functions\n\nfilter(): 특정 변수(들)에 의거한 조건을 만족하는 행(들)을 추출\narrange(): 특정 변수(들)에 의거해 행(들)의 순서를 변경\ndistinct(): 특정 변수(들)에 의거해 (중복을 제거한) 고유한 행(들)을 추출\nslice(): filter() 함수처럼 특정 행(들)을 추출\n\n특정 변수와 관계 없이, 행의 위치에 의거해 특정 행(들)을 추출\n특정 변수에 따른, 행의 위치에 의거해 행(들)을 추출",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#filter",
    "href": "R_lec_04.html#filter",
    "title": "Data Transformation",
    "section": "filter()",
    "text": "filter()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#filter-1",
    "href": "R_lec_04.html#filter-1",
    "title": "Data Transformation",
    "section": "filter()",
    "text": "filter()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#filter-2",
    "href": "R_lec_04.html#filter-2",
    "title": "Data Transformation",
    "section": "filter()",
    "text": "filter()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#arrange",
    "href": "R_lec_04.html#arrange",
    "title": "Data Transformation",
    "section": "arrange()",
    "text": "arrange()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#arrange-1",
    "href": "R_lec_04.html#arrange-1",
    "title": "Data Transformation",
    "section": "arrange()",
    "text": "arrange()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#distinct",
    "href": "R_lec_04.html#distinct",
    "title": "Data Transformation",
    "section": "distinct()",
    "text": "distinct()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#distinct-1",
    "href": "R_lec_04.html#distinct-1",
    "title": "Data Transformation",
    "section": "distinct()",
    "text": "distinct()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#slice",
    "href": "R_lec_04.html#slice",
    "title": "Data Transformation",
    "section": "slice()",
    "text": "slice()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#slice-1",
    "href": "R_lec_04.html#slice-1",
    "title": "Data Transformation",
    "section": "slice()",
    "text": "slice()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#four-functions-1",
    "href": "R_lec_04.html#four-functions-1",
    "title": "Data Transformation",
    "section": "Four functions",
    "text": "Four functions\n\nselect(): 변수(들) 중 일부를 추출\nmutate(): 변수(들)를 변형해 새로운 변수를 생성\nrename(): 변수(들)의 이름을 변경\nrelocate(): 변수(들)의 위치(순서)를 변경",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#select",
    "href": "R_lec_04.html#select",
    "title": "Data Transformation",
    "section": "select()",
    "text": "select()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#select-1",
    "href": "R_lec_04.html#select-1",
    "title": "Data Transformation",
    "section": "select()",
    "text": "select()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#mutate",
    "href": "R_lec_04.html#mutate",
    "title": "Data Transformation",
    "section": "mutate()",
    "text": "mutate()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#rename",
    "href": "R_lec_04.html#rename",
    "title": "Data Transformation",
    "section": "rename()",
    "text": "rename()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#rename-1",
    "href": "R_lec_04.html#rename-1",
    "title": "Data Transformation",
    "section": "rename()",
    "text": "rename()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#relocate",
    "href": "R_lec_04.html#relocate",
    "title": "Data Transformation",
    "section": "relocate()",
    "text": "relocate()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#four-functions-2",
    "href": "R_lec_04.html#four-functions-2",
    "title": "Data Transformation",
    "section": "Four functions",
    "text": "Four functions\n\ngroup_by(): 변수(들)에 의거해 전체 행(들)을 그룹으로 분할\nsummarize(): 그룹별로 변수(들)의 통계량을 산출하여 새로운 변수(들)로 저장\ncount(): 그룹별로 해당 관측개체의 빈도수를 계산\nacross(): 그룹별로 여러 변수에 걸쳐 동일한 통계량을 산출하고 새로운 변수들로 저장",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#group_by",
    "href": "R_lec_04.html#group_by",
    "title": "Data Transformation",
    "section": "group_by()",
    "text": "group_by()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#group_by-1",
    "href": "R_lec_04.html#group_by-1",
    "title": "Data Transformation",
    "section": "group_by()",
    "text": "group_by()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#summarize",
    "href": "R_lec_04.html#summarize",
    "title": "Data Transformation",
    "section": "summarize()",
    "text": "summarize()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#group_by-summarize",
    "href": "R_lec_04.html#group_by-summarize",
    "title": "Data Transformation",
    "section": "group_by() + summarize()",
    "text": "group_by() + summarize()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#group_by-summarize-1",
    "href": "R_lec_04.html#group_by-summarize-1",
    "title": "Data Transformation",
    "section": "group_by() + summarize()",
    "text": "group_by() + summarize()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#count",
    "href": "R_lec_04.html#count",
    "title": "Data Transformation",
    "section": "count()",
    "text": "count()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#count-1",
    "href": "R_lec_04.html#count-1",
    "title": "Data Transformation",
    "section": "count()",
    "text": "count()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_04.html#across",
    "href": "R_lec_04.html#across",
    "title": "Data Transformation",
    "section": "across()",
    "text": "across()",
    "crumbs": [
      "R 프레젠테이션",
      "Data Transformation"
    ]
  },
  {
    "objectID": "R_lec_06.html",
    "href": "R_lec_06.html",
    "title": "Data Exploration",
    "section": "",
    "text": "Data exploration is a process of interacting with data to answer questions.\nA sequential process from data transformation and data visualization is central to data exploration.\nData transformation is often a necessary prerequisite for data visualization.\n\n\n질문에 답할 수 있는 그래픽(플롯, 지도 등)을 구상한다.\n구상한 그래픽에 부합하도록 데이터를 변형한다.\n변형한 데이터를 구상한 그래픽으로 시각화한다.\n그래픽으로부터 질문의 답을 구하고, 더 나아가 지식, 이해, 통찰을 이끌어낸다.",
    "crumbs": [
      "R 프레젠테이션",
      "Data Exploration"
    ]
  },
  {
    "objectID": "R_lec_06.html#exploration-in-a-data-science-process-1",
    "href": "R_lec_06.html#exploration-in-a-data-science-process-1",
    "title": "Data Exploration",
    "section": "",
    "text": "Data exploration is a process of interacting with data to answer questions.\nA sequential process from data transformation and data visualization is central to data exploration.\nData transformation is often a necessary prerequisite for data visualization.",
    "crumbs": [
      "R 프레젠테이션",
      "Data Exploration"
    ]
  },
  {
    "objectID": "R_lec_06.html#데이터-탐색의-절차",
    "href": "R_lec_06.html#데이터-탐색의-절차",
    "title": "Data Exploration",
    "section": "",
    "text": "질문에 답할 수 있는 그래픽(플롯, 지도 등)을 구상한다.\n구상한 그래픽에 부합하도록 데이터를 변형한다.\n변형한 데이터를 구상한 그래픽으로 시각화한다.\n그래픽으로부터 질문의 답을 구하고, 더 나아가 지식, 이해, 통찰을 이끌어낸다.",
    "crumbs": [
      "R 프레젠테이션",
      "Data Exploration"
    ]
  },
  {
    "objectID": "R_lec_06.html#data",
    "href": "R_lec_06.html#data",
    "title": "Data Exploration",
    "section": "Data",
    "text": "Data\n\n\ngapminder data set\n\nlibrary(tidyverse)\nlibrary(gapminder)\ngapminder\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows",
    "crumbs": [
      "R 프레젠테이션",
      "Data Exploration"
    ]
  },
  {
    "objectID": "R_lec_06.html#question-1",
    "href": "R_lec_06.html#question-1",
    "title": "Data Exploration",
    "section": "Question 1",
    "text": "Question 1\n아시아의 1957년과 2007년의 1인당 GDP는 얼마이며 순위는 어떠한가? 1인당 GDP의 순위가 상승하였는가?",
    "crumbs": [
      "R 프레젠테이션",
      "Data Exploration"
    ]
  },
  {
    "objectID": "R_lec_06.html#question-1-1",
    "href": "R_lec_06.html#question-1-1",
    "title": "Data Exploration",
    "section": "Question 1",
    "text": "Question 1\n\n\nResult\nCode\n\n\n\n\n\n# A tibble: 10 × 5\n# Groups:   year [2]\n    year continent    sum_pop sum_gdp gdp_percap_cont\n   &lt;int&gt; &lt;fct&gt;          &lt;dbl&gt;   &lt;dbl&gt;           &lt;dbl&gt;\n 1  1957 Oceania     11941976 1.34e11          11192.\n 2  1957 Americas   386953916 3.52e12           9098.\n 3  1957 Europe     437890351 3.30e12           7535.\n 4  1957 Africa     264837738 3.83e11           1445.\n 5  1957 Asia      1562780599 1.56e12            998.\n 6  2007 Oceania     24549947 8.07e11          32885.\n 7  2007 Europe     586098529 1.48e13          25244.\n 8  2007 Americas   898871184 1.94e13          21603.\n 9  2007 Asia      3811953827 2.07e13           5432.\n10  2007 Africa     929539692 2.38e12           2561.\n\n\n\n\n\ngapminder |&gt; \n  group_by(year, continent) |&gt; \n  summarize(\n    sum_pop = sum(pop),\n    sum_gdp = sum(pop * gdpPercap),\n    gdp_percap_cont = sum_gdp / sum_pop\n  ) |&gt; \n  filter(year %in% c(1957, 2007)) |&gt; \n  arrange(year, desc(gdp_percap_cont))",
    "crumbs": [
      "R 프레젠테이션",
      "Data Exploration"
    ]
  },
  {
    "objectID": "R_lec_06.html#question-2",
    "href": "R_lec_06.html#question-2",
    "title": "Data Exploration",
    "section": "Question 2",
    "text": "Question 2\n대륙별 최대국(인구가 가장 많은 나라)이 소속 대륙 전체에서 차지하는 비중(%)이 어느 정도이고 대륙별로 어느 정도의 차이가 있는지, 그리고 대륙별 최대국의 비중이 시간이 지남에 따라 어떠한 변화 양상을 보이고, 그러한 양상에 대륙별 차이가 있는지를 탐색",
    "crumbs": [
      "R 프레젠테이션",
      "Data Exploration"
    ]
  },
  {
    "objectID": "R_lec_06.html#question-2-1",
    "href": "R_lec_06.html#question-2-1",
    "title": "Data Exploration",
    "section": "Question 2",
    "text": "Question 2\n\n\nGraph 1\nCode 1\nCode 2\nGraph 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngapminder |&gt; \n  group_by(year, continent) |&gt; \n  mutate(\n    sum_cont = sum(pop),\n    country_prop = pop * 100 / sum_cont\n  ) |&gt; \n  slice_max(country_prop) |&gt; \n  ggplot() +\n  geom_line(aes(x = year, y = country_prop, color = continent))\n\n\n\n\ngapminder |&gt; \n  group_by(year, continent) |&gt; \n  mutate(\n    sum_cont = sum(pop),\n    country_prop = pop * 100 / sum_cont\n  ) |&gt; \n  slice_max(country_prop) |&gt; \n  ggplot() +\n  geom_line(aes(x = year, y = country_prop, color = continent), linewidth = 1) +\n  scale_x_continuous(breaks = seq(1952, 2007, 5)) +\n  labs(x = \"Year\", y = \"% of Population\", color = \"Continents\")",
    "crumbs": [
      "R 프레젠테이션",
      "Data Exploration"
    ]
  },
  {
    "objectID": "R_lec_06.html#question-3",
    "href": "R_lec_06.html#question-3",
    "title": "Data Exploration",
    "section": "Question 3",
    "text": "Question 3\n\n1952~2007년간의 연평균 인구성장률의 대륙간 차이와 대륙 내 국가간 편차를 동시에 탐색\n연평균 인구성장률(%)은 다음의 공식에 의거해 산출\n\n\\[\nr=\\frac{1}{n}\\times\\ln(\\frac{P_n}{P_0})\\times100\n\\]",
    "crumbs": [
      "R 프레젠테이션",
      "Data Exploration"
    ]
  },
  {
    "objectID": "R_lec_06.html#question-3-1",
    "href": "R_lec_06.html#question-3-1",
    "title": "Data Exploration",
    "section": "Question 3",
    "text": "Question 3\n\n\nGraph 1\nCode 1\nCode 2\nGraph 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngapminder |&gt; \n  pivot_wider(\n    id_cols = c(country, continent),\n    names_from = year,\n    values_from = pop\n  ) |&gt; \n  mutate(\n    pgr = (1/(2007-1952))*log(`2007`/`1952`) * 100\n  ) |&gt; \n  ggplot(aes(x = continent, y = pgr)) +\n  geom_boxplot(aes(color = continent))\n\n\n\n\ngapminder |&gt; \n  pivot_wider(\n    id_cols = c(country, continent),\n    names_from = year,\n    values_from = pop\n  ) |&gt; \n  mutate(\n    pgr = (1/(2007-1952))*log(`2007`/`1952`) * 100\n  ) |&gt; \n  ggplot(aes(x = fct_reorder(continent, pgr, median), y = pgr)) +\n  geom_boxplot(aes(fill = continent)) +\n  labs(x = \"Continents\", y = \"PGR(%), 1952-2007\", fill = \"Continents\")",
    "crumbs": [
      "R 프레젠테이션",
      "Data Exploration"
    ]
  },
  {
    "objectID": "R_lec_01.html#major-events",
    "href": "R_lec_01.html#major-events",
    "title": "R & RStudio",
    "section": "Major Events",
    "text": "Major Events",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#bell-labs-in-1975",
    "href": "R_lec_01.html#bell-labs-in-1975",
    "title": "R & RStudio",
    "section": "Bell Labs in 1975",
    "text": "Bell Labs in 1975",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#s-plus-1997",
    "href": "R_lec_01.html#s-plus-1997",
    "title": "R & RStudio",
    "section": "S-Plus, 1997",
    "text": "S-Plus, 1997",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#official-birth",
    "href": "R_lec_01.html#official-birth",
    "title": "R & RStudio",
    "section": "Official Birth",
    "text": "Official Birth",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#rstudio-2011",
    "href": "R_lec_01.html#rstudio-2011",
    "title": "R & RStudio",
    "section": "RStudio, 2011",
    "text": "RStudio, 2011",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#shiny-2012",
    "href": "R_lec_01.html#shiny-2012",
    "title": "R & RStudio",
    "section": "shiny, 2012",
    "text": "shiny, 2012",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#tidyverse-2016",
    "href": "R_lec_01.html#tidyverse-2016",
    "title": "R & RStudio",
    "section": "tidyverse, 2016",
    "text": "tidyverse, 2016",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#posit-2022",
    "href": "R_lec_01.html#posit-2022",
    "title": "R & RStudio",
    "section": "posit, 2022",
    "text": "posit, 2022",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  },
  {
    "objectID": "R_lec_01.html#quarto-2022",
    "href": "R_lec_01.html#quarto-2022",
    "title": "R & RStudio",
    "section": "quarto, 2022",
    "text": "quarto, 2022",
    "crumbs": [
      "R 프레젠테이션",
      "R & RStudio"
    ]
  }
]