{
  "hash": "963fb6945d86f196f117a583626112bb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R & Data Science\"\nauthor: Sang-Il Lee\ntitle-slide-attributes: \n  data-background-image: R_1.gif\n  data-background-position: 85% 5%\n  data-background-size: 20%\n  data-background-opacity: \"1e\"\ndate-modified: last-modified\nnumber-sections: false\nformat: \n  revealjs:\n#    footer: <https://sangillee.snu.ac.kr>\n    chalkboard: false\n    slide-number: true\n    pointer:\n      pointerSize: 20\n    embed-resources: false\nrevealjs-plugins:\n  - pointer\ncode-link: true\nexecute: \n  warning: false\n  error: false\n  freeze: auto\neditor: visual\n# suppress-bibliography: true\n---\n\n\n\n# R for Data Science\n\n## The Book\n\n![](images/clipboard-4118011220.png){fig-align=\"center\"}\n\n## A data science process with R\n\n![](images/clipboard-3326006124.png)\n\n## A data science process with R\n\n![](images/clipboard-1690300635.png)\n\n# Operators, functions, and objects\n\n## Operators\n\n![](images/clipboard-1399978816.png)\n\n## Arithmatic operators\n\n|   Operator    |   Description    |   Example    |\n|:-------------:|:----------------:|:------------:|\n|      `+`      |     addition     |   `5+5=10`   |\n|      `-`      |   subtraction    |   `5-5=0`    |\n|      `*`      |  multiplication  |   `2*8=16`   |\n|      `/`      |     division     | `100/10=10`  |\n| `^` (or `**`) |  exponent/power  |   `5^2=25`   |\n|     `%%`      |      modulo      | `100%%15=10` |\n|     `%/%`     | integer division | `100%/%15=6` |\n\n## Relational and logical operators {.scrollable .smaller}\n\n| Type          | Operator    | Condition                                       |\n|---------------|-------------|-------------------------------------------------|\n| Relational    | `x < y`     | Where `x` less than `y`                         |\n|               | `x > y`     | Where `x` greater than `y`                      |\n|               | `x <= y`    | Where `x` less than or equal to `y`             |\n|               | `x >= y`    | Where `x` greater than or equal to `y`          |\n|               | `x == y`    | Where `x` (exactly) equals `y`                  |\n|               | `x != y`    | Where `x` is not equal to `y`                   |\n| Logical       | `!`         | Negation                                        |\n|               | `&`         | Logical \"and\" (`x >= 20 & x < 35`)              |\n|               | `|`         | Logical \"or (`x == 20 | x > 45`)                |\n|               | `xor`       | Logical \"exclusive or\" (`xor(x == 20, x == 50`) |\n| Miscellaneous | `x %in% y`  | Where `x` is in `y`                             |\n|               | `!x %in% y` | Where `x` is not in `y`                         |\n\n## Assignment operators\n\n::: {layout-ncol=\"2\"}\n![](images/clipboard-911363916.png)\n\n![](images/clipboard-1290193573.png)\n:::\n\n## Functions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from = 2, to = 100, by = 2)\n```\n:::\n\n\n\n![](images/clipboard-1402738689.png)\n\n## Some Base R vector functions {.scrollable .smaller}\n\n| Function             | Description                      |\n|----------------------|----------------------------------|\n| `round()`            | Round number values              |\n| `min()`, `max()`     | Minimum and maximum              |\n| `mean()`, `median()` | Arithmetic mean and median       |\n| `sum()`              | Sum                              |\n| `sd()`, `var()`      | Standard deviation and variance  |\n| `sqrt()`             | Square root                      |\n| `summary()`          | Numerical summary                |\n| `str()`              | Overview of the object structure |\n| `any()`, `all()`     | Test vector elements             |\n| `all.equal()`        | Test for near equality           |\n| `sort()`             | Sort a vector                    |\n| `order()`            | Obtain ordering of a vector      |\n\n## Data types\n\n![](images/clipboard-2205001184.png)\n\n## Vectors & data frames\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\na <- c(58, 26, 24)\nb <- c(58L, 26L, 24L)\nc <- c(TRUE, TRUE, FALSE)\nd <- c(\"이상일\", \"김세창\", \"김우형\")\ndf <- tibble(a, b, c, d)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n      a     b c     d     \n  <dbl> <int> <lgl> <chr> \n1    58    58 TRUE  이상일\n2    26    26 TRUE  김세창\n3    24    24 FALSE 김우형\n```\n\n\n:::\n:::\n\n\n\n# Packages and Tidyverse\n\n## Packages: what are they?\n\n![](images/clipboard-3555057991.png)\n\n## Packages: how to install them\n\n![](images/clipboard-1002522383.png){fig-align=\"center\"}\n\n## Tidyverse: a tidy universe\n\n![](images/clipboard-3736095484.png){fig-align=\"center\"}\n\n## Tidyverse: core component packages\n\n![](images/clipboard-1556071055.png){fig-align=\"center\"}\n\n## Tidyverse: philosophy {.smaller}\n\n-   Human-centeredness\n\n    -   For an end-user programmer\n\n-   Consistency\n\n    -   The smallest possible set of key ideas, used as comprehensively as possible\n\n-   Composability\n\n    -   Many simple pieces, composed for a larger task using operators such as \\|\\> and +\n\n-   Inclusiveness\n\n    -   Towards a diverse, open, and friendly community\n\n(<https://design.tidyverse.org/unifying.html>)\n\n# Pipe Operator\n\n## magrittr\n\n::: {layout-ncol=\"2\" layout-valign=\"center\"}\n![](images/clipboard-30645075.png)\n\n![](images/clipboard-4078158871.png)\n:::\n\n## Basic principle\n\n![](images/clipboard-3095511909.png){fig-align=\"center\"}\n\n## Basic principle\n\n![](images/Pipe_baking_magrittr_backAssign.gif){fig-align=\"center\"}\n\n## Native pipe operator\n\n::: {layout-ncol=\"2\" layout-valign=\"center\"}\n![](images/clipboard-2382832838.png)\n\n![](images/clipboard-39249103.png)\n:::\n\n## Pipe operator for EDA\n\n![](images/clipboard-174079750.png){fig-align=\"center\"}\n\n## No error, no gain!\n\n![](images/clipboard-229605073.png){fig-align=\"center\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}