{
  "hash": "1750139facced71b220cc8e751b44ae8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"데이터 수집하기\"\nauthor: 이상일(서울대학교 지리교육과)\ndate-modified: last-modified\nnumber-sections: true\nformat: \n  html: \n    toc: true\ncode-link: true\ncode-copy: true\nexecute: \n  warning: false\n  error: false\n  freeze: auto\neditor: visual\nbibliography: references.bib\neditor_options: \n  chunk_output_type: console\n---\n\n\n## 실습 개요 {.unnumbered}\n\n이 실습은 R로 데이터를 수집하는 과정을 다루다. R을 활용한 데이터 수집은 다양한 방법으로 진행될 수 있지만 여기서는 웹상의 데이터 파일 불러오기, 웹 스크레이핑, API를 이용하는 방식에 집중한다. 실습의 시작은 [`tidyverse`](https://www.tidyverse.org/) 패키지를 불러오는 것이다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## 웹상의 데이터 파일 불러오기\n\n아마도 데이터를 수집하는 가장 단순한 방법은 웹상에 파일 형태로 존재하는 데이터를 R에서 불러오는 것일 것이다. `readr` 패키지에서 제공하는 다양한 데이터 불러오기 함수(예: `read_csv()`)를 데이터의 URL에 적용하면 손쉽게 데이터를 획득할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents <- read_csv(\"https://pos.it/r4ds-students-csv\")\nstudents\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         <dbl> <chr>            <chr>              <chr>               <chr>\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          <NA> \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 Güvenç Attila    Ice cream          Lunch only          6    \n```\n\n\n:::\n:::\n\n\n그런데 엑셀 형식의 파일은 [`readxl`](https://readxl.tidyverse.org/) 패키지가 제공하는 `read_excel()` 함수를 이용해 막바로 데이터를 불러오는 것이 불가능하다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nread_excel(\"https://github.com/awalker89/openxlsx/raw/master/inst/readTest.xlsx\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: `path` does not exist: 'https://github.com/awalker89/openxlsx/raw/master/inst/readTest.xlsx'\n```\n\n\n:::\n:::\n\n\n[`openxlsx`](https://ycphs.github.io/openxlsx/index.html) 패키지는 이러한 문제를 해결할 수 있게 해준다. 정말 다양한 함수를 제공하지만 `read.xlsx()` 함수가 URL을 통해 엑셀 데이터를 불러오는데 사용된다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(openxlsx)\nxlsx_data <- read.xlsx(\"https://github.com/awalker89/openxlsx/raw/master/inst/readTest.xlsx\")\nxlsx_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Var1 Var2   Var3 Var4  Var5         Var6 Var7\n1   TRUE    1   1.00    a 42042 3209324 This   NA\n2   TRUE   NA     NA    b 42041         <NA>   NA\n3   TRUE    2   1.34    c 42040         <NA>   NA\n4  FALSE    2     NA <NA>    NA         <NA>   NA\n5  FALSE    3   1.56    e    NA         <NA>   NA\n6  FALSE    1   1.70    f 42037         <NA>   NA\n7     NA   NA     NA <NA> 42036         <NA>   NA\n8  FALSE    2  23.00    h 42035         <NA>   NA\n9  FALSE    3  67.30    i 42034         <NA>   NA\n10    NA    1 123.00 <NA> 42033         <NA>   NA\n```\n\n\n:::\n:::\n\n\n## 웹스크레이핑\n\n웹스크레이핑(web scraping)이란 웹페이지로부터 특정한 데이터를 추출하는 것을 의미한다. R에서 웹스크레이핑은 rvest 패키지가 답당하는데, reaxl 패키지와 마찬가지로 tidyverse의 핵심 패키지는 아니기 때문에 따로 불러와야 한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(rvest)\n```\n:::\n\n\n### HTML 기초\n\n거의 모든 웹페이지는 HTML(HyperText Markup Language, 하이퍼텍스트 마크업 언어)로 만들어져 있다. HTML은 웹브라우저(web browser)를 통해 표출되는 사항(무엇이 어떻게)을 프로그래밍하는 마크업(markup) 언어이다. 웹스크레이핑 맥락에서 HTML에 대한 몇 가지 기초 사항은 숙지할 필요가 있다.\n\n-   웹페이지는 태그(tag)로 이루어져 있다. 각 태그는 시작 테그와 종료(끝) 태그로 구성되며, 둘 사이에 콘텐츠가 놓인다. 태그를 중심으로 개별 단위를 엘리먼트(element)라고 부르기도 한다.\n\n-   태그의 종류는 다양하다. 태그는 크게 세 가지로 구분되는데, 최상위인 html 태그, 웹페이지의 전반적인 구조를 결정하는 블록(block) 태그(예: hi, section, p, ol 태그 등), 블록 태그 내부의 특정 부분에만 적용되는 인라인(inline) 태그(예: b, i, a 태그 등)가 있다. 태그는 모두 100개 이상이 존재한다고 하는데, 그 중 많이 사용되는 것들은 다음과 같다.\n\n    -   html 태그: 모든 웹페이지에 존재하는 최상위 태그로, 그 하위에 head 태그와 body 태그를 가져야함.\n\n    -   head 태그: 웹페이지의 제목이나 머릿말과 같은 메타데이터로 구성\n\n    -   body 태그: 본문에 해당하는 부분\n\n    -   title 태그: 타이틀바에 입력될 텍스트 지정\n\n    -   link 태그: 외부 css 파일을 연결\n\n    -   meta 태그: 문서의 다양한 정보를 제공\n\n    -   script 태그: 외부 js 파일을 연결하거나 javascript 코드를 입력\n\n    -   div 태그: 상자 영역을 만듦\n\n    -   span 태그: 요소 일부분만 변경하고자 할 때 사용하는 것으로 인라인(inline tag)의 대표\n\n    -   img 태그: 이미지를 가져옴\n\n    -   h 태그: 제목 태그\n\n        -   h1, h2, h3, h4, h5, h6\n\n    -   table 태그: 표를 나타냄\n\n    -   p 태그: 문단을 표현\n\n    -   ul 태그: 번호가 없는 리스트\n\n    -   ol 태그: 번호가 있는 리스트\n\n    -   li 태그: ul 태그나 ol 태그 내에서 사용\n\n    -   br 태그: 줄 바꿈 기능을 하는 단독 태그\n\n    -   b 태그: 굵은 글씨 지정\n\n    -   i 태그: 이탤릭체 글씨 지정\n\n    -   a 태그: 링크 이동\n\n    -   input 태그: 입력창을 생성\n\n    -   button 태그: 버튼을 생성\n\n    -   select 태그: 선택 박스 창을 생성\n\n    -   form 태그: 데이터 전송\n\n-   다양한 태그들이 복잡한 다단계 위계 구조를 이룬다.\n\n[![HTML의 위계 구조 (\\<https://odinuv.cz/articles/html/\\>)](https://odinuv.cz/common/css/html.svg){#fig-html-hier}](https://odinuv.cz/articles/html/)\n\n-   태그는 속성(attribute)을 가질 수 있다.\n\n    -   특별히 중요한 속성: class, identity\n\n    -   p나 div 태그와 같은 블록 태그: height, width, margin, padding\n\n    -   img 태그: src, alt, width, height\n\n    -   a 태그: href\n\n### HTML 요소의 선택\n\nHTML 요소란 태그와 속성으로 확정가능한 HTML의 특정 부분을 의미하는 것으로, 웹스크레이핑의 타깃의 주소와 같은 것이다.\n\n#### 단일 수준에서의 요소 선택\n\n선택 대상을 효과적으로 규정하기 위해 사용되는 것이 CSS(cascading style sheet) 선택자(selector)이다. CSS는 HTML의 시각적 구성을 통제하는 툴인데, html의 특정 부분을 지칭하는 작은 언어(miniature language)를 가지고 있고, CSS 선택자라 부른다.\n\n| 선택 대상              | 선택자(selector) | 결과                                                                                      |\n|------------------------|------------------|-------------------------------------------------------------------------------------------|\n| 태그(tag)              | table            | 모든 table 요소를 선택                                                                    |\n| 클래스(class)          | .className       | \"className\"이라는 class 속성을 갖는 모든 요소                                             |\n| 아이디(id)             | #idName          | \"idName\"이라는 id 속성을 갖는 모든 요소                                                   |\n| tag과 class의 결합     | tag.class        | \"tag\"이라는 tag의 \"class\"라는 class 속성을 가진 모든 요소                                 |\n| class1와 class2의 결합 | .class1.class2   | \"class1\"이라는 이름의 class 속성과 \"class2\"라는 이름의 class 속성을 동시에 갖는 모든 요소 |\n\n#### 하위 요소의 선택\n\n동일 수준에서 한 요소를 선택한 이후 그 하위에 있는 요소를 위계적으로 선정하는 과정이다. 만약 div 태그의 하위에 있는 span 태그의 하위에 있는 a 태그를 선택하고 싶다면 태그의 위계에 따라 요소를 나열하면 된다(div span a).\n\n#### 정확한 선택자의 확인\n\n정확한 선택자를 확인하는 것이 웹스크레이핑의 관건이다. 보통 해당 웹페이지에서 오른쪽 마우스 버튼을 누른 뒤 \"검사\"를 선택하여 이리저리 살펴보아야 한다. [SelectorGadget](https://rvest.tidyverse.org/articles/selectorgadget.html)과 같은 브라우저 확장 프로그램이 도움이 될 수 있다. 링크로 들어가면 간단한 사용 방법을 살펴볼 수 있다.\n\n### 웹스크레이핑 단계와 rvest 함수\n\n1단계는 웹페이지 읽기 단계이다.\n\n`read_html()` 함수를 이용해 웹페이지를 읽어 들인다.\n\n2단계는 HTML 요소의 선택 단계이다.\n\n-   `html_element()`함수\n\n    -   하나의 요소만 리턴\n\n    -   주로 관측개체를 추출할 때 사용\n\n-   `html_elements()`함수\n\n    -   요소의 리스트를 리턴\n\n    -   주로 변수를 추출할 때 사용\n\n3단계는 하위 요소의 선택 단계이다. 여기에는 두 가지 방식이 있다.\n\n-   `html_element()`함수나 `html_elements()` 함수 속에 요소들을 위계에 따라 나열을 하되 요소 사이에 공란을 둔다.\n\n-   파이프 오퍼레이터를 활용한다.\n\n4단계는 요소로부터 데이터를 추출하는 단계이다. 다양한 함수를 적용할 수 있다.\n\n-   `html_table()`: 테이블 데이터를 추출한다.\n\n-   `html_text()`: 텍스트 데이터를 추출한다.\n\n-   `html_text2()`: 불필요한 부호와 공란을 제거한 텍스트 데이터를 추출한다.\n\n-   `html_attr()`과 `html_attrs()`: 하위 속성 데이터를 추출한다.\n\n### 간단한 웹스크레이핑의 예\n\n#### 데이터\n\n`rvest` 패키지에 내장되어 있는 예제([starwars](https://rvest.tidyverse.org/articles/starwars.html))를 활용하여 실습을 진행한다. 웹페이지에 접속하여 어떤 내용으로 구성되어 있는지 확인한다. 앞에서 언급한 것처럼, 오른쪽 마우스 버튼을 누르고 \"검사\"를 선택하면 해당 패이지의 HTML 구조를 살펴볼 수 있다. 모든 영화가 다음과 같은 동일한 구조를 가지고 있음을 확인한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n<section>\n  <h2 data-id=\"1\">The Phantom Menace</h2>\n  <p>Released: 1999-05-19</p>\n  <p>Director: <span class=\"director\">George Lucas</span></p>\n  \n  <div class=\"crawl\">\n    <p>...</p>\n    <p>...</p>\n    <p>...</p>\n  </div>\n</section>\n```\n:::\n\n\n우리의 웹스크레이핑 목적은 7개의 영화별로 제목(title), 연도(year), 감독(director), 요약(intro) 속성을 갖는 데이터 프레임을 생성하는 것이다.\n\n#### 웹스크레이핑의 과정\n\nread_html() 함수를 이용하여 웹페이지를 읽어 들인다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://rvest.tidyverse.org/articles/starwars.html\"\nhtml <- read_html(url)\n```\n:::\n\n\n\"section\" 태그 요소를 선택한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsection <- html |> \n  html_elements(\"section\")\nsection\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{xml_nodeset (7)}\n[1] <section><h2 data-id=\"1\">\\nThe Phantom Menace\\n</h2>\\n<p>\\nReleased: 1999 ...\n[2] <section><h2 data-id=\"2\">\\nAttack of the Clones\\n</h2>\\n<p>\\nReleased: 20 ...\n[3] <section><h2 data-id=\"3\">\\nRevenge of the Sith\\n</h2>\\n<p>\\nReleased: 200 ...\n[4] <section><h2 data-id=\"4\">\\nA New Hope\\n</h2>\\n<p>\\nReleased: 1977-05-25\\n ...\n[5] <section><h2 data-id=\"5\">\\nThe Empire Strikes Back\\n</h2>\\n<p>\\nReleased: ...\n[6] <section><h2 data-id=\"6\">\\nReturn of the Jedi\\n</h2>\\n<p>\\nReleased: 1983 ...\n[7] <section><h2 data-id=\"7\">\\nThe Force Awakens\\n</h2>\\n<p>\\nReleased: 2015- ...\n```\n\n\n:::\n:::\n\n\n제목과 감독명에 대한 선택자가 각각 h2 태그와 director 클래스에 들어가 있음을 알 수 있다. `html_element()`와 `html_text2()` 함수를 활용하여 데이터를 추출한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsection |> \n  html_element(\"h2\") |> \n  html_text2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The Phantom Menace\"      \"Attack of the Clones\"   \n[3] \"Revenge of the Sith\"     \"A New Hope\"             \n[5] \"The Empire Strikes Back\" \"Return of the Jedi\"     \n[7] \"The Force Awakens\"      \n```\n\n\n:::\n\n```{.r .cell-code}\nsection |> \n  html_element(\".director\") |> \n  html_text2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"George Lucas\"     \"George Lucas\"     \"George Lucas\"     \"George Lucas\"    \n[5] \"Irvin Kershner\"   \"Richard Marquand\" \"J. J. Abrams\"    \n```\n\n\n:::\n:::\n\n\n### 웹스크레이핑의 실제 1: 테이블이 하나 있는 경우\n\n위키피디어의 한 항목(List of countries and dependencies by population)에는 표 하나가 포함되어 있다. 해당 표의 데이터를 수집한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population\"\nmy_table <- url |> \n  read_html() |> \n  html_element(\"table\") |> \n  html_table()\nmy_table\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 241 × 7\n   ``      Location    Population `% ofworld` Date  Source (official or …¹ ``   \n   <chr>   <chr>       <chr>      <chr>       <chr> <chr>                  <chr>\n 1 –       World       8,104,769… 100%        5 Ma… UN projection[3]       \"\"   \n 2 1/2 [b] China       1,409,670… 17.4%       31 D… Official estimate[5]   \"[c]\"\n 3 1/2 [b] India       1,400,744… 17.3%       1 Ma… Official projection[6] \"[d]\"\n 4 3       United Sta… 335,893,2… 4.1%        1 Ja… Official estimate[7]   \"[e]\"\n 5 4       Indonesia   279,118,8… 3.4%        1 Ju… National annual proje… \"\"   \n 6 5       Pakistan    241,499,4… 3.0%        1 Ma… 2023 census result[9]  \"[f]\"\n 7 6       Nigeria     223,800,0… 2.8%        1 Ju… Official projection[1… \"\"   \n 8 7       Brazil      203,080,7… 2.5%        1 Au… 2022 census result[11] \"\"   \n 9 8       Bangladesh  169,828,9… 2.1%        14 J… 2022 census result[12] \"\"   \n10 9       Russia      146,150,7… 1.8%        1 Ja… Official estimate[13]  \"[g]\"\n# ℹ 231 more rows\n# ℹ abbreviated name: ¹​`Source (official or fromthe United Nations)`\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_table <- my_table |> \n  select(-1, -7) |> \n  rename(\n    location = \"Location\",\n    population = \"Population\",\n    pop_pct = \"% ofworld\",\n    date = \"Date\",\n    source = \"Source (official or fromthe United Nations)\"\n  ) |> \n  mutate(\n    population = str_remove_all(population, \",\"),\n    population = as.numeric(population),\n    pop_pct = str_remove(pop_pct, \"%\"),\n    pop_pct = as.numeric(pop_pct),\n    date = dmy(date)\n  )\nmy_table\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 241 × 5\n   location      population pop_pct date       source                       \n   <chr>              <dbl>   <dbl> <date>     <chr>                        \n 1 World         8104769000   100   2024-05-05 UN projection[3]             \n 2 China         1409670000    17.4 2023-12-31 Official estimate[5]         \n 3 India         1400744000    17.3 2024-03-01 Official projection[6]       \n 4 United States  335893238     4.1 2024-01-01 Official estimate[7]         \n 5 Indonesia      279118866     3.4 2023-07-01 National annual projection[8]\n 6 Pakistan       241499431     3   2023-03-01 2023 census result[9]        \n 7 Nigeria        223800000     2.8 2023-07-01 Official projection[10]      \n 8 Brazil         203080756     2.5 2022-08-01 2022 census result[11]       \n 9 Bangladesh     169828911     2.1 2022-06-14 2022 census result[12]       \n10 Russia         146150789     1.8 2024-01-01 Official estimate[13]        \n# ℹ 231 more rows\n```\n\n\n:::\n:::\n\n\n### 웹스크레이핑의 실제 2: 테이블이 둘 이상인 경우\n\n위키피디어의 한 항목(List of FIPS country codes)에는 동일한 내용에 대해 여러 개의 표가 나타나 있다. 개별 표의 데이터를 수집한 후 결합하여 단일한 데이터 프레임을 구성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://en.wikipedia.org/wiki/List_of_FIPS_country_codes\"\nmy_tables <- url |> \n  read_html() |> \n  html_elements(\"table\") |> \n  html_table() |> \n  bind_rows()\nmy_tables\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 283 × 10\n   Code    `Short-form name` .mw-parser-output .n…¹ .mw-parser-output .n…² ...3 \n   <chr>   <chr>             <chr>                  <chr>                  <chr>\n 1 .mw-pa… Aruba             <NA>                   <NA>                   <NA> \n 2 AC      Antigua and Barb… <NA>                   <NA>                   <NA> \n 3 AE      United Arab Emir… <NA>                   <NA>                   <NA> \n 4 AF      Afghanistan       <NA>                   <NA>                   <NA> \n 5 AG      Algeria           <NA>                   <NA>                   <NA> \n 6 AJ      Azerbaijan        <NA>                   <NA>                   <NA> \n 7 AL      Albania           <NA>                   <NA>                   <NA> \n 8 AM      Armenia           <NA>                   <NA>                   <NA> \n 9 AN      Andorra           <NA>                   <NA>                   <NA> \n10 AO      Angola            <NA>                   <NA>                   <NA> \n# ℹ 273 more rows\n# ℹ abbreviated names:\n#   ¹​`.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:\"[ \"}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:\" ]\"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteGeocode systems...1`,\n#   ²​`.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:\"[ \"}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:\" ]\"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteGeocode systems...2`\n# ℹ 5 more variables: ...4 <chr>, ...5 <chr>, ...6 <chr>, X1 <chr>, X2 <chr>\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_tables <- my_tables |> \n  select(1, 2) |> \n  rename(\n    code = \"Code\", \n    short_name = \"Short-form name\"\n  ) |> \n  mutate(\n    code = str_extract(code, \"[A-Z][A-Z]\")\n  )\nmy_tables\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 283 × 2\n   code  short_name          \n   <chr> <chr>               \n 1 AA    Aruba               \n 2 AC    Antigua and Barbuda \n 3 AE    United Arab Emirates\n 4 AF    Afghanistan         \n 5 AG    Algeria             \n 6 AJ    Azerbaijan          \n 7 AL    Albania             \n 8 AM    Armenia             \n 9 AN    Andorra             \n10 AO    Angola              \n# ℹ 273 more rows\n```\n\n\n:::\n:::\n\n\n### 웹스크레이핑의 실제 3: 네이버 뉴스 데이터 수집하기\n\n#### 기간을 설정하지 않은 경우\n\n네이버 신문(<https://news.naver.com/>)에 키워드(예: 지방소멸)로 검색한 기사를 제목과 내용으로 나누어 데이터를 수집한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://search.naver.com/search.naver?where=news&ie=utf8&sm=nws_hty&query=%EC%A7%80%EB%B0%A9%EC%86%8C%EB%A9%B8\"\ntitle <- url |> \n  read_html() |> \n  html_elements(\".news_tit\") |> \n  html_text2()\ncontents <- url |> \n  read_html() |> \n  html_elements(\".dsc_txt_wrap\") |> \n  html_text2()\nmy_news <- tibble(title, contents)\nmy_news\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n   title                                                               contents \n   <chr>                                                               <chr>    \n 1 \"[지방소멸 경고등] 위기 속 작은 희망…영월 옥동초교의 실험\"          \"연합뉴… \n 2 \"지자체 ‘지방소멸기금’ 최대 160억 지원\"                             \"지방소… \n 3 \"접경지, 청년 창업 ‘확대’…지방소멸 ‘극복’ 시도\"                     \"[앵커] …\n 4 \"우수 지자체에 지방소멸대응기금 집중 지원한다…배분체계 개선\"        \"행정안… \n 5 \"저출산율·양극화… 韓사회는 왜 소멸의 길을 가고 있나\"                \"사람들… \n 6 \"[인터뷰] 천하람 \\\"저출산·지방소멸·정치개혁…미래세대 이슈에 집중\\\"\" \"또 지방…\n 7 \"[매일경제TV] 지방 소멸 막기 위한 정책\"                             \"인구 감…\n 8 \"지역소멸 시대, 농협의 역할에 변화가 필요하다\"                      \"농식품… \n 9 \"여당 재선 엄태영 \\\"지방소멸위기 처한 제천·단양 반드시 살리겠다\\\"\"  \"'실천하…\n10 \"“강진군, 지역소멸 위기 극복 인구정책 롤모델 급부상”\"               \"군에 따…\n```\n\n\n:::\n:::\n\n\n::: callout-warning\n한 번에 10개의 케이스밖에 수집되지 않는다. 방도를 강구해야 한다.\n:::\n\n#### 기간을 설정한 경우\n\n2023년 1월 1일부터 2023년 12월 31일까지로 기간을 설정하여 데이터를 수집한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart.date <- \"2023.01.01\"\nend.date <- \"2023.12.31\"\nurl <- str_c(\"https://search.naver.com/search.naver?where=news&query=%EC%A7%80%EB%B0%A9%EC%86%8C%EB%A9%B8&sm=tab_opt&sort=0&photo=0&field=0&pd=3&ds=\", start.date, \"&de=\", end.date, \"&docid=&related=0&mynews=0&office_type=0&office_section_code=0&news_office_checked=&nso=so%3Ar%2Cp%3Afrom20230101to20231231&is_sug_officeid=0&office_category=0&service_area=0\")\ntitle <- url |> \n  read_html() |> \n  html_elements(\".news_tit\") |> \n  html_text2()\ncontents <- url |> \n  read_html() |> \n  html_elements(\".dsc_txt_wrap\") |> \n  html_text2()\nmy_news <- tibble(title, contents)\nmy_news\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n   title                                                            contents    \n   <chr>                                                            <chr>       \n 1 \"정부, 지방소멸 극복 위한 '지역활력타운' 확대 추진\"              \"행정안전부…\n 2 \"구미 지방소멸 극복 위해 교육 혁신 나서\"                         \"구미시가 … \n 3 \"[이제는 지방시대] 드론을 미래 먹거리로… 포천시 ‘기회발전특구’ … \"기회발전특…\n 4 \"순천시, (송년사) 지방소멸을 다시 세울 새로운 이정표\"            \"ⓒ사진제공… \n 5 \"괴산군 \\\"지방소멸 적극대응 올해 두드러진 성과\\\"\"                \"충북 괴산… \n 6 \"지역소멸 위기에 희망을 던져준 고향사랑기부\"                     \"특히 전남… \n 7 \"[朝鮮칼럼] 인구 소멸·지방 소멸… 역발상으로 넘자\"                \"인구 소멸,…\n 8 \"'밑 빠진 독' 지역소멸 대응책에…'생활인구를 잡아라'\"             \"원래 살던 …\n 9 \"철원플라즈마硏, 지방소멸대응기금사업 2024년 사업설명회 열어\"    \"철원플라즈…\n10 \"[신년사설] 인구재앙 국가소멸을 두고만 볼 것인가\"                \"이런 가운… \n```\n\n\n:::\n:::\n\n\n::: callout-warning\n마찬가지로 단 10개의 케이스만 수집되는 상황이 발생함.\n:::\n\n## API의 활용\n\n### 정의\n\nAPI(application programming interface)는 복수의 프로그램들이 서로 상호작용하는 방법을 정의하는 일련의 규칙을 의미한다. 다른 말로 하면 한 프로그램이 다른 프로그램의 기능들을 불러 사용할 수 있게 해주는 통로를 의미한다.\n\n이런 API 개념이 데이터 수집과 관련하여 중요한 의미를 가지는 것은 개방 API(open API) 때문이다. 개방 API는 데이터를 보유하고 있는 공적 기관이 데이터의 사용 권한을 사용자들에게 부여함으로써 데이터에 대한 접근 가능성을 높여주기 때문이다.\n\n만일 개방 API가 존재하는 상황이라면 데이터사이언스의 가장 좋은 데이터 수집 방법은 오픈 API를 활용하는 것이다.\n\n### R에서 API를 활용한 데이터 수집\n\n최근까지 API를 활용한 데이터 수집에는 `httr`과 `jsonlite`라는 두 개의 패키지가 함께 사용되었다. 그런데 최근 `httr`의 완전 업그레이드 버전인 `httr2`가 선을 보이면서 이 패키지를 단독으로 활용하는 방식이 주목 받고 있다(<https://httr2.r-lib.org/>). `httr2`는 R의 `tidyverse` 운동을 이끌고 있는 해들리 위컴(Hadley Wickham)이 `tidyverse`의 철학에 맞추어 `httr` 패키지를 발전시킨 것이다. 이러한 R 패키지를 직접 활용하는 것이 가장 좋은 방법이겠지만, 초보자의 경우 다소간의 어려움을 겪을 수 있다. httr2 함수가 다른 패키지의 함수에 비해 개념적으로 이해하기 어려운 측면이 있고, 데이터를 획득하는 구체적인 과정이 API 마다 조금씩 달라 응용력이 발휘되어야 하는 상황이 발생하기 때문이기도 하다.\n\n이러한 어려움을 들어주기 위해 일종의 연결 패키지들이 개발되어 있는데, 이러한 패키지를 래퍼 패키지(wrapper package)라고 부른다. 래퍼 패키지들은 사용자와 API 수집용 패키지 사이에서 일종의 가교 역할을 하는 것으로 사용자들이 사용하기 편한 함수를 제공함으로써 보다 손쉽게 오픈 API를 활용할 수 있게 도와준다. 예를 들어, 구글맵스플랫폼(Google Maps Platform)에 API로 접근해 다양한 기능을 활용할 수 있게 도와주는 `googleway`와 같은 패키지가 좋은 예가 될 수 있다.\n\n### API를 활용한 KOSIS 데이터의 수집\n\nKOSIS를 포함한 많은 대한민국의 데이터 포털은 개방 API 서비스를 제공하고 있다. KOSIS는 공유서비스 홈페이지([https://kosis.kr/openapi/](https://kosis.kr/openapi/index.jsp){.uri})를 통해 Open API를 통한 데이터 수집을 권장하고 있다. 개발 가이드(<https://kosis.kr/openapi/devGuide/devGuide_0101List.do>)를 통해 R을 포함한 다양한 프로그래밍 언어에서 KOSIS의 개방 API 서비스를 활용하는 구체적인 코드를 제공하고 있기도 하다. 가이드 북을 읽어 보면, 앞에서 언급한 R의 `httr`, `jsonlite`, `rvest`와 같은 패키지가 활용됨을 알 수 있다.\n\n앞에서 설명한 것처럼, API용 패키지를 직접 사용할 수도 있지만, 래퍼 패키지가 존재하기만 한다면 그것을 활용하는 것이 훨씬 손쉬운 옵션일 수 있다. 놀랍게도 한국의 주석훈(Seokhoon Joo)이라는 분이 그러한 기능을 하는 `kosis`(<https://cran.r-project.org/web/packages/kosis/index.html>)라는 패키지를 이미 개발해 두었고, 그것을 활용하고자 한다.\n\n실습 주제는 2022년 센서스 인구 기준으로 전국의 17개 시도별 '지방소멸위험지수'를 계산하고 그래프의 형태로 표현하는 것이다.\n\n#### KOSIS에서 API KEY 받기\n\n-   KOSIS 공유서비스 웹페이지(<https://kosis.kr/openapi/>) 접속\n\n-   상단의 \\[활용신청\\] 탭 클릭\n\n    -   통계청의 ONE-ID로 통합로그인(없으면 회원가입 필수)\n\n-   활용신청하여 사용자 인증키 획득\n\n    -   사용자 인증키는 마이페이지에서 언제든 확인 가능\n\n#### 패키지 설치 및 인증키 등록\n\n우선 `kosis` 패키지를 오른쪽 하단 윈도우의 Packages 탭을 활용하여 인스톨한다. 이후에 아래와 같이 `kosis`와 `tidyverse` 패키지를 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(kosis)\nlibrary(tidyverse)\n```\n:::\n\n\nkosis 패키지의 `kosis.setKey()` 함수를 이용하여 인증키를 등록한다. Your Key Here 자리에 부여받은 인증키를 붙여 넣는다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkosis.setKey(apikey = \"Your Key Here\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n#### 데이터 추출\n\n다양한 방법으로 데이터를 추출할 수 있지만, KOSIS 홈페이지와 `kosis` 패키지의 특성을 고려할 때, `getStatDataFromURL()` 함수를 활용하는 것이 가장 좋은 방식인 것으로 보인다. 이 함수를 이용한 데이터 추출은 다음의 두 단계 과정을 거친다.\n\n-   KOSIS에서 필요한 데이터의 위치에 대한 URL 정보를 획득한다.\n\n-   `getStatDataFromURL()` 함수를 활용하여 데이터를 추출한다.\n\n다음의 단계를 수행한다.\n\n첫째, KOSIS(<https://kosis.kr/>)에 로그인한다. 이것은 api key를 활용하기 위한 필수 조건이다.\n\n둘째, 인구 센서스 데이터를 바탕으로 시도별 지방소멸위험지수를 계산하고자 하기 때문에, 최신 인구 센서스의 지역별 20\\~39세의 여성 인구와 65세 이상의 전체 인구에 대한 데이터가 필요하다. KOSIS 홈페이지를 탐색하여 필요한 데이터가 있는 위치를 찾아간다.\n\n-   \\[국내통계\\]-\\[주제별 통계\\]-\\[인구\\]-\\[인구총조사\\]-\\[인구부문\\]-\\[총조사인구(2015년 이후)\\]-\\[전수부문 (등록센서스, 2015년 이후)\\]-\\[전수기본표\\]-\\[연령 및 성별 인구\\]\n\n셋째, '조회설정'을 클릭하여 다음과 같이 선택한다.\n\n-   항목: '총인구(명)', '총인구_남자(명)', '총인구_여자(명)'만 선택(더 많은 항목을 선택하면 데이터가 너무 커 에러가 발생)\n\n-   행정구역별(읍면동): '1 레벨'과 '2 레벨' 선택('1 레벨'은 시도 수준, '2 레벨'은 시군구 수준)\n\n넷째, '조회설정' 창을 없앤 후(조회창의 왼편 가운데의 화살표 클릭), 표의 오른편 상단에 있는 여러개 탭 중 'OPENAPI' 탭을 클릭한다. 다음과 같이 선택한다.\n\n-   조회기간 설정: '기간설정' 버턴을 누른 후, 기간설정이 2022\\~2022년인지 확인한다.\n\n-   응답필드 설정: 하나씩 눌러 모두 선택한 후, 'URL생성' 탭을 클릭한다. 그리고 나서 'URL 복사' 탭을 클릭한다. URL 속에 api key가 포함되어 있음을 확인한다.\n\n다섯째, 다음과 같이 실행한다. \"Your URL\" 자리에 복사한 URL를 붙여 넣는다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyour_url <- \"Your URL\"\ndata_api <- getStatDataFromURL(url = your_url)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n#### 데이터 정리 및 변형\n\n아래와 같이 데이터를 정리 및 변형한다. 최종적으로 지역별 지역소멸위험지수를 산출한다. 조교의 도움을 받아, 각 과정에서 무엇을 한 것인지 이해한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data_api |> \n  select(C1, C1_NM, C2, C2_NM, ITM_ID, ITM_NM, DT) |> \n  mutate(\n    across(c(C1, DT), as.numeric),\n    ITM_ID = case_match(\n    ITM_ID, \"T00\" ~ \"T\",\n    \"T01\" ~ \"M\",\n    \"T02\" ~ \"F\"),\n  ) |>\n  unite(\"gender_age\", ITM_ID, C2_NM, sep = \"_\") |> \n  pivot_wider(\n    id_cols = c(C1, C1_NM),\n    names_from = gender_age,\n    values_from = DT\n  ) |> \n  mutate(\n    index = (`F_20~24세` + `F_25~29세` + `F_30~34세` + `F_35~39세`) / `T_65세이상`\n  ) |> \n  select(\n    C1, C1_NM, index\n  ) \n```\n:::\n\n\n시도 데이터와 시군구 데이터를 분리하여 저장한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_sido <- data |> \n  filter(C1 > 10, C1 < 100) \ndata_sigungu <- data |> \n  filter(C1 > 100 & !C1_NM %in% c(\"동부\", \"면부\", \"읍부\") & str_sub(C1, 5, 5) == 0)\n```\n:::\n\n\n#### 그래프 작성\n\n인구소멸위험지수 연구에서 주로 사용되는 5개의 위험도 클래스의 구분법을 적용하고, 위험도 클래스별로 특정한 색상을 적용하고, 그래프의 범례에 5개의 클래스가 모두 나타나게 하려다보니 코드가 조금 복잡해졌다. 그러나 익혀두면 다른 그래프 작성에 도움이 되니, 조교의 도움을 받아 살펴보도록 한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_sido <- data_sido |> \n  mutate(\n    index_class = case_when(\n      index < 0.2 ~ \"1\",\n      index >= 0.2 & index < 0.5 ~ \"2\",\n      index >= 0.5 & index < 1.0 ~ \"3\",\n      index >= 1.0 & index < 1.5 ~ \"4\",\n      index >= 1.5 ~ \"5\"\n    ),\n    index_class = factor(index_class, levels = as.character(1:5))\n  )\n\nclass_color <- c(\"1\" = \"#d7191c\", \"2\" = \"#fdae61\",\n                 \"3\" = \"#ffffbf\", \"4\" = \"#a6d96a\", \n                 \"5\" = \"#1a9641\")\ndata_sido |> \n  ggplot(aes(x = index, y = fct_reorder(C1_NM, index))) +\n  geom_col(aes(fill = index_class), show.legend = TRUE) +\n  geom_text(aes(label = format(round(index, digits = 3), \n                               nsmall = 3)), hjust = -0.1) +\n  scale_x_continuous(limits = c(0, 1.5)) +\n  scale_fill_manual(name = \"Classes\", \n                    labels = c(\"< 0.2\", \"0.2 ~ 0.5\", \"0.5 ~ 1.0\", \n                               \"1.0 ~ 1.5\", \">= 1.5\"), \n                    values = class_color, drop = FALSE) +\n  labs(title = \"인구소멸위험지수, 2022년\", \n       x = \"인구소멸위험지수\", \n       y = \"\")\n```\n\n::: {.cell-output-display}\n![](exec_07_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n### API를 활용한 NAVER 뉴스 데이터의 수집\n\n#### NAVER Developer\n\n네이버의 API를 활용하기 위해서는 네이버 디벨로퍼(<https://developers.naver.com/main/>)에서 오픈 API를 신청해야 한다. 절차를 정리하면 다음과 같다.\n\n첫째, \\[Documents\\]에서 'API 공통 가이드'를 살펴본다. 특히 비로그인 방식 오픈 API가 유요한데, 그 중에서 '검색' 카테고리에 해당하는 뉴스, 백과사전, 블로그 등 다양한 검색 서비스에 주목한다.\n\n둘째, \\[Products\\]-\\[서비스 API\\]-\\[검색\\](<https://developers.naver.com/products/service-api/search/search.md>)을 선택한다. 여기에는 '오픈 API 이용 신청'과 '개발 가이드 보기'가 있는데, 우선 '개발 가이드 보기'를 숙지한 후 '오픈 API 이용 신청'을 한다. '개발 가이드 보기'에서 특히 다음의 몇 가지에 주목한다.\n\n-   오픈 API 이용 신청 절차\n\n-   ClientID와 Client Secret 개념\n\n-   요청 URL: https://openapi.naver.com/v1/search/news.json\n\n-   파라미터: query, display, start, sort\n\n셋째, '오픈 API 이용 신청'을 한다. 다음의 몇 가지에 주목한다.\n\n-   애플리케이션 이름: 아무 이름이나 입력\n\n-   사용 API: '검색'이 선택된 상태를 유지\n\n-   비로그인 오픈 API 서비스 환경: 'WEB 설정'을 선택\n\n-   웹 서비스 URL (최대 10개): 'http://localhost' 입력\n\n#### `httr2` 패키지 활용: 처음 100개 검색 결과 추출\n\n'지방소멸'을 검색어로 하여 최초의 100개 검색 결과에 대한 데이터(특히, 제목과 내용)를 수집한다.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr2)\nsearch <- \"지방소멸\"\nyour_url <- \"https://openapi.naver.com/v1/search/news.json\"\nresult_naver <- request(your_url) |> \n  req_headers(\n    \"X-Naver-Client-ID\" = your_ClientID,\n    \"X-Naver-Client-Secret\" = your_Client_Secret\n  ) |> \n  req_url_query(\n    query = search,\n    display = 100,\n    start = 1,\n    sort = \"date\"\n  ) |> \n  req_perform() |> \n  resp_body_json() \nnaver_data <- data.frame(t(sapply(result_naver$items, data.frame)))\n```\n:::\n\n\n#### `httr2` 패키지 활용: `for` 함수를 이용하여 1,000개 검색 결과 추출\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_news <- data.frame()\nsearch <- \"지방소멸\"\nfor(i in 1:10){\n  news <- request(your_url) |> \n    req_headers(\n      \"X-Naver-Client-ID\" = your_ClientID,\n      \"X-Naver-Client-Secret\" = your_Client_Secret\n    ) |> \n    req_url_query(\n      query = search,\n      display = 100,\n      start = i,\n      sort = \"date\"\n    ) |> \n    req_perform() |> \n    resp_body_json()\n  body <- data.frame(t(sapply(news$item, data.frame)))\n  all_news <- bind_rows(all_news, body)\n}\n```\n:::\n",
    "supporting": [
      "exec_07_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}