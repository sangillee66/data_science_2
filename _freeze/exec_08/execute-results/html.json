{
  "hash": "032326c72b8582f35e82c0ad9ced7c9b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"데이터로 소통하기: Quarto 입문\"\nauthor: 이상일(서울대학교 지리교육과)\ndate-modified: last-modified\nnumber-sections: true\nformat: \n  html: \n    toc: true\ncode-link: true\ncode-copy: true\nexecute: \n  warning: false\n  error: false\n  freeze: auto\neditor: visual\nbibliography: references.bib\n---\n\n\n## 실습 개요 {.unnumbered}\n\n이 실습은 데이터사이언스 과정의 마지막 단계로 제시되고 있는 '소통(communication)' 혹은 '데이터로 소통하기'를 위한 핵심 도구로서의 [Quarto](https://quarto.org/)를 다룬다. 본 실습에서는 Quarto 다큐먼트의 기본 기능에 대해 다룬다.\n\n## Quarto란?\n\nQuarto는 \"과학적, 기술적 출판을 위한 오픈소스 시스템(an open-source scientific and technical publishing system)\"으로 정의되는데, 다양한 형식의 저작물(연구 논문, 프레젠테이션, 대시보드, 웹사이트, 블로그, 서적 등)을 다양한 디지털 포맷(HTML, PDF, MS Word, ePub 등)으로 출판할 수 있게 해준다.\n\nQuarto는 연구 노트, 레포트, 블로그 등을 작성할 수 있게 해준다는 측면에서 '개인적' 도구이지만, 다양한 규모의 프로젝트의 원할한 진행을 도와준다는 측면에서 '협업' 도구이며, 더 나아가 과학 커뮤니티 전체의 재현성(reproducibility) 고양에 도움을 줄 수 있다는 측면에서 '사회적' 도구이기도 하다.\n\n원래 R 커뮤니티에는 유사한 기능을 수행하는 [RMarkdown](https://rmarkdown.rstudio.com/)이라는 도구가 존재했고 여전히 많은 사람들이 사용하고 있다. Quarto는 기존의 RMarkdown에 '통합'이라는 키워드를 적용시켜 보다 발전된 형태의 저작 시스템으로 거듭난 것이다. 우선 Quarto는 다양한 오픈소스 프로그래밍 언어에서 사용될 수 있다(R, Python, Julia, Observable). 둘째, Quarto는 출판물의 다양한 형식에 구애되지 않는 일관성있는 저작 시스템을 제공한다.\n\n![](https://rstudio.github.io/cheatsheets/html/images/quarto-illustration.png)\n\nQuarto 다큐먼트의 기본 구문은 마크다운(markdown), 혹은 마크다운의 보다 특수한 형태로서의 팬독(pandoc) 마크다운이다. 마크다운 언어는 마크업(markup) 언어의 일종인데, 마크업 언어는 다큐먼트의 구조와 포맷을 관장하는 텍스트-엔코딩 시스템이다. 그런데 마크업 언어는 배우기 어렵다. 예를 들어, 대표적인 마크업 언어인 HTML은 수많은 태그의 복잡한 위계 구조를 가지고 있어 사용자 입장에서는 읽기도 어렵고, 쓰기도 어렵다. 마크다운 언어는 사용자가 보다 사용하기 쉬운 구문 구조를 제공함으로써 동일한 웹 결과물을 보다 용이하게 제작할 수 있게 도와준다. Quarto는 이러한 마크다운 언어에 기반하고 있다.\n\n프로그래밍 언어와의 관련성이라는 측면에서 보면, Quarto 다큐먼트는 기본적으로 워드프로세서에 프로그래밍 언어가 부가된 것으로 이해할 수 있다. 워드프로세서가 기본적으로 제공하는 텍스트 작성, 테이블 작성, 그래픽 삽입 등의 기능 외에 코드 편집, 코드 실행, 실행 결과 삽입 등의 기능이 함께 포함되어 있다. 이렇게 작성된 Quarto 다큐먼트는 `.qmd`라는 확장자를 갖는다. Quarto 다큐먼트를 렌더링하면 `knitr` 패키지가 마크다운 파일(.md)을 생성하고, pandoc이 그것들을 다양한 포맷의 산출물로 변환한다.\n\n![https://quarto.org/docs/get-started/hello/rstudio.html](https://quarto.org/docs/get-started/hello/images/rstudio-qmd-how-it-works.png)\n\n## Quarto 다큐먼트의 기본 구조\n\n@fig-example 을 바탕으로 Quarto 다큐먼트의 기본 구조를 설명하고자 한다. 왼쪽은 비주얼 에디터(visual editor)를 사용한 것이고, 오른쪽은 소스 에디터(source editor)를 사용한 것이다. 소스 에디터는 마크다운 구문을 그대로 사용하는 것이므로 마크다운의 기본 형식(<https://quarto.org/docs/authoring/markdown-basics.html>)에 대한 이해가 선행되어야 한다. 이에 반해 비주얼 에디터는 마치 워드프로세서를 다루듯 메뉴 형식으로 Quarto 다큐먼트를 작성할 수 있다. 비주얼 에디터에 대해서는 뒤에서 상세히 다루기로 한다.\n\n![Quarto의 기본 구조와 비주얼 에디터](https://quarto.org/docs/get-started/hello/images/rstudio-source-visual.png){#fig-example}\n\n@fig-example 의 왼쪽 그림에서 보다 잘 드러나는 것처럼, Quarto 다큐먼트는 크게 세 부분으로 나뉘어진다.\n\n-   YAML 해더(header)\n\n-   코드 청크(code chunk)\n\n-   마크다운 텍스트\n\n### YAML 해더\n\nYAML 해더는 Quarto 다큐먼트의 최상단에 위치하는 것으로, 일종의 메터데이터로 다큐먼트의 전반적인 사항을 관장한다. YAML 해더 부분은 세개의 대시 부호(---)를 통해 다른 부분과 구분된다.\n\nYAML 해더의 모든 요소는 기본적으로 `key: value`의 행태를 띤다. key는 항목이고, value는 해당 항목에 대한 옵션값이다. 위의 예에는 `title`, `format`, `editor`의 세 key가 사용되었는데, 제목은 \"Hello, Quarto\"이며, 산출 포맷은 HTML이며, quarto 다큐먼트 작성을 비주얼 에디터를 통해 할 것이라는 점을 명시하고 있다.\n\n다양한 key를 설정할 수 있으며(<https://quarto.org/docs/reference/formats/html.html>), 다음의 것들이 중요하다.\n\n| key              | 설명                                                               |\n|------------------|--------------------------------------------------------------------|\n| title            | 다큐먼트의 제목                                                    |\n| date             | 다큐먼트 작성 날짜                                                 |\n| author           | 다큐먼트 저자 이름                                                 |\n| format           | 다양한 포맷 관련 사항의 지정                                       |\n| toc              | 목차 삽입                                                          |\n| number-section   | 섹션 제목에 자동 번호 부여 여부                                    |\n| execute: echo    | 소스 코드의 포함 여부를 글로벌하게 설정, 보통 visual               |\n| execute: warning | 경고 메시지를 산출물에 나타나게 할지를 글로벌하게 설정, 보통 false |\n| editor           | 비주얼 에디터와 소스 에디터 중 선택, 보통 visual                   |\n\n### 코드 정크\n\n프로그래밍 언어의 코드가 들어가는 부분이다. R를 사용하는 경우 `{r}`로 시작한다. 데이터 불러오기, 정리하기, 변형하기, 시각화하기, 탐색하기, 수집하기와 관련된 모든 종류의 코드가 여기에 들어갈 수 있다. 보통 하나의 Quarto 다큐먼트에 다수의 코드 정크가 포함된다.\n\n각 코드 정크의 앞 부분에 해당 코드 정크와 관련된 다양한 옵션을 `#|` 형태로 삽입할 수 있다. YAML 해더에서처럼, `key: value`의 행태를 띤다. 가장 중요한 옵션은 코드 청크의 내용이나 실행 결과 등이 산출물에 어떻게 표현되는지를 결정하는 것들이다. 다음의 표는 코드를 실행할지의 여부, 코드를 보여줄지의 여부, 코드의 결과를 보여줄지의 여부, 생성되는 플롯을 보여줄지의 여부, 메시지나 경고문을 보여줄지의 여부 등을 관장하는 다양한 옵션을 정리한 것이다.\n\n| Option           | Run code | Show code | Output | Plots | Messages | Warnings |\n|------------------|:--------:|:---------:|:------:|:-----:|:--------:|:--------:|\n| `eval: false`    |    X     |           |   X    |   X   |    X     |    X     |\n| `include: false` |          |     X     |   X    |   X   |    X     |    X     |\n| `echo: false`    |          |     X     |        |       |          |          |\n| `results: hide`  |          |           |   X    |       |          |          |\n| `fig-show: hide` |          |           |        |   X   |          |          |\n| `message: false` |          |           |        |       |    X     |          |\n| `warning: false` |          |           |        |       |          |    X     |\n\n### 마크다운 텍스트\n\n워드프로세서처럼 텍스트를 작성한다. 섹션 헤더, 하이퍼링크(hyperlink), 이미지 등을 지정할 수 있고, 인라인 코드 청크(inline code chunk)도 삽입할 수 있다. 마크다운 텍스트의 작성에 비주얼 에디터는 큰 역할을 한다. 비주얼 에디터는 마크다운 언어의 사용자 편이성을 한번 더 강화한 것으로 볼 수 있다.\n\n비주얼 에디터는 다음의 메뉴로 구성된다. 워드프로세서와 비슷한 형태를 가지고 있음을 알 수 있다. 많이 사용되는 기능은 아이콘의 형태로 전면에 배치되어 있다.\n\n![](https://quarto.org/docs/visual-editor/images/visual-editing-toolbar.png)\n\n포맷(Format), 삽입(Insert), 테이블(Table) 속에 다양한 하위 기능들이 포함되어 있다. Quarto를 마스트하는데 비주얼 에디터의 기능을 숙달하는 것이 필수적이다.\n\n::: {layout-ncol=\"3\"}\n![](https://quarto.org/docs/visual-editor/images/visual-editing-format-menu.png)\n\n![](https://quarto.org/docs/visual-editor/images/visual-editing-insert-menu.png)\n\n![](https://quarto.org/docs/visual-editor/images/visual-editing-table-menu.png)\n:::\n\n## 실습 1: 기본 Quarto 다큐먼트의 작성\n\n### 새 Quarto 다큐먼트 열기\n\n**File** \\> **New File** \\> **Quarto Document**를 실행한다. Title과 Author란에 적절한 텍스트를 기입하고 아래에 위치한 Create 버튼을 클릭한다.\n\n![](images/clipboard-970877987.png){fig-align=\"center\"}\n\n### Quarto 다큐먼트의 작성\n\n아래와 같은 결과물이 나오도록 Quarto 다큐먼트를 작성한다. 조교의 도움을 받아 다른 것들도 실험해 본다.\n\n![렌더링 결과](https://quarto.org/docs/get-started/computations/images/rstudio-exec-echo-true-preview.png){#fig-result}\n\n### Quarto 다큐먼트의 렌더링\n\n아래의 그림에 나타나 있는 Render 버튼을 클릭해 다큐먼트를 렌더링한다. 결과는 오른편 하단의 Viewer 탭에 나타난다. 결과를 @fig-result 과 비교한다. 최종적인 html은 프로젝트 파일이 들어있는 폴더에 저장되어 있다.\n\n![](https://quarto.org/docs/get-started/hello/images/rstudio-render.png)\n\n## 실습 2: 개인 블로그 만들기\n\n### 새로운 Quarto Blog 프로젝트 시작하기\n\n**File** \\> **New Project** \\> **Create Project** \\> **Quarto Blog**를 선택한다.\n\n::: {layout-ncol=\"2\"}\n![](https://quarto.org/docs/websites/images/rstudio-project-new-directory.png)\n\n![](https://quarto.org/docs/websites/images/rstudio-project-blog.png)\n:::\n\n디렉토리 이름과 경로를 설정하고, 아래에 위치한 Create Project 버튼을 클릭한다.\n\n![](https://quarto.org/docs/websites/images/rstudio-project-blog-options.png)\n\n### 렌더링하여 결과를 살펴보기\n\nRender 버튼을 클릭하여 결과를 확인한다. 결과는 오른쪽 패널의 Viewer 탭에 나타난다. Viewer 탭의 Show in new window 아이콘을 클릭하면 웹브라우저 상에 결과를 나타낼 수 있다.\n\n![](https://quarto.org/docs/websites/images/rstudio-project-blog-preview.png)\n\nFiles 탭을 클릭하면 프로젝트 폴더에 다음과 같은 파일들이 생성되어 있음을 확인할 수 있다. 조교의 도움을 받아 각각의 파일이 어떠한 역할을 하는지 파악한다.\n\n| File                 | Description                   |\n|----------------------|-------------------------------|\n| \\_quarto.yml         | Quarto 프로젝트 파일          |\n| index.qmd            | 블로그의 홈페이지             |\n| about.qmd            | 블로그의 어바우트 페이지      |\n| posts/               | 포스트를 포함하고 있는 폴더   |\n| posts/\\_metadata.yml | 포스트가 공유하고 있는 옵션들 |\n| styles.css           | 웹사이트의 CSS                |\n\n### 구성 요소 수정하기\n\n구성 요소를 수정하여 자신의 개인 블로그를 만들어 나간다.\n\n#### 메타데이터\n\n블로그의 전체적인 모습은 \\_quarto.yml 파일에 의해 규정된다. \\_quarto.yml 파일의 내용을 살펴보고 조교의 도움을 받아 필요한 부분을 수정한다.\n\n다음의 웹사이트를 참조한다. <https://quarto.org/docs/output-formats/html-themes.html>. 특히, 25개의 테마를 살펴보고, 그 중 하나를 선택한다.\n\n#### 홈페이지(home page)\n\n블로그의 홈페이지는 포스트 디렉토리에 포함되는 모든 포스트의 리스트를 제공하는 것으로 index.qmd 파일에 의해 규정된다. index.qmd 파일의 내용을 살펴보고 조교의 도움을 받아 필요한 부분을 수정한다.\n\n다음의 웹사이트를 참조한다. <https://quarto.org/docs/websites/website-listings.html>. 특히 리스팅 유형(listing types) 옵션 세개(default, table, grid)를 살펴보고, 그 중 하나를 선택한다.\n\n#### 어바우트 페이지(about page)\n\n어바우트 페이지는 블로그와 블로그의 저작자에 대한 부가 정보를 제공하는 것으로 about.qmd 파일에 의해 규정된다. about.qmd 파일의 내용을 살펴보고 조교의 도움을 받아 필요한 부분을 수정한다.\n\n다음의 웹사이트를 참조한다. <https://quarto.org/docs/websites/website-about.html>. 특히 템플릿(template) 옵션 다섯개(jolla, trestles, solana, marquee, broadside)를 살펴보고, 그 중 하나를 선택한다.\n\n#### 포스트 디렉토리(posts directory)\n\n블로그의 콘텐츠는 포스트 디렉토리 속에 포함되어 있다. 기본적으로 하나의 포스트는 하나의 폴드인데, 개별 폴드 속에는 index.qmd라는 이름의 Quarto 파일이 들어 있다. 그리고 Quarto 다큐먼트에 포함되어 있는 이미지는 images라는 서브 폴드에 저장되어 있다.\n\n다음의 절차에 따라 새로운 포스트를 생성해 본다.\n\n-   posts 디렉토리 아래에 새로운 디렉토리를 생성한다. 이름은 날짜와 주제가 결합된 형태로 하면 좋다.\n\n-   새로운 디렉토리에 index.qmd 파일을 생성한다. 아래와 같이 YAML 해더를 수정하고, 실습 1에서처럼 새로운 포스트를 작성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n---\ntitle: \"I hate May\"\nauthor: \"Your Name Here\"\ndate: \"05/07/2024\"\ndate-modified: last-modified\n---\n```\n:::\n\n\n### 블로그를 웹 상에 출판하기\n\n완성된 개인 블로그를 다음의 절차에 따라 웹에 출판한다. 여기서는 [Posit](https://posit.co/)에서 제공하는 무료 출판 사이트인 [Quarto Pub](https://quartopub.com/)을 활용한다.\n\n-   [Quarto Pub](https://quartopub.com/)에 접속하여 계정을 만든다.\n\n-   RStudio에서, 왼쪽 하단부의 Terminal 탭을 누른다.\n\n-   프롬프트에 다음과 같이 입력하고 실행한다: quarto publish quarto-pub\n\n조교의 도움을 받고, 다음을 웹사이트를 참고한다. <https://quarto.org/docs/publishing/quarto-pub.html>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}