---
title: "Lab02: R과 데이터사이언스"
author: 이상일(서울대학교 지리교육과 교수), 김세창(사회교육과 지리전공 석사), 김우형(사회교육과 지리전공 석사과정)
number-sections: true
format: 
  html: 
    toc: true
    embed-resources: true
code-link: true
code-copy: true
execute: 
  warning: false
  error: false
  freeze: auto
editor: visual
---

## 실습의 목표 {.unnumbered}

1.  **R의 패키지**에 대해 이해할 수 있다.

2.  **데이터사이언스의 과정**을 개괄적으로 이해할 수 있다.

    -   데이터 시각화하기

    -   데이터 변형하기

    -   데이터 정리하기

    -   데이터 불러오기

3.  **파이프 연산자**의 사용법에 대해 이해할 수 있다.

## 패키지

패키지를 사용하기 우선 패키지가 사용자의 디바이스에 물리적으로 인스톨되어 있어야 하고, R 세션에서 패키지를 불러와야 한다. 패키지를 인스톨하는 방법은 두 가지 이다. 스크립트 내에서 패키지를 반복해서 인스톨하는 것은 합리적이지 않기 때문에 전자의 관행을 추천한다.

-   Output 창의 Packages 탭 선택: Install 아이콘 클릭하고 패키지 이름 입력

-   스크립트 내에서 인스톨하기: `install.packages("패키지명")`

쌍따옴표 속에 패키지 이름을 타이핑해야 한다. 한번 인스톨이 되면 업데이트하지 않는 한 새롭게 패키지를 인스톨할 필요가 없다. 인스톨된 패키지를 사용하려면 스크립트 내에서 다음과 같이 타이핑하고 실행한다.

-   `library(패키지명)`

괄호 속에 패키지명을 기입해야 한다.

::: callout-important
`install.packages()`함수에서는 반드시 패키지명을 쌍따옴표로 싸야하지만, `library()`함수에서는 그렇지 않다. 불러온 패키지는 R 세션이 유지되는 동안 내내 사용할 수 있지만, R 세션을 끝내고 다시 시작하면 다시 `library()`함수를 이용해 다시 불러와야 한다. 그래서 R 스크립트 파일의 시작 부분에는 패키지를 불러오는 코드를 위치시키고, 다시 스크립트 파일을 열 때마다 그 부분을 재실행하는 것이 좋은 습관이다.
:::

[`tidyverse`](https://www.tidyverse.org/) 패키지를 사용하는 것의 장점은 이 패키지만 불러오면 구성 패키지까지 한꺼번에 사용할 수 있게 된다는 점이다. 스크립트 내에서 다음과 같은 코드를 실행한다.

```{r}
library(tidyverse)
```

## 시각화하기

### 데이터 살펴보기

이 실습을 위해 남극 파머군도(Palmer Archipelago)에 서식하는 펭귄 성체의 신체 계측 데이터를 사용한다. 이 데이터는 [`palmerpenguins`](https://allisonhorst.github.io/palmerpenguins/)라는 패키지에 포함되어 있으므로 해당 패키지를 불러온다.

```{r}
library(palmerpenguins)
```

이제 이 패키지에 포함되어 있는 `penguins`라는 이름의 데이터를 불러온다.

```{r}
penguins
```

데이터를 자세히 살펴보면 몇 가지를 알 수 있다.

-   티블(`tibble`)이라는 형식의 데이터 프레임이다. 티블은 [`tidyverse`](https://www.tidyverse.org/)의 공식 데이터 프레임 포맷이다.

-   관측개체는 344개, 변수는 8개이다.

-   `species`, `island`, `sex` 변수의 유형은 팩트형(`fctr`)이고, `bill_length_mm`, `bill_depth_mm`은 실수형(`dbl`)이고, 나머지는 정수형(`int`)이다.

변수가 많아지면 전체 데이터를 조망하기 어렵기 때문에, 최초의 [`tidyverse`](https://www.tidyverse.org/) 함수인 `glimpse()`를 사용하여 데이터의 행과 열을 바꾸어 보자.

```{r}
glimpse(penguins)
```

::: {.callout-tip collapse="true"}
## 데이터 내 속성들에 대한 정보가 궁금할 때

`penguins` 데이터 내 속성들에 대한 설명을 보고싶다면 `help(penguins)` 또는 `?penguins`를 입력한 뒤 실행한다. ![penguins 데이터에 대한 설명](image/help.png)
:::

### 그래프 만들기

이 `penguins` 데이터와 `ggplot2()` 패키지를 이용하여 "펭귄의 날개 길이와 몸무게의 관계"를 표현하는 그래프를 작성해 보자. `ggplot2()`의 더 많은 사용법에 대해서는 이후의 실습에서 매우 자세히 다룰 것이기 때문에 오늘은 간단한 제작 과정만을 따라가 보면서 데이터 시각화에 흥미를 가질 수 있도록 해보자.

#### 플롯 객체의 지정

`ggplot()`이라는 함수를 통해 플롯 제작을 개시하는 단계이며, 어떤 데이터를 사용할지를 지정한다.

```{r}
ggplot(data = penguins) # 플롯 제작에 penguins 데이터를 사용
```

#### 플롯의 심미성 지정

데이터가 어떤 시각적 속성으로 표현될 것인가를 지정한다. 여기서는 간단히 어떤 변수들이 x-축과 y-축에 나타나는지만 지정한다. `mapping = aes()` 아규먼트가 핵심이다.

```{r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g) # x축에 날개 길이, y축에 몸무게를 표시
)
```

::: callout-tip
## 코드의 가독성을 위한 Tip

R에서 코드를 작성하다 보면 한 덩어리의 코드가 매우 길어지는 일이 빈번하게 발생한다. 코드를 정리하지 않고 계속 작성할 경우 작성자 본인이 봐도 무엇을 한 것인지 모르는 일이 발생하기 때문에 줄바꿈을 통해 코드를 간결하게 정리하는 것이 좋다. 특히 R이 익숙하지 않은 초보자의 경우 각 줄마다 본인이 무엇을 했는지 \# 각주를 통해 설명을 달아 놓으면 R 문법에 익숙해지는데 도움이 된다.
:::

#### 플롯의 기하 속성 지정

데이터가 어떤 기하학적 속성으로 표현될 것인가를 지정한다. `geom` 아규먼트가 핵심인데, `geom_point()`는 데이터를 포인트라고 하는 기하학적 속성으로 표현한다는 것을 지정한 것으로 결국 산포도(scatterplot)을 산출하게 된다.

```{r}
ggplot(
  data = penguins, # 플롯 제작에 penguins 데이터를 사용
  mapping = aes(x = flipper_length_mm, y = body_mass_g) # x축에 날개 길이, y축에 몸무게를 표시
) +
  geom_point() # 데이터를 산포도로 표현
```

#### 심미성의 첨가

이러한 관련성이 펭귄의 종족에 따라 다르게 나타나는지를 탐색하기 위해 `color` 라는 심미성을 `species`라는 변수에 적용한다.

```{r}
ggplot(
  data = penguins, # 플롯 제작에 penguins 데이터를 사용
  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species) # x축에 날개 길이, y축에 몸무게를 표시, 종별로 색상을 지정
) +
  geom_point() # 데이터를 산포도로 표현
```

#### 기하 레이어의 첨가

두 변수의 관련성을 보여주는 선형 기하를 첨가한다. 여기서는 `geom_smooth()`를 이용하여 OLS 회귀선을 첨가한다.

```{r}
ggplot(
  data = penguins, # 플롯 제작에 penguins 데이터를 사용
  mapping = aes(x = flipper_length_mm, y = body_mass_g) # x축에 날개 길이, y축에 몸무게를 표시
) +
  geom_point(mapping = aes(color = species)) + # 데이터를 산포도로 표현, 종별로 색상을 지정
  geom_smooth(method = "lm") # OLS 회귀선을 추가
```

::: {.callout-tip collapse="true"}
## OLS 회귀선이란?

OLS(Ordinary Least Square, 최소제곱법) 회귀선이란 관측값과 회귀선의 차이인 잔차의 제곱을 최소화하는 직선을 의미한다. 데이터들의 추세선 정도로 이해하면 된다. 선 주변의 음영은 신뢰 구간을 나타내는데, 이를 제거하고 싶으면 `se = FALSE`를 추가하면 된다.
:::

#### 라벨링 등 마무리 작업

```{r}
ggplot(
  data = penguins, # 플롯 제작에 penguins 데이터를 사용
  mapping = aes(x = flipper_length_mm, y = body_mass_g) # x축에 날개 길이, y축에 몸무게를 표시
) +
  geom_point(mapping = aes(color = species)) + # 데이터를 산포도로 표현, 종별로 색상을 지정
  geom_smooth(method = "lm") + # OLS 회귀선을 추가
  labs(
    title = "Body mass and flipper length", # 플롯의 제목을 지정
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins", # 플롯의 부제목을 지정
    x = "Flipper length (mm)", y = "Body mass (g)", # 축의 이름을 지정
    color = "Species" # 범례의 제목을 설정
  )
```

::: callout-note
데이터 시각화에 대한 보다 자세한 내용은 5주차 실습에서 다룬다.
:::

## 변형하기

변형하기와 관련된 함수들은 대부분 [`dplyr`](https://dplyr.tidyverse.org/) 패키지에 포함되어 있다.

### 데이터 살펴보기

이 실습을 위해 미국 교통통계국(U.S. Bureau of Transportation)이 제공하는 데이터를 사용하는데, 이것은 2013년 한 해 동안 미국 뉴욕시를 출발한 336,776대의 항공기에 대한 정보를 담고 있다. 이 데이터는 [`nycflights13`](https://github.com/tidyverse/nycflights13) 이라는 패키지에 포함되어 있으므로 해당 패키지를 불러온다. 그리고 나서 패키지에 포함되어 있는 `flights`라는 이름의 데이터를 불러온다.

```{r}
library(nycflights13)
glimpse(flights)
```

::: callout-tip
`flights` 데이터 내 속성들에 대한 설명을 보고싶다면 `help(flights)` 또는 `?flights`를 입력한 뒤 실행한다.
:::

### 주요 함수

여기서는 가장 널리 사용되는 6개 함수에 대해서만 개략적으로 다룬다. 그 6개 함수는 `select()`, `filter()`, `arrange()`, `mutate()`, `group_by()`, `summerize()`이다.

#### `select()` 함수

열(변수) 중 일부를 솎아낸다. 즉, 변수의 개수를 줄인다.

```{r}
select(flights, year, month, day) # 지정한 열(변수)만 추출
```

#### `filter()` 함수

특정 열(변수)에 의거해 조건을 만족하는 행을 솎아낸다. 즉 관측개체의 갯수를 줄인다.

```{r}
filter(flights, month == 1 & day == 1) # 지정한 행(관측개체)만 추출
```

#### `arrange()` 함수

특정 열(변수)에 의거해 행의 순서를 바꾼다. 내림차순으로 정렬하고 싶다면 `desc(dep_time)`을 넣으면 된다.

```{r}
arrange(flights, dep_time) # dep_time 오름차순으로 행 정렬
```

#### `mutate()` 함수

기존의 열(변수)을 변형하여 새로운 열(변수)을 생성한다. 아래에 gain <dbl>, speed <dbl> 변수가 새로 생긴 것을 확인할 수 있다.

```{r}
mutate(flights,
    gain = dep_delay - arr_delay, # gain이라는 새로운 열(변수) 생성
    speed = distance / air_time * 60 # speed라는 새로운 열(변수) 생성
  )
```

#### `group_by()` 함수

열(변수)(범주형 변수, categorical variables)에 의거해 전체 행을 그룹으로 분할한다. Groups: month\[12\]를 통해 월별로 행이 분할되었음을 알 수 있다.

```{r}
group_by(flights, month) # 전체 행을 월별로 분할
```

#### `summerize()` 함수

열(변수)의 통계량을 산출하여 새로운 열(변수)에 저장한다.

```{r}
summarize(flights, delay = mean(dep_delay, na.rm = TRUE)) # dep_delay의 평균을 delay라는 변수에 저장
```

::: {.callout-tip collapse="true"}
## 결측값

R에서 데이터 셋에 결측값이 포함되어 있을 경우 통계량을 계산하면 NA라는 결과를 얻게 된다. 따라서 데이터셋에 결측값이 있는지 확인한 뒤 이를 분석에서 제외하거나 다른 값으로 대체해야 한다. 여기에서는 결측값을 분석에서 제외하는 방법만 다룬다.

```{r}
# 결측값을 포함하여 통계량을 계산했을 때
summarize(flights, delay = mean(dep_delay))
```

```{r}
# dep_delay변수에 결측값이 몇개 있는지 확인: is.na
sum(is.na(flights$dep_delay))
```

```{r}
# 통계량 계산에서 결측값을 제외: na.rm = TRUE
summarize(flights, delay = mean(dep_delay, na.rm = TRUE))
```
:::

위의 `group_by()` 함수와 결합하면, 그룹별로 열(변수)의 통계량을 산출하여 새로운 열(변수)에 저장할 수 있다.

```{r}
by_day <- group_by(flights, year, month, day) # 전체 행을 연, 월, 일로 분할하여 새로운 변수에 할당
summarize(by_day, delay = mean(dep_delay, na.rm = TRUE)) # 일별 delay 계산
```

::: callout-note
데이터 변형하기에 대한 보다 자세한 내용은 4주차 실습에서 다룬다.
:::

## 정리하기

정리하기와 관련된 함수들은 대부분 [`tidyr`](https://tidyr.tidyverse.org/) 패키지에 포함되어 있다. 많은 함수가 있지만 가장 중요한 두 개의 함수에만 집중한다.

### 데이터 살펴보기

이 실습에서는 `tidyverse`에 포함되어 있는 매우 단순한 데이터를 사용한다.

```{r}
table4a
```

```{r}
table2
```

### 주요 함수

#### `pivot_longer()` 함수

`table4a`에서 1999과 2000은 변수명일 수 없다. `year`라는 변수의 속성이어야 한다.

```{r}
pivot_longer(
  table4a, 
  cols = c(`1999`, `2000`), # 바꾸고싶은 변수 지정 
  names_to = "year", # 원래 데이터의 변수명들이 들어갈 새로운 변수명 지정
  values_to = "cases" # 원래 데이터의 값들이 들어갈 새로운 변수명 지정
)
```

#### `pivot_wider()` 함수

`table2`에서 `type` 변수는 두 개의 변수명을 포함하고 있다. 즉, `cases`와 `population`은 속성값이라기 보다는 변수명이다.

```{r}
pivot_wider(
  table2, 
  names_from = "type", # 원래 데이터의 type 값들을 변수로 변환
  values_from = "count" # 원래 데이터의 count 값들을 변수의 값으로 변환
)
```

::: callout-note
데이터 정리하기에 대한 보다 자세한 내용은 3주차 실습에서 다룬다.
:::

## 불러오기

불러오기와 관련된 함수들은 대부분 [`readr`](https://readr.tidyverse.org/) 패키지에 포함되어 있다. 여러 유형의 파일을 불러오기 위해 여러 함수가 존재하지만, 콤마분리값(comma-separated values, CSV) 형식의 데이터를 불러오는 함수(`read_csv()`)만 실습한다.

```{r}
students <- read_csv("https://pos.it/r4ds-students-csv") # URL에서 가져온 CSV 파일을 students에 할당
glimpse(students)
```

::: callout-note
데이터 불러오기에 대한 보다 자세한 내용은 3주차 실습에서 다룬다.
:::

## 파이프 연산자(pipe operator)

우리는 이전 실습에서 할당 연산자(`<-`)에 대해 배웠다. 오늘 살펴본 다양한 변형의 결과를 다른 데이터 프레임에 담고 싶으면 다음과 같이 할당 연산자를 사용할 수 있다.

```{r}
flights_day1 <- filter(flights, month == 1 & day == 1)
glimpse(flights_day1)
```

### 파이프 연산자

-   현재 RStudio의 디폴트는 `%>%`로 설정되어 있다. 이것을 Tools \> Global Options \> Code에 가서 'Use native pipe operator, \|\> (requires R 4.1+)'를 선택해 주어야 한다. 아래의 @fig-pipe-operator 를 참고하라.

![파이프 연산자(https://r4ds.hadley.nz/data-transform)](https://r4ds.hadley.nz/screenshots/rstudio-pipe-options.png){#fig-pipe-operator}

-   단축키는 **Crtl + Shift + M(Mac은 Commnad + Shift + M)**이다. 다른 건 몰라도 이 단축키만은 반드시 기억해야 한다.

IAH 공항으로 가기 위한 가장 빠른 항공편을 찾기 위한 다음의 코드들을 비교해 보자. 먼저 파이프 연산자를 사용하지 않은 경우이다.

```{r}
# 중간에 여러 변수를 거쳐야 한다.
flights1 <- filter(flights, dest == "IAH")
flights2 <- mutate(flights1, speed = distance / air_time * 60)
flights3 <- select(flights2, year:day, dep_time, carrier, flight, speed)
arrange(flights3, desc(speed))
```

```{r}
# 또는 함수 안에 함수를 집어넣는 과정을 반복해야 한다.
arrange(
  select(
    mutate(
      filter(
        flights, 
        dest == "IAH"
      ),
      speed = distance / air_time * 60
    ),
    year:day, dep_time, carrier, flight, speed
  ),
  desc(speed)
)
```

다음은 파이프 연산자를 사용한 경우이다. 동일한 결과를 가져다 주지만 훨신 더 간결하고 직관적이고 이해하기 쉽다. 파이프 연산자의 사용 원리는 이후 실습에서 자세히 배운다.

```{r}
flights |> 
  filter(dest == "IAH") |>
  mutate(speed = distance / air_time * 60) |> 
  select(year:day, dep_time, carrier, flight, speed) |> 
  arrange(desc(speed))
```
